<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>量子孤岛</title>
  
  <subtitle>王 韬</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2022-09-11T14:03:46.705Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>孤岛violet</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何编译Linux内核源码？</title>
    <link href="http://yoursite.com/2022/09/11/Linux-kernel-compilation/"/>
    <id>http://yoursite.com/2022/09/11/Linux-kernel-compilation/</id>
    <published>2022-09-11T13:49:13.000Z</published>
    <updated>2022-09-11T14:03:46.705Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何编译并运行linux系统"><a class="markdownIt-Anchor" href="#如何编译并运行linux系统"></a> 如何编译并运行Linux系统？</h1><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> <strong>前言</strong></h2><blockquote><p>学习Linux内核是一件振奋人心的事情，而在学习伊始对Linux内核的成功编译并运行也更会燃起更足的动力去钻研。本文从下载并编译Linux内核、编译busybox、制作一个最小的根文件系统，最后用qemu启动你编译好的内核和根文件系统 ，初步感受Linux内核的魅力所在。</p></blockquote><p><strong>首先明确两点：</strong></p><ol><li>配置内核就是你来决定编码哪些代码；</li><li>编译内核就是生成可执行文件的一个过程。</li></ol><p><strong>再明确内核文件的产物名称：</strong></p><ul><li>vmlinux：原始的，未经压缩的内核可执行文件</li><li>zImage：压缩过的可执行文件——压缩vmlinux后，加上一个head part（用来解压）</li><li>uImage：用于给uboot引导的zImage</li><li>bzImage：即bigzImage ，通过gzip压缩的</li></ul><p>好了，明确了上述几点，就可以开始实验了。本文的实验环境如下：</p><ul><li>Linux系统：ubuntu 20.04</li><li>linux源码版本：linux-4.9.229</li><li>busybox源码版本：busybox-1.30.0</li><li>qemu-system-x86_64版本：2.0.0</li></ul><p><strong>实验目标</strong>：</p><ol><li>编译Linux内核源码</li><li>编译busybox</li><li>制作一个简版文件系统</li><li>制作根文件系统镜像文件</li><li>利用qemu运行linux内核</li></ol><h2 id="1下载并编译linux内核"><a class="markdownIt-Anchor" href="#1下载并编译linux内核"></a> <strong>1.下载并编译Linux内核</strong></h2><p><a href="https://link.zhihu.com/?target=https%3A//mirrors.edge.kernel.org/pub/linux/kernel/v4.x/" target="_blank" rel="noopener"><strong>Index of /pub/linux/kernel/v4.x/mirrors.edge.kernel.org/pub/linux/kernel/v4.x/</strong></a></p><p>下载并解压后，进入目录。</p><h3 id="1指定硬件体系架构"><a class="markdownIt-Anchor" href="#1指定硬件体系架构"></a> <strong>1.指定硬件体系架构</strong></h3><p>为了演示方便，选用了x86架构，如果编译arm则需要再下载对应的toolchain。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="builtin-name">export</span> <span class="attribute">ARCH</span>=x86</span><br></pre></td></tr></table></figure><h3 id="2配置board-config"><a class="markdownIt-Anchor" href="#2配置board-config"></a> <strong>2.配置board config</strong></h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>make  x86_64_defconfig</span><br></pre></td></tr></table></figure><h3 id="3配置内核"><a class="markdownIt-Anchor" href="#3配置内核"></a> <strong>3.配置内核</strong></h3><p>这一步其实是对第2步的进行微调，这里我们使用基于ncurse库编制的图形界面工具：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>make menuconfig</span><br></pre></td></tr></table></figure><p>如果执行该命令时出现：</p><p><a href="https://imgse.com/i/vXCMG9" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2022/09/11/vXCMG9.png" alt="vXCMG9.png"></a></p><p>原因：<strong>缺少ncurses dev工具</strong></p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install libncurses5-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure><p>如果需要内核支持ramdisk驱动，需要选中如下配置：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">General setup  ---&gt;</span><br><span class="line">       ----&gt; [*] Initial RAM filesystem <span class="keyword">and</span> RAM disk (initramfs/initrd) support</span><br><span class="line">    Device Drivers  ---&gt;</span><br><span class="line">       [*] Block devices  ---&gt;</span><br><span class="line">               &lt;*&gt;   RAM block device support</span><br><span class="line">               (65536)<span class="built_in"> Default </span>RAM disk size (kbytes)</span><br></pre></td></tr></table></figure><h3 id="4编译内核"><a class="markdownIt-Anchor" href="#4编译内核"></a> <strong>4.编译内核</strong></h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>make -j8</span><br></pre></td></tr></table></figure><p>编译成功后的内核位于：arch/x86_64/boot/bzImage</p><p>至此，内核编译完成。</p><h2 id="2-编译busybox"><a class="markdownIt-Anchor" href="#2-编译busybox"></a> <strong>2. 编译busybox</strong></h2><p>什么是busybox？</p><p>busybox号称“嵌入式Linux的瑞士军刀”。BusyBox工具小巧高效，可以替代一大批常用的标准Linux命令行工具，功能有所简化，非常适合资源有限的嵌入式平台。BusyBox是模块化且高度可配置的，可以对其进行裁剪以满足特定需求。</p><p>在如下链接下载busybox：</p><p><a href="https://link.zhihu.com/?target=https%3A//busybox.net/downloads/" target="_blank" rel="noopener"><strong>https://busybox.net/downloads/busybox.net/downloads/</strong></a></p><p>我们以busybox-1.30.0作为实验对象。</p><p>下载之后解压并进入该busybox目录开始配置并编译。这里把busybox配置为静态编译，这样不依赖其他动态库比较容易操作和演示。编译则似曾相识，与编译内核的指令是一样的！</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ make menuconfig</span><br><span class="line"></span><br><span class="line">Busybox<span class="built_in"> Settings </span> ---&gt;</span><br><span class="line">      Build Options  ---&gt;</span><br><span class="line">            [*] Build BusyBox as a static binary (<span class="literal">no</span> shared libs)</span><br></pre></td></tr></table></figure><p>配置完之后进行编译和安装</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">make</span> &amp;&amp; <span class="built_in">make</span> install</span><br></pre></td></tr></table></figure><p>make是编译busybox，make install是为了在对应目录中编译安装一系列的工具。</p><p>编译完成后的busybox就安装在源码根目录下的_install目录了。</p><p>至此，我们对Linux内核和busybox进行了配置和编译。光编译肯定不过瘾，接下来演示基于busybox制作一个简单的文件系统，并通过qemu模拟器运行Linux，真正的让内核工作起来！</p><h2 id="3-制作一个简版文件系统"><a class="markdownIt-Anchor" href="#3-制作一个简版文件系统"></a> 3. 制作一个简版文件系统</h2><p>编译完成后的busybox就安装在源码根目录下的_install目录了，我们进入_install目录，补充一些必要的文件或目录，相关的shell命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir -p etc dev mnt proc sys tmp mnt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir -p etc/init.d/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir etc dev mnt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir -p proc sys tmp mnt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir -p etc/init.d/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim etc/fstab</span></span><br><span class="line">proc        /proc           proc         defaults        0        0</span><br><span class="line">tmpfs       /tmp            tmpfs      defaults        0        0</span><br><span class="line">sysfs       /sys            sysfs        defaults        0        0</span><br><span class="line"><span class="meta">$</span><span class="bash"> vim etc/init.d/rcS</span></span><br><span class="line">echo -e "Welcome to tinyLinux"</span><br><span class="line">/bin/mount -a</span><br><span class="line">echo -e "Remounting the root filesystem"</span><br><span class="line">mount  -o  remount,rw  /</span><br><span class="line">mkdir -p /dev/pts</span><br><span class="line">mount -t devpts devpts /dev/pts</span><br><span class="line">echo /sbin/mdev &gt; /proc/sys/kernel/hotplug</span><br><span class="line">mdev -s</span><br><span class="line"><span class="meta">$</span><span class="bash"> chmod 755 etc/init.d/rcS</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim etc/inittab</span></span><br><span class="line">::sysinit:/etc/init.d/rcS</span><br><span class="line">::respawn:-/bin/sh</span><br><span class="line">::askfirst:-/bin/sh</span><br><span class="line">::ctrlaltdel:/bin/umount -a -r</span><br><span class="line"><span class="meta">$</span><span class="bash"> chmod 755 etc/inittab</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> dev</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo mknod console c 5 1</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo mknod null c 1 3</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo mknod tty1 c 4 1</span></span><br></pre></td></tr></table></figure><h2 id="4-制作根文件系统镜像文件"><a class="markdownIt-Anchor" href="#4-制作根文件系统镜像文件"></a> 4. <strong>制作根文件系统镜像文件</strong></h2><p>思路：</p><ol><li>先制作一个空的镜像文件；</li><li>然后把此镜像文件格式化为ext3格式</li><li>接着把此镜像文件挂载，并把根文件系统复制到挂载目录</li><li>卸载该镜像文件。</li><li>打成gzip包。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">rm -rf rootfs.ext3</span><br><span class="line">rm -rf fs</span><br><span class="line">dd if=/dev/zero of=./rootfs.ext3 bs=1M count=32</span><br><span class="line">mkfs.ext3 rootfs.ext3</span><br><span class="line">mkdir fs</span><br><span class="line">mount -o loop rootfs.ext3 ./fs</span><br><span class="line">cp -rf ./_install/* ./fs</span><br><span class="line">umount ./fs</span><br><span class="line">gzip --best -c rootfs.ext3 &gt; rootfs.img.gz</span><br></pre></td></tr></table></figure><p>最终生成的文件系统镜像名字为：<code>rootfs.img.gz</code></p><p>准备好了内核和文件系统镜像，接下来就是见证奇迹的时刻！</p><h2 id="5-qemu运行linux内核"><a class="markdownIt-Anchor" href="#5-qemu运行linux内核"></a> 5. qemu运行linux内核</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> qemu-system-x86_64 \</span></span><br><span class="line">  -kernel ./linux-4.9.229/arch/x86_64/boot/bzImage  \</span><br><span class="line">  -initrd ./busybox-1.30.0/rootfs.img.gz   \</span><br><span class="line">  -append "root=/dev/ram init=/linuxrc"  \</span><br><span class="line">-serial file:output.txt</span><br></pre></td></tr></table></figure><p><a href="https://imgse.com/i/vXCgIg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2022/09/11/vXCgIg.png" alt="vXCgIg.png"></a></p><p>这样一个完整的Linux系统就起来啦!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;如何编译并运行linux系统&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#如何编译并运行linux系统&quot;&gt;&lt;/a&gt; 如何编译并运行Linux系统？&lt;/h1&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Ancho
      
    
    </summary>
    
      <category term="Linux内核" scheme="http://yoursite.com/categories/Linux%E5%86%85%E6%A0%B8/"/>
    
    
      <category term="Linux内核" scheme="http://yoursite.com/tags/Linux%E5%86%85%E6%A0%B8/"/>
    
      <category term="编译" scheme="http://yoursite.com/tags/%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>Linux物理内存模型</title>
    <link href="http://yoursite.com/2022/08/07/Linux%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2022/08/07/Linux内存管理模型/</id>
    <published>2022-08-07T06:14:08.000Z</published>
    <updated>2022-08-07T09:50:58.278Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th style="text-align:left">日期</th><th style="text-align:left">内核版本</th><th style="text-align:left">架构</th></tr></thead><tbody><tr><td style="text-align:left">2022-08-7立秋</td><td style="text-align:left">Linux5.4.200</td><td style="text-align:left">X86 &amp; arm</td></tr></tbody></table><h1 id="linux物理内存模型"><a class="markdownIt-Anchor" href="#linux物理内存模型"></a> Linux物理内存模型</h1><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>本文是Linux内存管理系列文章的第一篇，先对一些常见概念有一个基本的认知。</p><p><strong>提问环节</strong>：</p><ul><li>Linux支持哪几种内存模型？</li><li>Multiprocessors系统设计内存架构的两种模式？</li><li>Linux内存有哪三大结构？</li></ul><p>去本文中找答案吧！</p><hr><h2 id="linux内存模型"><a class="markdownIt-Anchor" href="#linux内存模型"></a> Linux内存模型</h2><p>所谓的内存模型，是从CPU的角度来观察物理内存的分布，而CPU 通过总线去访问内存。</p><p>Linux kernel支持3种内存模型：</p><ul><li>Flat Memory Model</li><li>Discontiguous Memory Model</li><li>Sparse Memory Model</li></ul><p>在经典的**平坦内存模型（Flat Memory Model）**中，物理地址是连续的，页也是连续的，每个页大小也是一样的。每个页有一个结构 struct page 表示，这个结构也是放在一个数组里面，这样根据页号，很容易通过下标找到相应的 struct page 结构。</p><p><a href="https://imgtu.com/i/vK3K91" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2022/08/07/vK3K91.png" alt="vK3K91.png"></a></p><p>当存在多个CPU时分布在总线的一侧，所有内存组成的整体在内存的另一侧，所有的CPU访问内存都要经过总线，而且距离都相同。这就是我们熟悉的对称多处理器<strong>SMP</strong>（Symmetric multiprocessing），如下左图所示。这种模式成为<strong>UMA（uniform memory access）</strong>。针对嵌入式系统，一般采用UMA模式。不过这种模型缺点很明显，就是所有数据都要经过同一个总线，总线会成为瓶颈。</p><p><a href="https://imgtu.com/i/vK3N4A" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2022/08/07/vK3N4A.png" alt="vK3N4A.png"></a></p><p>为了提高性能和可拓展性，有了另一个模式<strong>NUMA（Non-uniform memory access）</strong>，非一致内存访问。如上右图所示。仔细观察内存的划分，不再是一整块，而是每个CPU有各自的内存。CPU访问本地内存不需要经过总线，CPU+本地内存成为一个NUMA节点。如果本地不够用，就要通过总线去其他NUMA节点申请内存,时间上肯定会久一些。、</p><p>NUMA往往是<strong>非连续内存模型（Discontiguous Memory Model）</strong>。内存被分成了多个节点，每个节点再被分成一个一个的页面。<strong>由于页需要全局唯一定位，页还是需要有全局唯一的页号的</strong>。但是由于物理内存不是连起来的了，页号也就不再连续了。注意，非连续内存模型不是NUMA模式的充分条件，一整块内存中物理内存地址也可能不连续。</p><p>当memory支持hotplug，**稀疏内存模型（Sparse Memory Model）**也应运而生。sparse memory最终可以替代Discontiguous memory的，这个替代过程正在进行中。</p><h2 id="物理内存三大结构"><a class="markdownIt-Anchor" href="#物理内存三大结构"></a> 物理内存三大结构</h2><h3 id="node"><a class="markdownIt-Anchor" href="#node"></a> Node</h3><p>NUMA中CPU加本地内存成为一个Node，UMA中只有一个Node。</p><p>Node在Linux中用<code>typedef struct pglist_data pg_data_t</code>表示。</p><p><a href="https://elixir.bootlin.com/linux/v5.4.200/source/include/linux/mmzone.h#L698" target="_blank" rel="noopener">https://elixir.bootlin.com/linux/v5.4.200/source/include/linux/mmzone.h#L698</a></p><p>主要成员变量包括：</p><ul><li>node_id；每一个节点都有自己的 ID：</li><li>node_mem_map 就是这个节点的 struct page 数组，用于描述这个节点里面的所有的页；</li><li>node_start_pfn 是这个节点的起始页号；</li><li>node_spanned_pages 是这个节点中包含不连续的物理内存地址的页面数；</li><li>node_present_pages 是真正可用的物理页面的数目。</li><li>node_zones: 每一个节点分成一个个区域 zone,放在node_zones数组里。</li><li>nr_zones 表示当前节点的区域的数量</li><li>node_zonelists 是备用节点和它的内存区域的情况。当本地内存不够用，就要通过总线去其他NUMA节点觅食。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">pglist_data</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">zone</span> <span class="title">node_zones</span>[<span class="title">MAX_NR_ZONES</span>];</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">zonelist</span> <span class="title">node_zonelists</span>[<span class="title">MAX_ZONELISTS</span>];</span></span><br><span class="line">  <span class="keyword">int</span> nr_zones;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">page</span> *<span class="title">node_mem_map</span>;</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span> node_start_pfn;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span> node_present_pages; <span class="comment">/* total number of physical pages */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span> node_spanned_pages; <span class="comment">/* total size of physical page range, including holes */</span></span><br><span class="line">  <span class="keyword">int</span> node_id;</span><br><span class="line">......</span><br><span class="line">&#125; <span class="keyword">pg_data_t</span>;</span><br></pre></td></tr></table></figure><p>整个内存被分为多个节点，pglist_data放在一个数组中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pglist_data</span> *<span class="title">node_data</span>[<span class="title">MAX_NUMNODES</span>] __<span class="title">read_mostly</span>;</span></span><br></pre></td></tr></table></figure><h3 id="zone"><a class="markdownIt-Anchor" href="#zone"></a> Zone</h3><p>每一个Node分成多个zone，放在数组 node_zones 中,大小为 MAX_NR_ZONES。我们来看区域的定义。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> zone_type &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_ZONE_DMA</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * ZONE_DMA is used when there are devices that are not able</span></span><br><span class="line"><span class="comment"> * to do DMA to all of addressable memory (ZONE_NORMAL). Then we</span></span><br><span class="line"><span class="comment"> * carve out the portion of memory that is needed for these devices.</span></span><br><span class="line"><span class="comment"> * The range is arch specific.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Some examples</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * ArchitectureLimit</span></span><br><span class="line"><span class="comment"> * ---------------------------</span></span><br><span class="line"><span class="comment"> * parisc, ia64, sparc&lt;4G</span></span><br><span class="line"><span class="comment"> * s390, powerpc&lt;2G</span></span><br><span class="line"><span class="comment"> * armVarious</span></span><br><span class="line"><span class="comment"> * alphaUnlimited or 0-16MB.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * i386, x86_64 and multiple other arches</span></span><br><span class="line"><span class="comment"> * &lt;16M.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ZONE_DMA,</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_ZONE_DMA32</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * x86_64 needs two ZONE_DMAs because it supports devices that are</span></span><br><span class="line"><span class="comment"> * only able to do DMA to the lower 16M but also 32 bit devices that</span></span><br><span class="line"><span class="comment"> * can only do DMA areas below 4G.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ZONE_DMA32,</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Normal addressable memory is in ZONE_NORMAL. DMA operations can be</span></span><br><span class="line"><span class="comment"> * performed on pages in ZONE_NORMAL if the DMA devices support</span></span><br><span class="line"><span class="comment"> * transfers to all addressable memory.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ZONE_NORMAL,</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_HIGHMEM</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * A memory area that is only addressable by the kernel through</span></span><br><span class="line"><span class="comment"> * mapping portions into its own address space. This is for example</span></span><br><span class="line"><span class="comment"> * used by i386 to allow the kernel to address the memory beyond</span></span><br><span class="line"><span class="comment"> * 900MB. The kernel will set up special mappings (page</span></span><br><span class="line"><span class="comment"> * table entries on i386) for each page that the kernel needs to</span></span><br><span class="line"><span class="comment"> * access.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ZONE_HIGHMEM,</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">ZONE_MOVABLE,</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_ZONE_DEVICE</span></span><br><span class="line">ZONE_DEVICE,</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">__MAX_NR_ZONES</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">管理内存域</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">ZONE_DMA</td><td style="text-align:left">对于不能通过ZONE_NORMAL进行DMA访问的,需要预留这部分内存用于DMA操作</td></tr><tr><td style="text-align:left">ZONE_DMA32</td><td style="text-align:left">用于低于4G内存访问</td></tr><tr><td style="text-align:left">ZONE_NORMAL</td><td style="text-align:left">直接映射区，从物理内存到虚拟内存的内核区域，通过加上一个常量直接映射</td></tr><tr><td style="text-align:left">ZONE_HIGHMEM</td><td style="text-align:left">高端内存区，对于 32 位系统来说超过 896M 的地方，对于 64 位没必要有的一段区域</td></tr><tr><td style="text-align:left">ZONE_MOVABLE</td><td style="text-align:left">可移动区域，通过将物理内存划分为可移动分配区域和不可移动分配区域来避免内存碎片</td></tr><tr><td style="text-align:left">ZONE_DEVICE</td><td style="text-align:left">为支持热插拔设备而分配的Non Volatile Memory非易失性内存</td></tr><tr><td style="text-align:left">__MAX_NR_ZONES</td><td style="text-align:left">充当结束标记, 在内核中想要迭代系统中所有内存域, 会用到该常量</td></tr></tbody></table><p>Zone的结构体如下(<a href="https://elixir.bootlin.com/linux/v5.4.200/source/include/linux/mmzone.h#L417" target="_blank" rel="noopener">https://elixir.bootlin.com/linux/v5.4.200/source/include/linux/mmzone.h#L417</a>)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">zone</span> &#123;</span></span><br><span class="line"><span class="comment">/* Read-mostly fields */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* zone watermarks, access with *_wmark_pages(zone) macros */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> _watermark[NR_WMARK];</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> watermark_boost;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> nr_reserved_highatomic;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * We don't know if the memory that we're going to allocate will be</span></span><br><span class="line"><span class="comment"> * freeable or/and it will be released eventually, so to avoid totally</span></span><br><span class="line"><span class="comment"> * wasting several GB of ram we must reserve some of the lower zone</span></span><br><span class="line"><span class="comment"> * memory (otherwise we risk to run OOM on the lower zones despite</span></span><br><span class="line"><span class="comment"> * there being tons of freeable ram on the higher zones).  This array is</span></span><br><span class="line"><span class="comment"> * recalculated at runtime if the sysctl_lowmem_reserve_ratio sysctl</span></span><br><span class="line"><span class="comment"> * changes.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">long</span> lowmem_reserve[MAX_NR_ZONES];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_NUMA</span></span><br><span class="line"><span class="keyword">int</span> node;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pglist_data</span>*<span class="title">zone_pgdat</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">per_cpu_pageset</span> __<span class="title">percpu</span> *<span class="title">pageset</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CONFIG_SPARSEMEM</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Flags for a pageblock_nr_pages block. See pageblock-flags.h.</span></span><br><span class="line"><span class="comment"> * In SPARSEMEM, this map is stored in struct mem_section</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>*pageblock_flags;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* CONFIG_SPARSEMEM */</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* zone_start_pfn == zone_start_paddr &gt;&gt; PAGE_SHIFT */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>zone_start_pfn;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * spanned_pages is the total pages spanned by the zone, including</span></span><br><span class="line"><span class="comment"> * holes, which is calculated as:</span></span><br><span class="line"><span class="comment"> * spanned_pages = zone_end_pfn - zone_start_pfn;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * present_pages is physical pages existing within the zone, which</span></span><br><span class="line"><span class="comment"> * is calculated as:</span></span><br><span class="line"><span class="comment"> *present_pages = spanned_pages - absent_pages(pages in holes);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * managed_pages is present pages managed by the buddy system, which</span></span><br><span class="line"><span class="comment"> * is calculated as (reserved_pages includes pages allocated by the</span></span><br><span class="line"><span class="comment"> * bootmem allocator):</span></span><br><span class="line"><span class="comment"> *managed_pages = present_pages - reserved_pages;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * So present_pages may be used by memory hotplug or memory power</span></span><br><span class="line"><span class="comment"> * management logic to figure out unmanaged pages by checking</span></span><br><span class="line"><span class="comment"> * (present_pages - managed_pages). And managed_pages should be used</span></span><br><span class="line"><span class="comment"> * by page allocator and vm scanner to calculate all kinds of watermarks</span></span><br><span class="line"><span class="comment"> * and thresholds.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Locking rules:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * zone_start_pfn and spanned_pages are protected by span_seqlock.</span></span><br><span class="line"><span class="comment"> * It is a seqlock because it has to be read outside of zone-&gt;lock,</span></span><br><span class="line"><span class="comment"> * and it is done in the main allocator path.  But, it is written</span></span><br><span class="line"><span class="comment"> * quite infrequently.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The span_seq lock is declared along with zone-&gt;lock because it is</span></span><br><span class="line"><span class="comment"> * frequently read in proximity to zone-&gt;lock.  It's good to</span></span><br><span class="line"><span class="comment"> * give them a chance of being in the same cacheline.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Write access to present_pages at runtime should be protected by</span></span><br><span class="line"><span class="comment"> * mem_hotplug_begin/end(). Any reader who can't tolerant drift of</span></span><br><span class="line"><span class="comment"> * present_pages should get_online_mems() to get a stable value.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">atomic_long_t</span>managed_pages;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>spanned_pages;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>present_pages;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>*name;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_MEMORY_ISOLATION</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Number of isolated pageblock. It is used to solve incorrect</span></span><br><span class="line"><span class="comment"> * freepage counting problem due to racy retrieving migratetype</span></span><br><span class="line"><span class="comment"> * of pageblock. Protected by zone-&gt;lock.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>nr_isolate_pageblock;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_MEMORY_HOTPLUG</span></span><br><span class="line"><span class="comment">/* see spanned/present_pages for more description */</span></span><br><span class="line"><span class="keyword">seqlock_t</span>span_seqlock;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> initialized;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Write-intensive fields used from the page allocator */</span></span><br><span class="line">ZONE_PADDING(_pad1_)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* free areas of different sizes */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">free_area</span><span class="title">free_area</span>[<span class="title">MAX_ORDER</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* zone flags, see below */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>flags;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Primarily protects free_area */</span></span><br><span class="line"><span class="keyword">spinlock_t</span>lock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Write-intensive fields used by compaction and vmstats. */</span></span><br><span class="line">ZONE_PADDING(_pad2_)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * When free pages are below this point, additional steps are taken</span></span><br><span class="line"><span class="comment"> * when reading the number of free pages to avoid per-cpu counter</span></span><br><span class="line"><span class="comment"> * drift allowing watermarks to be breached</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> percpu_drift_mark;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined CONFIG_COMPACTION || defined CONFIG_CMA</span></span><br><span class="line"><span class="comment">/* pfn where compaction free scanner should start */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>compact_cached_free_pfn;</span><br><span class="line"><span class="comment">/* pfn where async and sync compaction migration scanner should start */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>compact_cached_migrate_pfn[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>compact_init_migrate_pfn;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>compact_init_free_pfn;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_COMPACTION</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * On compaction failure, 1&lt;&lt;compact_defer_shift compactions</span></span><br><span class="line"><span class="comment"> * are skipped before trying again. The number attempted since</span></span><br><span class="line"><span class="comment"> * last failure is tracked with compact_considered.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>compact_considered;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>compact_defer_shift;</span><br><span class="line"><span class="keyword">int</span>compact_order_failed;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined CONFIG_COMPACTION || defined CONFIG_CMA</span></span><br><span class="line"><span class="comment">/* Set to true when the PG_migrate_skip bits should be cleared */</span></span><br><span class="line"><span class="keyword">bool</span>compact_blockskip_flush;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span>contiguous;</span><br><span class="line"></span><br><span class="line">ZONE_PADDING(_pad3_)</span><br><span class="line"><span class="comment">/* Zone statistics */</span></span><br><span class="line"><span class="keyword">atomic_long_t</span>vm_stat[NR_VM_ZONE_STAT_ITEMS];</span><br><span class="line"><span class="keyword">atomic_long_t</span>vm_numa_stat[NR_VM_NUMA_STAT_ITEMS];</span><br><span class="line">&#125; ____cacheline_internodealigned_in_smp;</span><br></pre></td></tr></table></figure><p>主要的变量有:</p><ul><li>zone_start_pfn 表示属于这个 zone 的第一个页</li><li>spanned_pages = zone_end_pfn - zone_start_pfn;根据注释: spanned_pages is the total pages spanned by the zone, including<br>holes, which is calculated as.指的是不管中间有没有物理内存空洞，直接最后的页号减去起始的页号,简单粗暴.</li><li>present_pages = spanned_pages - absent_pages(pages in holes);present_pages 是这个 zone 在物理内存中真实存在的所有 page 数目</li><li>managed_pages = present_pages - reserved_pages，也即 managed_pages 是这个 zone 被伙伴系统管理的所有的 page 数目.</li><li>per_cpu_pageset用于区分冷热页.</li></ul><p>注: 如果一个页被加载到 CPU 高速缓存里面，这就是一个热页（Hot Page），CPU 读起来速度会快很多，如果没有就是冷页（Cold Page）</p><h3 id="page"><a class="markdownIt-Anchor" href="#page"></a> Page</h3><p>page是组成物理内存的基本单位.用struc_page表示.</p><p><a href="https://elixir.bootlin.com/linux/v5.4.200/source/include/linux/mm_types.h#L68" target="_blank" rel="noopener">https://elixir.bootlin.com/linux/v5.4.200/source/include/linux/mm_types.h#L68</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">page</span> &#123;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> flags;<span class="comment">/* Atomic flags, some possibly</span></span><br><span class="line"><span class="comment"> * updated asynchronously */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Five words (20/40 bytes) are available in this union.</span></span><br><span class="line"><span class="comment"> * WARNING: bit 0 of the first word is used for PageTail(). That</span></span><br><span class="line"><span class="comment"> * means the other users of this union MUST NOT use the bit to</span></span><br><span class="line"><span class="comment"> * avoid collision and false-positive PageTail().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">union</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span><span class="comment">/* Page cache and anonymous pages */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @lru: Pageout list, eg. active_list protected by</span></span><br><span class="line"><span class="comment"> * pgdat-&gt;lru_lock.  Sometimes used as a generic list</span></span><br><span class="line"><span class="comment"> * by the page owner.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">lru</span>;</span></span><br><span class="line"><span class="comment">/* See page-flags.h for PAGE_MAPPING_FLAGS */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">address_space</span> *<span class="title">mapping</span>;</span></span><br><span class="line"><span class="keyword">pgoff_t</span> index;<span class="comment">/* Our offset within mapping. */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @private: Mapping-private opaque data.</span></span><br><span class="line"><span class="comment"> * Usually used for buffer_heads if PagePrivate.</span></span><br><span class="line"><span class="comment"> * Used for swp_entry_t if PageSwapCache.</span></span><br><span class="line"><span class="comment"> * Indicates order in the buddy system if PageBuddy.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">private</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span><span class="comment">/* page_pool used by netstack */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @dma_addr: might require a 64-bit value on</span></span><br><span class="line"><span class="comment"> * 32-bit architectures.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> dma_addr[<span class="number">2</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span><span class="comment">/* slab, slob and slub */</span></span><br><span class="line"><span class="keyword">union</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">slab_list</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span><span class="comment">/* Partial pages */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">page</span> *<span class="title">next</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_64BIT</span></span><br><span class="line"><span class="keyword">int</span> pages;<span class="comment">/* Nr of pages left */</span></span><br><span class="line"><span class="keyword">int</span> pobjects;<span class="comment">/* Approximate count */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="keyword">short</span> <span class="keyword">int</span> pages;</span><br><span class="line"><span class="keyword">short</span> <span class="keyword">int</span> pobjects;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kmem_cache</span> *<span class="title">slab_cache</span>;</span> <span class="comment">/* not slob */</span></span><br><span class="line"><span class="comment">/* Double-word boundary */</span></span><br><span class="line"><span class="keyword">void</span> *freelist;<span class="comment">/* first free object */</span></span><br><span class="line"><span class="keyword">union</span> &#123;</span><br><span class="line"><span class="keyword">void</span> *s_mem;<span class="comment">/* slab: first object */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> counters;<span class="comment">/* SLUB */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span><span class="comment">/* SLUB */</span></span><br><span class="line"><span class="keyword">unsigned</span> inuse:<span class="number">16</span>;</span><br><span class="line"><span class="keyword">unsigned</span> objects:<span class="number">15</span>;</span><br><span class="line"><span class="keyword">unsigned</span> frozen:<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span><span class="comment">/* Tail pages of compound page */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> compound_head;<span class="comment">/* Bit zero is set */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* First tail page only */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> compound_dtor;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> compound_order;</span><br><span class="line"><span class="keyword">atomic_t</span> compound_mapcount;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span><span class="comment">/* Second tail page of compound page */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> _compound_pad_1;<span class="comment">/* compound_head */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> _compound_pad_2;</span><br><span class="line"><span class="comment">/* For both global and memcg */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">deferred_list</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span><span class="comment">/* Page table pages */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> _pt_pad_1;<span class="comment">/* compound_head */</span></span><br><span class="line"><span class="keyword">pgtable_t</span> pmd_huge_pte; <span class="comment">/* protected by page-&gt;ptl */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> _pt_pad_2;<span class="comment">/* mapping */</span></span><br><span class="line"><span class="keyword">union</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mm_struct</span> *<span class="title">pt_mm</span>;</span> <span class="comment">/* x86 pgds only */</span></span><br><span class="line"><span class="keyword">atomic_t</span> pt_frag_refcount; <span class="comment">/* powerpc */</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ALLOC_SPLIT_PTLOCKS</span></span><br><span class="line"><span class="keyword">spinlock_t</span> *ptl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="keyword">spinlock_t</span> ptl;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span><span class="comment">/* ZONE_DEVICE pages */</span></span><br><span class="line"><span class="comment">/** @pgmap: Points to the hosting device page map. */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dev_pagemap</span> *<span class="title">pgmap</span>;</span></span><br><span class="line"><span class="keyword">void</span> *zone_device_data;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * ZONE_DEVICE private pages are counted as being</span></span><br><span class="line"><span class="comment"> * mapped so the next 3 words hold the mapping, index,</span></span><br><span class="line"><span class="comment"> * and private fields from the source anonymous or</span></span><br><span class="line"><span class="comment"> * page cache page while the page is migrated to device</span></span><br><span class="line"><span class="comment"> * private memory.</span></span><br><span class="line"><span class="comment"> * ZONE_DEVICE MEMORY_DEVICE_FS_DAX pages also</span></span><br><span class="line"><span class="comment"> * use the mapping, index, and private fields when</span></span><br><span class="line"><span class="comment"> * pmem backed DAX files are mapped.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** @rcu_head: You can use this to free a page by RCU. */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span> <span class="title">rcu_head</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> &#123;<span class="comment">/* This union is 4 bytes in size. */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If the page can be mapped to userspace, encodes the number</span></span><br><span class="line"><span class="comment"> * of times this page is referenced by a page table.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">atomic_t</span> _mapcount;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If the page is neither PageSlab nor mappable to userspace,</span></span><br><span class="line"><span class="comment"> * the value stored here may help determine what this page</span></span><br><span class="line"><span class="comment"> * is used for.  See page-flags.h for a list of page types</span></span><br><span class="line"><span class="comment"> * which are currently stored here.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> page_type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> active;<span class="comment">/* SLAB */</span></span><br><span class="line"><span class="keyword">int</span> units;<span class="comment">/* SLOB */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Usage count. *DO NOT USE DIRECTLY*. See page_ref.h */</span></span><br><span class="line"><span class="keyword">atomic_t</span> _refcount;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_MEMCG</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mem_cgroup</span> *<span class="title">mem_cgroup</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * On machines where all RAM is mapped into kernel address space,</span></span><br><span class="line"><span class="comment"> * we can simply calculate the virtual address. On machines with</span></span><br><span class="line"><span class="comment"> * highmem some memory is mapped into kernel virtual memory</span></span><br><span class="line"><span class="comment"> * dynamically, so we need a place to store that address.</span></span><br><span class="line"><span class="comment"> * Note that this field could be 16 bits on x86 ... ;)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Architectures with slow multiplication can define</span></span><br><span class="line"><span class="comment"> * WANT_PAGE_VIRTUAL in asm/page.h</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(WANT_PAGE_VIRTUAL)</span></span><br><span class="line"><span class="keyword">void</span> *<span class="keyword">virtual</span>;<span class="comment">/* Kernel virtual address (NULL if</span></span><br><span class="line"><span class="comment">   not kmapped, ie. highmem) */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* WANT_PAGE_VIRTUAL */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LAST_CPUPID_NOT_IN_PAGE_FLAGS</span></span><br><span class="line"><span class="keyword">int</span> _last_cpupid;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125; _struct_page_alignment;</span><br></pre></td></tr></table></figure><p>谦哥定眼一看,page结构真的复杂!由于一个物理页面有很多使用模式,所以这里有很多union.</p><p><strong>模式1: 从一整页开始用</strong></p><ul><li>一整页内存直接和虚拟地址空间建立映射的称为匿名页（Anonymous Page）</li><li>一整页内存先关联文件再和虚拟地址空间建立映射的称为内存映射文件（Memory-mapped File）</li></ul><p>此时Union中的变量为:</p><ul><li>struct address_space *mapping 就是用于内存映射，如果是匿名页，最低位为 1；如果是映射文件，最低位为 0；</li><li>pgoff_t index 是在映射区的偏移量；</li><li>atomic_t _mapcount，每个进程都有自己的页表，这里指有多少个页表项指向了这个页；</li><li>struct list_head lru 表示这一页应该在一个链表上，例如这个页面被换出，就在换出页的链表中；</li><li>compound 相关的变量用于复合页（Compound Page），就是将物理上连续的两个或多个页看成一个独立的大页。</li></ul><p><strong>模式2: 仅需分配小块内存</strong></p><p>如果某一页是用于分割成一小块一小块的内存进行分配的使用模式，则会使用 union 中的以下变量：</p><ul><li>s_mem 是已经分配了正在使用的 slab 的第一个对象；</li><li>freelist 是池子中的空闲对象；</li><li>rcu_head 是需要释放的列表。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">page</span> &#123;</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span> flags;</span><br><span class="line">  <span class="keyword">union</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">address_space</span> *<span class="title">mapping</span>;</span>  </span><br><span class="line">    <span class="keyword">void</span> *s_mem;      <span class="comment">/* slab first object */</span></span><br><span class="line">    <span class="keyword">atomic_t</span> compound_mapcount;  <span class="comment">/* first tail page */</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">union</span> &#123;</span><br><span class="line">    <span class="keyword">pgoff_t</span> index;    <span class="comment">/* Our offset within mapping. */</span></span><br><span class="line">    <span class="keyword">void</span> *freelist;    <span class="comment">/* sl[aou]b first free object */</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">union</span> &#123;</span><br><span class="line">    <span class="keyword">unsigned</span> counters;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">      <span class="keyword">union</span> &#123;</span><br><span class="line">        <span class="keyword">atomic_t</span> _mapcount;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> active;    <span class="comment">/* SLAB */</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span>      <span class="comment">/* SLUB */</span></span><br><span class="line">          <span class="keyword">unsigned</span> inuse:<span class="number">16</span>;</span><br><span class="line">          <span class="keyword">unsigned</span> objects:<span class="number">15</span>;</span><br><span class="line">          <span class="keyword">unsigned</span> frozen:<span class="number">1</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">int</span> units;      <span class="comment">/* SLOB */</span></span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">atomic_t</span> _refcount;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">union</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">lru</span>;</span>  <span class="comment">/* Pageout list   */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dev_pagemap</span> *<span class="title">pgmap</span>;</span> </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span>    <span class="comment">/* slub per cpu partial pages */</span></span><br><span class="line">      <span class="class"><span class="keyword">struct</span> <span class="title">page</span> *<span class="title">next</span>;</span>  <span class="comment">/* Next partial slab */</span></span><br><span class="line">      <span class="keyword">int</span> pages;  <span class="comment">/* Nr of partial slabs left */</span></span><br><span class="line">      <span class="keyword">int</span> pobjects;  <span class="comment">/* Approximate # of objects */</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span> <span class="title">rcu_head</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">      <span class="keyword">unsigned</span> <span class="keyword">long</span> compound_head; <span class="comment">/* If bit zero is set */</span></span><br><span class="line">      <span class="keyword">unsigned</span> <span class="keyword">int</span> compound_dtor;</span><br><span class="line">      <span class="keyword">unsigned</span> <span class="keyword">int</span> compound_order;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">union</span> &#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">private</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">kmem_cache</span> *<span class="title">slab_cache</span>;</span>  <span class="comment">/* SL[AU]B: Pointer to slab */</span></span><br><span class="line">  &#125;;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><ol><li><p>Linux kernel支持3种内存模型：</p><ul><li>Flat Memory Model</li><li>Discontiguous Memory Model</li><li>Sparse Memory Model</li></ul></li><li><p>Multiprocessors系统设计内存架构的两种模式</p><ul><li>UMA</li><li>NUMA</li></ul></li><li><p>Linux物理内存的三大结构</p><ul><li>Node: CPU和本地内存组成Node, 用 struct pglist_data 表示，放在一个数组里面。</li><li>Zone: 每个节点分为多个区域，每个区域用 struct zone 表示，也放在一个数组里面</li><li>Page: 每个区域分为多个页，每一页用 struct page 表示</li></ul></li></ol><p><a href="https://imgtu.com/i/vKDARU" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2022/08/07/vKDARU.png" alt="vKDARU.png"></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;日期&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;内核版本&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;架构&lt;/th&gt;
&lt;/tr&gt;
&lt;/t
      
    
    </summary>
    
      <category term="Linux内核" scheme="http://yoursite.com/categories/Linux%E5%86%85%E6%A0%B8/"/>
    
    
      <category term="Linux内核" scheme="http://yoursite.com/tags/Linux%E5%86%85%E6%A0%B8/"/>
    
      <category term="内存管理" scheme="http://yoursite.com/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
      <category term="物理内存管理" scheme="http://yoursite.com/tags/%E7%89%A9%E7%90%86%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>什么是overcommit_memory?</title>
    <link href="http://yoursite.com/2022/01/23/%E4%BB%80%E4%B9%88%E6%98%AFovercommit-memory/"/>
    <id>http://yoursite.com/2022/01/23/什么是overcommit-memory/</id>
    <published>2022-01-23T08:19:44.000Z</published>
    <updated>2022-01-23T14:58:18.457Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-前言"><a class="markdownIt-Anchor" href="#1-前言"></a> 1. 前言</h3><p>在日常的工作中可能我们会经常遇到程序fork失败的问题。遇到fork失败往往有两种可能性：</p><ol><li>进程数超标：可以通过<code>cat /proc/sys/kernel/threads-max</code>查看</li><li>内存不足</li></ol><p>进程数预设值往往很大，几乎不太能超标，所以fork失败的原因大部分都是由于内存不足造成的。</p><p>我们知道，由于MMU实现了虚拟地址到物理地址的转换，所以我们在申请虚拟地址时往往可以申请一大块内存，这实际上是对资源的有效利用，毕竟只有内存真正被投入使用时（如memset）才会实际分配物理内存，这种允许内存超额commit的机制就是overcommit_memory。</p><p>虚拟内存需要物理内存作为支撑，当分配了太多虚拟内存，导致物理内存不够时，就发生了Out Of Memory。这种允许超额commit的机制就是<strong>overcommit</strong>。</p><p>其调用链关系如下图所示。</p><p><img src="https://cdn.jsdelivr.net/gh/violet227/Images@master/Blog/fork.svg" alt="fork"></p><p>从图中我们可以看到，fork一步一步执行到了<code>__vm_enough_memory</code>，该接口是overcommit的核心。</p><h3 id="2-原理"><a class="markdownIt-Anchor" href="#2-原理"></a> 2. 原理</h3><p>Linux根据参数<code>vm.overcommit_memory</code>设置overcommit：</p><ul><li><strong>0</strong> ——默认值，启发式overcommit，它允许overcommit，但太明显的overcommit会被拒绝，比如malloc一次性申请的内存大小就超过了系统总内存。</li><li><strong>1</strong> ——Always overcommit. 允许<code>overcommit</code>，对内存申请来者不拒。</li><li><strong>2</strong> ——不允许<code>overcommit</code>，提交给系统的总地址空间大小不允许超过。</li></ul><p><code>include/uapi/linux/mman.h</code>中声明了该宏定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERCOMMIT_GUESS0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERCOMMIT_ALWAYS1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERCOMMIT_NEVER2</span></span><br></pre></td></tr></table></figure><p><strong>当<code>sysctl_overcommit_memory</code>等于<code>OVERCOMMIT_ALWAYS</code>时，内核的处理方式是直接返回。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (sysctl_overcommit_memory == OVERCOMMIT_ALWAYS)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><hr><p><strong>当<code>sysctl_overcommit_memory</code>等于<code>OVERCOMMIT_GUESS</code>时</strong>，主要代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (sysctl_overcommit_memory == OVERCOMMIT_GUESS) &#123;</span><br><span class="line"><span class="built_in">free</span> = global_page_state(NR_FREE_PAGES);</span><br><span class="line"><span class="built_in">free</span> += global_node_page_state(NR_FILE_PAGES);</span><br><span class="line"><span class="built_in">free</span> -= global_node_page_state(NR_SHMEM);</span><br><span class="line"><span class="built_in">free</span> += get_nr_swap_pages();</span><br><span class="line"><span class="built_in">free</span> += global_page_state(NR_SLAB_RECLAIMABLE);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">free</span> &lt;= totalreserve_pages)</span><br><span class="line"><span class="keyword">goto</span> error;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">free</span> -= totalreserve_pages;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> (!cap_sys_admin)</span><br><span class="line"><span class="built_in">free</span> -= sysctl_admin_reserve_kbytes &gt;&gt; (PAGE_SHIFT - <span class="number">10</span>); <span class="comment">/* 为root保留的页数 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">free</span> &gt; pages)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">goto</span> error;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>global_page_state</code>负责读取vm_zone_stat数组中的各项值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">atomic_long_t</span> vm_zone_stat[NR_VM_ZONE_STAT_ITEMS];</span><br></pre></td></tr></table></figure><ul><li><code>NR_FREE_PAGES</code>：富足的未分配资源；</li><li><code>NR_FILE_PAGES</code>：page cache总和；</li><li><code>NR_SHMEM</code>：进程间的share memory；</li><li><code>NR_SLAB_RECLAIMABLE</code>：slab可回收的页数；</li><li><code>totalreserve_pages</code>：每个zone保留的不能被用户空间分配的页数；</li><li><code>get_nr_swap_pages</code>：针对空闲的swap页数</li></ul><p>所以free的计算公式如下：</p><p><code>free = NR_FREE_PAGES + NR_FILE_PAGES - NR_SHMEM + swap_pages + NR_SLAB_RECLAIMABLE</code></p><p>如果此时free小于<code>totalreserve_pages</code>，则判定内存不足，否则 <code>free -= totalreserve_pages</code>.</p><p>如果是普通进程，则还需要保留<code>admin_reserve_kbytes</code>（/proc/sys/vm/admin_reserve_kbytes）的free page.</p><p>此时free若大于申请的pages，则不会发生overcommit。</p><hr><p><strong>当<code>sysctl_overcommit_memory</code>等于<code>OVERCOMMIT_NEVER</code>时</strong>，相关代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">allowed = vm_commit_limit();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!cap_sys_admin)</span><br><span class="line">allowed -= sysctl_admin_reserve_kbytes &gt;&gt; (PAGE_SHIFT - <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mm) &#123;</span><br><span class="line">reserve = sysctl_user_reserve_kbytes &gt;&gt; (PAGE_SHIFT - <span class="number">10</span>);</span><br><span class="line">allowed -= <span class="keyword">min_t</span>(<span class="keyword">long</span>, mm-&gt;total_vm / <span class="number">32</span>, reserve);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (percpu_counter_read_positive(&amp;vm_committed_as) &lt; allowed)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">error:</span><br><span class="line">vm_unacct_memory(pages);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> -ENOMEM;</span><br><span class="line"></span><br><span class="line"><span class="comment">/////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">vm_commit_limit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> allowed;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sysctl_overcommit_kbytes)</span><br><span class="line">allowed = sysctl_overcommit_kbytes &gt;&gt; (PAGE_SHIFT - <span class="number">10</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">allowed = ((totalram_pages - hugetlb_total_pages())</span><br><span class="line">   * sysctl_overcommit_ratio / <span class="number">100</span>);</span><br><span class="line">allowed += total_swap_pages;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> allowed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要看如下值：</p><ul><li><code>sysctl_overcommit_kbytes</code>：/proc/sys/vm/overcommit_kbytes的值</li><li><code>sysctl_overcommit_ratio</code>：/proc/sys/vm/overcommit_ratio的值</li><li><code>totalram_pages</code>:可分配的总页数</li><li><code>total_swap_pages</code>：可换出的页数</li><li><code>hugetlb_total_pages</code>：huge page相关</li><li><code>sysctl_user_reserve_kbytes</code>：/proc/sys/vm/user_reserve_kbytes的值，用户空间保留的内存大小</li><li><code>vm_committed_as</code>：保存了当前系统中已经申请的虚拟内存大小</li></ul><p>由代码可知，<code>vm_commit_limit</code>包括两种情况：</p><ol><li>如果<code>overcommit_kbytes</code>不为0， allow值为<code>overcommit_kbytes</code>的一半；</li><li>如果<code>overcommit_kbytes</code>为0，allow值为可管理的总内存与<code>vercommit_ratio</code>的乘积百分比</li></ol><h3 id="3-设置"><a class="markdownIt-Anchor" href="#3-设置"></a> 3. 设置</h3><p>那么如何设置overcommit的值呢？有三种方法：</p><ol><li>编辑**/etc/sysctl.conf** ，改<strong>vm.overcommit_memory=1</strong>，然后<strong>sysctl -p</strong>使配置文件生效</li><li>sysctl vm.overcommit_memory=1</li><li>echo 1 &gt; /proc/sys/vm/overcommit_memory</li></ol><h4 id="4-总结"><a class="markdownIt-Anchor" href="#4-总结"></a> 4. 总结</h4><p>本文通过分析内核代码粗略得分析了overcommit_memory的原理，也为后面的OOM-killer的原理做个铺垫。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-前言&quot;&gt;&lt;/a&gt; 1. 前言&lt;/h3&gt;
&lt;p&gt;在日常的工作中可能我们会经常遇到程序fork失败的问题。遇到fork失败往往有两种可能性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;进程数超标：
      
    
    </summary>
    
      <category term="Linux内核" scheme="http://yoursite.com/categories/Linux%E5%86%85%E6%A0%B8/"/>
    
    
      <category term="Linux内核" scheme="http://yoursite.com/tags/Linux%E5%86%85%E6%A0%B8/"/>
    
      <category term="overcommit_memory" scheme="http://yoursite.com/tags/overcommit-memory/"/>
    
  </entry>
  
  <entry>
    <title>Automatic Indium Packaging Device and Its Control System</title>
    <link href="http://yoursite.com/2019/06/08/Automatic-Indium-Packaging-Device-and-Its-Control-System/"/>
    <id>http://yoursite.com/2019/06/08/Automatic-Indium-Packaging-Device-and-Its-Control-System/</id>
    <published>2019-06-08T12:41:17.000Z</published>
    <updated>2019-06-10T08:48:30.172Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自动铟封设备及其控制系统"><a class="markdownIt-Anchor" href="#自动铟封设备及其控制系统"></a> 自动铟封设备及其控制系统</h1><p>铟封是一种重要的软金属封接方法，陀螺的玻璃腔体和金属电极采用铟封，实现谐振腔的真空。目前铟封多采用手<br>工操作，较难实现铟环、电极和腔体孔的对准，且封接一致性差，因此本项目研制<strong>自动铟封设备</strong>，实现铟环和电极与腔体孔的自动对准放置，并施加温度和封接力。利用温度控制器、加热棒、Pt 电阻设计了<strong>温度闭环控制系统</strong>，采用位移－力控制策略，通过控制热压头的位移，结合系统刚度，实现了压封力的稳定控制。</p><p>实验表明，设备的温度控制最大偏差小于±0．3 ℃ ，压封力控制偏差小于 9 N。</p><h2 id="一-设备总体结构"><a class="markdownIt-Anchor" href="#一-设备总体结构"></a> 一、设备总体结构</h2><p>本设备的用途用来封接下图所示装置。</p><p><a href="https://imgchr.com/i/VyHZdI" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/10/VyHZdI.png" alt="VyHZdI.png"></a></p><p><strong>设备组成：</strong></p><ol><li>热压装置</li><li>作业机械手</li><li>上料装置</li><li>控制系统</li></ol><p><img src="https://s2.ax1x.com/2019/06/10/VyzeTe.png" alt="VyzeTe.png"></p><h2 id="二-热压模块"><a class="markdownIt-Anchor" href="#二-热压模块"></a> 二、热压模块</h2><p>热压装置用于实现电极的自动封接，主要由直线推杆、伺服电机、移动横梁、导向轴、直线轴承、光栅尺和压力传感器等组成，其结构如图所示。导向轴既用于构成装置的框架结构，又起导向作用，移动部分用直线轴承与导向轴配合，保证压封过程中带动电极加热装置沿直线运动。</p><p><img src="https://s2.ax1x.com/2019/06/10/V6SdED.jpg" alt="V6SdED.jpg"></p><ul><li><p>伺服电机为HF-KN43J-S100型伺服电机；</p></li><li><p>压力传感器为BK-4B型压力传感器，该传感器为轮辐式测力传感器</p></li><li><p>光栅尺选用KA-300型光栅尺，其量程为320mm，精度为±5μm</p></li></ul><p><strong>腔体移动平台</strong></p><p><img src="https://s2.ax1x.com/2019/06/10/V6i16s.png" alt="V6i16s.png"></p><h3 id="三-作业机械手"><a class="markdownIt-Anchor" href="#三-作业机械手"></a> 三、作业机械手</h3><h3 id="31-作业机械手"><a class="markdownIt-Anchor" href="#31-作业机械手"></a> 3.1 作业机械手</h3><p>作业机械手主要由三自由度运动平台和作业机械臂两部分组成。其中三自由度运动平台用于实现X、Y、Z三个方向的准确定位；作业机械臂用于实现电极的自动拾取和放置。</p><p><img src="https://s2.ax1x.com/2019/06/10/V6p6JJ.jpg" alt="V6p6JJ.jpg"></p><h3 id="32-电极的拾取"><a class="markdownIt-Anchor" href="#32-电极的拾取"></a> 3.2 电极的拾取</h3><p>作业机械臂用于实现电极的自动拾取与放置，其结构如图10所示，主要由机械手安装角座、侧板、对准检测镜、微动开关、弹簧片以及电极吸附装置等组成。加强筋用来提高安装角座的刚度。对准检测镜用于腔体与电极加热装置加中热体中间孔的对准，根据检测镜所采集的图像，调节腔体移动平台X、Y方向的位移使电极正对加热体的中间孔，保证压封位置的准确性并避免造成电极损坏。弹簧片作为柔顺机构，避免产生冲击，起到保护零件的作用。微动开关则用来防止弹簧片产生塑性变形，同时也防止拾取电极时发生碰撞，损坏位移台。</p><p><img src="https://s2.ax1x.com/2019/06/10/V699YQ.png" alt="V699YQ.png"></p><h2 id="四-电极上料装置"><a class="markdownIt-Anchor" href="#四-电极上料装置"></a> 四、电极上料装置</h2><p>电极的上料由操作人员将待压封电极放置于带有圆形凹台的上料座上，上料装置结构如图(a)所示。上料装置中的上料座为三合一上料座，如图(b)所示，D27尺寸上料座用于阴极上料， D14和D16尺寸的上料座用于阳极上料。</p><p><a href="https://imgchr.com/i/V693Ox" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/10/V693Ox.png" alt="V693Ox.png"></a></p><h2 id="五-控制系统设计"><a class="markdownIt-Anchor" href="#五-控制系统设计"></a> 五、控制系统设计</h2><h3 id="51-温度控制"><a class="markdownIt-Anchor" href="#51-温度控制"></a> 5.1 温度控制</h3><p>加热头中采用的加热元件为八光电热器件公司生产的加热棒（又称筒式加热器），如图所示，型号为HLJ2042。这种加热棒具有高效率（基本能无损耗传递热量），寿命长（发热线使用高镍合金），牢固性好（能够承受使用时机械振动及冲击），电气性能良好（具有优良的绝缘性能，特别是高温时能保持稳定的绝缘性能） ，可操作性强，结构紧凑，节省空间。</p><p><img src="https://s2.ax1x.com/2019/06/10/V6CwUU.png" alt="V6CwUU.png"></p><p>加热头中采用的温度传感器为德薄膜铂电阻温度传感器，相较于绕线式陶瓷温度传感器性价比更高，其测量范围为-70～300℃，精度1/3B级。</p><p><img src="https://s2.ax1x.com/2019/06/10/V6C05F.png" alt="V6C05F.png"></p><p>温度控制主要由温控器完成，计算机通过RS232与温控器通讯，读取温度实测值，写入温度设定值，温控器输出4-20mA标准电流信号到触发器输入端，触发器控制可控硅的通断实现加热器的工作功率，从而实现温度自动控制。</p><p>电极自动压封设备控制软件设计有温控器通讯模块，其作用是与温控器通讯，对温控器进行简单设定，读取温度实测值，写入温度设定值。其工作流程如图所示。欧姆龙温控器可以采用多种通讯方式实现与计算机的通讯，本设备采用CompoWay/F通讯方式。</p><p><img src="https://s2.ax1x.com/2019/06/10/V6P8IO.jpg" alt="V6P8IO.jpg"></p><p>温度控制软件界面如图所示：</p><p><a href="https://imgchr.com/i/V6PcWQ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/10/V6PcWQ.md.png" alt="V6PcWQ.md.png"></a></p><h3 id="52-压力控制"><a class="markdownIt-Anchor" href="#52-压力控制"></a> 5.2 压力控制</h3><p>计算机通过软件向运动控制卡发送命令，运动控制卡输出脉冲信号到步进电机驱动器，驱动器将脉冲信号放大驱动步进电机转动，直线推杆将旋转运动转换成直线运动带动热压头上下运动，而热压头会通过腔体、底板将压力施加给压力传感器，压力传感器输出电信号，并通过信号的放大、滤波，由数据采集卡采集输入到计算机，计算机控制软件将压力实测值与压力设定值对比输出控制信号，实现对压力的准确控制。</p><p><img src="https://s2.ax1x.com/2019/06/10/V6iFld.jpg" alt="V6iFld.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;自动铟封设备及其控制系统&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#自动铟封设备及其控制系统&quot;&gt;&lt;/a&gt; 自动铟封设备及其控制系统&lt;/h1&gt;
&lt;p&gt;铟封是一种重要的软金属封接方法，陀螺的玻璃腔体和金属电极采用铟封，实现谐振腔的真空。
      
    
    </summary>
    
      <category term="Projects" scheme="http://yoursite.com/categories/Projects/"/>
    
    
  </entry>
  
  <entry>
    <title>陀螺组件机器视觉精密装配设备开发</title>
    <link href="http://yoursite.com/2019/06/08/%E8%96%84%E7%89%87%E7%BB%84%E4%BB%B6%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/06/08/薄片组件项目总结/</id>
    <published>2019-06-08T06:44:16.000Z</published>
    <updated>2022-01-23T08:20:29.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="陀螺组件机器视觉精密装配设备开发"><a class="markdownIt-Anchor" href="#陀螺组件机器视觉精密装配设备开发"></a> 陀螺组件机器视觉精密装配设备开发</h1><h2 id="1装配任务"><a class="markdownIt-Anchor" href="#1装配任务"></a> 1.装配任务</h2><p>本项目面向导航关键器件的自动装配，研制陀螺组件机器视觉精密装配设备。其装配流程如下图所示。待装配的组件有两组：薄片组件和金属支架。系统装配的两个零件为<strong>层叠式</strong>，先装配薄片组件，再装配金属支架，金属支架装配到薄片组件的上方，并保证其装配精度。</p><p><a href="https://imgchr.com/i/VBqeUK" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/08/VBqeUK.md.jpg" alt="VBqeUK.md.jpg"></a></p><h2 id="2硬件系统设计"><a class="markdownIt-Anchor" href="#2硬件系统设计"></a> 2.硬件系统设计</h2><p>通过对装配任务进行分析，将系统搭建的设备的硬件部分分为四个功能模块，分别为：</p><ul><li><p>装配作业模块</p></li><li><p>精密视觉测量模块</p></li><li><p>基座安装模块</p></li><li><p>上料模块</p></li></ul><p>系统需要实现以下功能：</p><ul><li>三自由度的运动控制</li><li>视觉的检测</li><li>压力控制</li><li>真空吸附</li><li>机械夹持</li></ul><p><a href="https://imgchr.com/i/VBLLT0" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/08/VBLLT0.md.jpg" alt="VBLLT0.md.jpg"></a></p><p><strong>硬件连接图为：</strong></p><p><a href="https://imgchr.com/i/VDp8qe" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/08/VDp8qe.md.png" alt="VDp8qe.md.png"></a></p><h3 id="21装配作业模块"><a class="markdownIt-Anchor" href="#21装配作业模块"></a> 2.1装配作业模块</h3><p>如图所示，为精密装配系统的装配作业模块。装配作业模块主要分为：</p><ul><li><p>三轴移动滑台</p></li><li><p>机械臂结构</p></li></ul><p>机械臂固定在三轴移动滑台上，通过X、Y、Z三轴移动平台的运动改变作业机械手的位置，完成零件的装配作业。</p><p><a href="https://imgchr.com/i/VBODA0" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/08/VBODA0.md.jpg" alt="VBODA0.md.jpg"></a></p><h4 id="211三轴移动滑台"><a class="markdownIt-Anchor" href="#211三轴移动滑台"></a> 2.1.1三轴移动滑台</h4><p>三轴移动滑台由三根同样性能的导轨X、Y与Z轴以及电机构成，如图3.3所示，从装配策略以及运动空间考虑，X轴选用了150mm的行程，Y轴与Z轴选用了75mm的行程，出于对装配在导轨A、B、C三点配备了限位开关，分别为正限位、原点与负限位，限位开关可以将导轨的移动位置转换为电信号，控制导轨的运动位置，还可以通过限位开关来限制导轨的行程，避免发生碰撞。</p><p><a href="https://imgchr.com/i/VBXADs" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/08/VBXADs.md.jpg" alt="VBXADs.md.jpg"></a></p><h4 id="212机械臂装置"><a class="markdownIt-Anchor" href="#212机械臂装置"></a> 2.1.2机械臂装置</h4><p>机械臂是实现待装配零件拾取、运输与放置功能的主要组件，也是保证装配精度的关键。如图所示，机械臂主要部件有柱塞、微动开关、吸附头、机械夹钳、力传感器、柔性结构及各部件的连接板。</p><p><a href="https://imgchr.com/i/VBX3r9" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/08/VBX3r9.md.jpg" alt="VBX3r9.md.jpg"></a></p><p><strong>薄片组件靠吸附头吸附；</strong></p><p><a href="https://imgchr.com/i/VBjRT1" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/08/VBjRT1.md.jpg" alt="VBjRT1.md.jpg"></a></p><p><strong>金属支架靠夹指夹持</strong></p><p><a href="https://imgchr.com/i/VBjpZR" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/08/VBjpZR.md.jpg" alt="VBjpZR.md.jpg"></a></p><h3 id="22视觉检测模块"><a class="markdownIt-Anchor" href="#22视觉检测模块"></a> 2.2视觉检测模块</h3><p>如图所示为精密装配系统的视觉检测模块，视觉检测模块主要有视觉检测装置和三轴移动滑台组成。视觉检测装置由工业相机、同轴光源、环形光源以及远心镜头组成。视觉检测模块通过相机连接板和加强筋固定在三轴移动滑台上，通过x、y、z三轴移动平台的运动改变视觉检测系统的位置，完成待装配零件的结构特征的识别。零件在装配前都需要通过视觉检测模块检测零件的位置坐标。金属支架在装配前需要进行零件的选配，视觉系统检测零件结构特征，判断零件是否合格。</p><p><a href="https://imgchr.com/i/VBvuX4" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/08/VBvuX4.md.jpg" alt="VBvuX4.md.jpg"></a></p><p>本系统的图像采集系统选型为：</p><ul><li>选用的工业相机为MER-630-60U3M-L型</li><li>MML1-HR65D型的远心镜头</li><li>LED同轴光和环形光</li></ul><h3 id="23基座模块"><a class="markdownIt-Anchor" href="#23基座模块"></a> 2.3基座模块</h3><p>基座的安装模块主要功能是保证基座在装配过程中的稳定性。为了实现系统的高精度装配，在保证基座装配过程不发生移动外，还要保持基座上表面的水平。</p><p><a href="https://imgchr.com/i/VBzsl8" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/08/VBzsl8.md.jpg" alt="VBzsl8.md.jpg"></a></p><h3 id="24上料模块"><a class="markdownIt-Anchor" href="#24上料模块"></a> 2.4上料模块</h3><p>待装配的零件在装配前需要涂胶后放在上料座中，系统设计的上料座如图3所示。薄片组件的中心和外圈需要涂胶，所以上料座该部分设置悬空，避免胶粘到上料座上。金属支架选配时是倒置在上料座上，所以在金属支架上料座的中心设计了一个圆孔，通过该圆孔与金属支架上的圆柱实现约束定位，再通过与开口槽对准，完成零件检测时位置的固定。金属支架在装配前的定位是通过金属支架上料座的凸台。</p><p><a href="https://imgchr.com/i/VBzq0J" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/08/VBzq0J.md.jpg" alt="VBzq0J.md.jpg"></a></p><h2 id="3软件设计"><a class="markdownIt-Anchor" href="#3软件设计"></a> 3.软件设计</h2><h4 id="31硬件调试软件"><a class="markdownIt-Anchor" href="#31硬件调试软件"></a> 3.1硬件调试软件</h4><p>利用MFC 调试软件,集成视觉检测、图像处理、数据采集、串口通信等模块。</p><p><img src="https://s2.ax1x.com/2019/06/08/VDpkKU.png" alt="VDpkKU.png"></p><h4 id="32生产线装配作业软件"><a class="markdownIt-Anchor" href="#32生产线装配作业软件"></a> 3.2生产线装配作业软件</h4><p>本软件采用模块化设计方法，单独编写、调试各个功能模块，最后再集成为一个完整的系统。用于将各个功能模块集成为一个完整系统的功能模块即为系统主控模块，其功能是人机交互，协调功能模块的运行，软件系统结构如图1所示。用户在软件界面上操作时，主控模块控制相应功能模块起停，并将执行情况在软件界面上显示，同时反馈给用户，关键装配参数和产品型号等自动记录，以备查询。</p><p><img src="https://s2.ax1x.com/2019/06/08/VD9Uw4.png" alt="VD9Uw4.png"></p><p><strong>技术特点：</strong></p><p><strong>(1)稳定高效的智能识别算法</strong></p><p>本软件通过对复杂的陀螺组件进行“八图拼接”并针对零件表面的各种可能出现的情况依次进行讨论，最终实现九成以上零件是否达标的筛选，效果明显，识别准确稳定，同时为同类别零件的筛选提供借鉴价值。</p><p><strong>(2)多线程设计</strong></p><p>本软件的装配过程单独开辟线程，与主界面操作线程分离，保证程序的快速响应，执行效率高，解决软件运算过程中由于抢占资源而卡死的情况。</p><p><strong>(3)模块化编程思想</strong></p><p>本软件采用的是模块化编程思想，让各个部分互不影响分别编写，方便多人合作，开发效率高，周期短。，软件中应用了STL标准数据类型、高质量的开源图像处理库OpenCV和数据驱动模式等降低软件的出错率，提高系统的鲁棒性和可复用性。</p><p><strong>(4)界面设计可操作性强</strong></p><p>界面设计简洁，关键键位绑定响应按钮，操作方便，生产高效。为防止用户误操作，在各种情况下，对不需要控制的按钮都设置了按钮禁用。人工只需操作控制按钮部分即可完成软件的操作，人机交互友好。</p><p><img src="https://s2.ax1x.com/2019/06/08/VD9htA.png" alt="VD9htA.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;陀螺组件机器视觉精密装配设备开发&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#陀螺组件机器视觉精密装配设备开发&quot;&gt;&lt;/a&gt; 陀螺组件机器视觉精密装配设备开发&lt;/h1&gt;
&lt;h2 id=&quot;1装配任务&quot;&gt;&lt;a class=&quot;markdown
      
    
    </summary>
    
      <category term="Projects" scheme="http://yoursite.com/categories/Projects/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL笔记</title>
    <link href="http://yoursite.com/2019/05/28/MySQL%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/05/28/MySQL笔记/</id>
    <published>2019-05-28T12:29:06.000Z</published>
    <updated>2019-05-31T05:27:00.142Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql笔记"><a class="markdownIt-Anchor" href="#mysql笔记"></a> MySQL笔记</h1><h2 id="目标"><a class="markdownIt-Anchor" href="#目标"></a> 目标</h2><p>一、为什么要学习数据库<br>二、数据库的相关概念<br>DBMS、DB、SQL<br>三、数据库存储数据的特点<br>四、初始MySQL<br>MySQL产品的介绍<br>MySQL产品的安装               ★<br>MySQL服务的启动和停止     ★<br>MySQL服务的登录和退出     ★<br>MySQL的常见命令和语法规范<br>五、DQL语言的学习   ★<br>基础查询             ★<br>条件查询     ★<br>排序查询     ★<br>常见函数             ★<br>分组函数             ★<br>分组查询             ★<br>连接查询     ★<br>子查询       √<br>分页查询       ★<br>union联合查询√<br>六、DML语言的学习    ★<br>插入语句<br>修改语句<br>删除语句<br>七、DDL语言的学习<br>库和表的管理 √<br>常见数据类型介绍  √<br>常见约束    √<br>八、TCL语言的学习<br>事务和事务处理<br>九、视图的讲解           √<br>十、变量<br>十一、存储过程和函数<br>十二、流程控制结构</p><h2 id="数据库的好处"><a class="markdownIt-Anchor" href="#数据库的好处"></a> 数据库的好处</h2><p>​1.持久化数据到本地<br>​2.可以实现结构化查询，方便管理<br>​</p><h2 id="数据库相关概念"><a class="markdownIt-Anchor" href="#数据库相关概念"></a> 数据库相关概念</h2><p>​1、DB：数据库，保存一组有组织的数据的容器<br>​2、DBMS：数据库管理系统，又称为数据库软件（产品），用于管理DB中的数据<br>​3、SQL: 结构化查询语言，用于和DBMS通信的语言</p><h2 id="数据库存储数据的特点"><a class="markdownIt-Anchor" href="#数据库存储数据的特点"></a> 数据库存储数据的特点</h2><p>​1、将数据放到表中，表再放到库中<br>​2、一个数据库中可以有多个表，每个表都有一个的名字，用来标识自己。表名具有唯一性。<br>​3、表具有一些特性，这些特性定义了数据在表中如何存储，类似java中 “类”的设计。<br>​4、表由列组成，我们也称为字段。所有表都是由一个或多个列组成的，每一列类似java 中的”属性”<br>​5、表中的数据是按行存储的，每一行类似于java中的“对象”。</p><h2 id="mysql产品的介绍和安装"><a class="markdownIt-Anchor" href="#mysql产品的介绍和安装"></a> MySQL产品的介绍和安装</h2><h3 id="mysql服务的启动和停止"><a class="markdownIt-Anchor" href="#mysql服务的启动和停止"></a> MySQL服务的启动和停止</h3><p>​方式一：计算机——右击管理——服务<br>​方式二：通过管理员身份运行<br>​net start 服务名（启动服务）<br>​net stop 服务名（停止服务）</p><h3 id="mysql服务的登录和退出"><a class="markdownIt-Anchor" href="#mysql服务的登录和退出"></a> MySQL服务的登录和退出</h3><p><strong>属于c/s架构的软件，一般来讲安装服务端</strong></p><p>​方式一：通过mysql自带的客户端<br>​只限于root用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式二：通过windows自带的客户端</span></span><br><span class="line"><span class="comment"># 登录：</span></span><br><span class="line">mysql [-h主机名 -P端口号 ]-u用户名 -p密码</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出：</span></span><br><span class="line">exit或ctrl+C</span><br></pre></td></tr></table></figure><p>​</p><h3 id="mysql的常见命令"><a class="markdownIt-Anchor" href="#mysql的常见命令"></a> MySQL的常见命令</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.查看当前所有的数据库</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br><span class="line"><span class="comment"># 2.打开指定的库</span></span><br><span class="line"><span class="keyword">use</span> 库名</span><br><span class="line"><span class="comment"># 3.查看当前库的所有表</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br><span class="line"><span class="comment"># 4.查看其它库的所有表</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span> <span class="keyword">from</span> 库名;</span><br><span class="line"><span class="comment"># 5.创建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">列名 列类型,</span><br><span class="line">列名 列类型，</span><br><span class="line">。。。</span><br><span class="line">);</span><br><span class="line"><span class="comment"># 6.查看表结构</span></span><br><span class="line">desc 表名;</span><br><span class="line"><span class="comment"># 7.查看服务器的版本</span></span><br><span class="line"><span class="comment"># 方式一：登录到mysql服务端</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">version</span>();</span><br><span class="line"><span class="comment"># 方式二：没有登录到mysql服务端</span></span><br><span class="line">mysql <span class="comment">--version</span></span><br><span class="line">mysql <span class="comment">--V</span></span><br></pre></td></tr></table></figure><h3 id="mysql的语法规范"><a class="markdownIt-Anchor" href="#mysql的语法规范"></a> MySQL的语法规范</h3><p>​1.不区分大小写,但建议关键字大写，表名、列名小写<br>​2.每条命令最好用分号结尾<br>​3.每条命令根据需要，可以进行缩进 或换行<br>​4.注释<br>​单行注释：#注释文字<br>​单行注释：-- 注释文字<br>​多行注释：/* 注释文字  */</p><h3 id="sql的语言分类"><a class="markdownIt-Anchor" href="#sql的语言分类"></a> SQL的语言分类</h3><ul><li><code>DQL（Data Query Language）</code>：数据查询语言<br>select</li><li><code>DML(Data Manipulate Language)</code>:数据操作语言<br>insert 、update、delete   增删改</li><li><code>DDL（Data Define Languge）</code>：数据定义语言<br>create、drop、alter</li><li><code>TCL（Transaction Control Language）</code>：事务控制语言<br>commit、rollback</li></ul><h2 id="dql语言"><a class="markdownIt-Anchor" href="#dql语言"></a> DQL语言</h2><h3 id="进阶1基础查询"><a class="markdownIt-Anchor" href="#进阶1基础查询"></a> 进阶1：基础查询</h3><p>​语法：<br>​SELECT 要查询的东西<br>​【FROM 表名】;</p><p>特点：<br>① 通过select查询完的结果 ，是一个虚拟的表格<br>② 要查询的东西 可以是常量值、表达式、字段、函数</p><p>常用：</p><ul><li><p><code>distinct</code>——去重</p></li><li><p><code>as</code>——起别名</p></li><li><p><code>ifnull()</code>——判断某字段或表达式是否为null，如果为null 返回指定的值，否则返回原本的值</p></li><li><p><code>isnull()</code>——判断某字段或表达式是否为null，如果是，则返回1，否则返回0</p></li><li><p>加法操作</p><ul><li>select 数值+数值：直接运算</li><li>select 字符+数值：先试图将字符转换成数值，如果转换成功，则继续运算；否则转换成0，再做运算</li><li>select null+值：结果都为null</li></ul></li></ul><h3 id="进阶2条件查询"><a class="markdownIt-Anchor" href="#进阶2条件查询"></a> 进阶2：条件查询</h3><p>​条件查询：根据条件过滤原始表的数据，查询到想要的数据</p><p>​语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">要查询的字段|表达式|常量值|函数</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">表</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">条件 ;</span><br></pre></td></tr></table></figure><p>分类：<br>一、条件表达式</p><pre><code>&gt; &lt; &gt;= &lt;= = != &lt;&gt;</code></pre><p>二、逻辑表达式</p><p>逻辑运算符：</p><ul><li><p><code>and（&amp;&amp;）</code></p></li><li><p><code>or(||)</code></p></li><li><p><code>not(!)</code></p></li></ul><p>三、模糊查询</p><ul><li>like:一般搭配通配符使用，可以判断字符型或数值型</li><li>通配符：%任意多个字符，_任意单个字符,例如：<code>last_name like 'a%'</code></li><li><code>between</code>、 <code>and</code> 、<code>in</code>、 <code>is null</code>、 <code>is not null</code></li></ul><h3 id="进阶3排序查询"><a class="markdownIt-Anchor" href="#进阶3排序查询"></a> 进阶3：排序查询</h3><p><code>order by的位置一般放在查询语句的最后（除limit语句之外）</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">要查询的东西</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">表</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">条件</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> 排序的字段|表达式|函数|别名 【<span class="keyword">asc</span>|<span class="keyword">desc</span>】</span><br></pre></td></tr></table></figure><p>​</p><h3 id="进阶4常见函数"><a class="markdownIt-Anchor" href="#进阶4常见函数"></a> 进阶4：常见函数</h3><p>一、单行函数</p><p><strong>1、字符函数</strong></p><ul><li>concat——拼接</li><li>substr——截取子串</li><li>upper——转换成大写</li><li>lower——转换成小写</li><li>trim——去前后指定的空格和字符</li><li>ltrim——去左边空格</li><li>rtrim——去右边空格</li><li>replace——替换</li><li>lpad——左填充</li><li>rpad——右填充</li><li>instr——返回子串第一次出现的索引</li><li>length—— 获取字节个数<br>​</li></ul><p><strong>2、数学函数</strong></p><ul><li><p>round ——四舍五入</p></li><li><p>rand ——随机数</p></li><li><p>floor——向下取整</p></li><li><p>ceil——向上取整</p></li><li><p>mod——取余</p></li><li><p>truncate——截断</p></li></ul><p>3、日期函数</p><ul><li>now——当前系统日期+时间</li><li>curdate——当前系统日期</li><li>curtime——当前系统时间</li><li>str_to_date——将字符转换成日期</li><li>date_format——将日期转换成字符</li></ul><p>4、流程控制函数</p><ul><li><p>if(条件表达式，表达式1，表达式2)：如果条件表达式成立，返回表达式1，否则返回表达式2</p></li><li><p>case语句 处理多分支</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 情况1</span></span><br><span class="line">case 变量或表达式或字段</span><br><span class="line">when 常量1 then 值1</span><br><span class="line">when 常量2 then 值2</span><br><span class="line">...</span><br><span class="line">else 值n</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 情况2</span></span><br><span class="line"><span class="keyword">case</span> </span><br><span class="line"><span class="keyword">when</span> 条件<span class="number">1</span> <span class="keyword">then</span> 值<span class="number">1</span></span><br><span class="line"><span class="keyword">when</span> 条件<span class="number">2</span> <span class="keyword">then</span> 值<span class="number">2</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span> 值n</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li></ul><p>5、其他函数<br>version版本<br>database当前库<br>user当前连接用户</p><h4 id="二-分组函数"><a class="markdownIt-Anchor" href="#二-分组函数"></a> 二、分组函数</h4><pre><code>sum 求和max 最大值min 最小值avg 平均值count 计数特点：1、以上五个分组函数都忽略null值，除了count(*)2、sum和avg一般用于处理数值型，max、min、count可以处理任何数据类型3、都可以搭配distinct使用，用于统计去重后的结果4、count的参数可以支持：字段、*、常量值，一般放1   建议使用 count(*)</code></pre><h3 id="进阶5分组查询"><a class="markdownIt-Anchor" href="#进阶5分组查询"></a> 进阶5：分组查询</h3><p>​语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 查询的字段，分组函数</span><br><span class="line"><span class="keyword">from</span> 表</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> 分组的字段</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">特点：</span><br><span class="line">1、可以按单个字段分组</span><br><span class="line">2、和分组函数一同查询的字段最好是分组后的字段</span><br><span class="line">3、分组筛选</span><br><span class="line">    针对的表     位置    关键字</span><br><span class="line">分组前筛选：原始表     <span class="built_in"> group </span>by的前面where</span><br><span class="line">分组后筛选：分组后的结果集  <span class="built_in"> group </span>by的后面 having</span><br><span class="line"></span><br><span class="line">4、可以按多个字段分组，字段之间用逗号隔开</span><br><span class="line">5、可以支持排序</span><br><span class="line">6、having后可以支持别名</span><br></pre></td></tr></table></figure><h3 id="进阶6多表连接查询"><a class="markdownIt-Anchor" href="#进阶6多表连接查询"></a> 进阶6：多表连接查询</h3><p>笛卡尔乘积：如果连接条件省略或无效则会出现<br>解决办法：添加有效的<strong>连接条件</strong></p><p>一、传统模式下的连接 ：等值连接——非等值连接</p><ol><li>等值连接的结果 = 多个表的交集</li><li>n表连接，至少需要n-1个连接条件</li><li>多个表不分主次，没有顺序要求</li><li>一般为表起别名，提高阅读性和性能</li></ol><p>二、sql99语法：通过join关键字实现连接</p><p>支持：</p><p>等值连接、非等值连接 （内连接）<br>外连接<br>交叉连接</p><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段，...</span><br><span class="line"><span class="keyword">from</span> 表<span class="number">1</span></span><br><span class="line">【<span class="keyword">inner</span>|<span class="keyword">left</span> <span class="keyword">outer</span>|<span class="keyword">right</span> <span class="keyword">outer</span>|<span class="keyword">cross</span>】<span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span>  连接条件</span><br><span class="line">【<span class="keyword">inner</span>|<span class="keyword">left</span> <span class="keyword">outer</span>|<span class="keyword">right</span> <span class="keyword">outer</span>|<span class="keyword">cross</span>】<span class="keyword">join</span> 表<span class="number">3</span> <span class="keyword">on</span>  连接条件</span><br><span class="line">【<span class="keyword">where</span> 筛选条件】</span><br><span class="line">【<span class="keyword">group</span> <span class="keyword">by</span> 分组字段】</span><br><span class="line">【<span class="keyword">having</span> 分组后的筛选条件】</span><br><span class="line">【<span class="keyword">order</span> <span class="keyword">by</span> 排序的字段或表达式】</span><br></pre></td></tr></table></figure><p>好处：连接条件和筛选条件实现了分离，简洁明了！<br>三、自连接</p><p>案例：查询员工名和直接上级的名称</p><p>sql99</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.last_name,m.last_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">JOIN</span> employees m </span><br><span class="line"><span class="keyword">ON</span> e.<span class="string">`manager_id`</span>=m.<span class="string">`employee_id`</span>;</span><br></pre></td></tr></table></figure><h3 id="进阶7子查询"><a class="markdownIt-Anchor" href="#进阶7子查询"></a> 进阶7：子查询</h3><h3 id="含义"><a class="markdownIt-Anchor" href="#含义"></a> 含义：</h3><p>一条查询语句中又嵌套了另一条完整的select语句，其中被嵌套的select语句，称为子查询或内查询<br>在外面的查询语句，称为主查询或外查询</p><p>特点：</p><ol><li><p>子查询都放在小括号内</p></li><li><p><strong>重点掌握where或having后面</strong>：<code>标量子查询</code>和<code>列子查询</code>。</p></li><li><p><strong>子查询优先于主查询执行，主查询使用了子查询的执行结果</strong></p></li><li><p>子查询根据查询结果的行数不同分为以下两类：<br>① 单行子查询<br>结果集只有一行<br>一般搭配单行操作符使用：&gt; &lt; = &lt;&gt; &gt;= &lt;=<br>非法使用子查询的情况：<br>a、子查询的结果为一组值<br>b、子查询的结果为空</p><p>② 多行子查询<br>结果集有多行<br>一般搭配多行操作符使用：any、all、in、not in<br>in： 属于子查询结果中的任意一个就行<br>any和all往往可以用其他查询代替</p></li></ol><p>例子</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 标量子查询</span></span><br><span class="line"><span class="keyword">select</span> last_name,salary</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> salary=(</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">min</span>(salary) <span class="keyword">from</span> employees</span><br><span class="line">);</span><br><span class="line"><span class="comment"># 列子查询</span></span><br><span class="line"><span class="keyword">select</span> last_name</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> employee_id <span class="keyword">in</span>(</span><br><span class="line"><span class="keyword">select</span> manager_id</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="进阶8分页查询"><a class="markdownIt-Anchor" href="#进阶8分页查询"></a> 进阶8：分页查询</h3><p>应用场景：</p><p>实际的web项目中需要根据用户的需求提交对应的分页查询的sql语句</p><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段|表达式,...</span><br><span class="line"><span class="keyword">from</span> 表</span><br><span class="line">【<span class="keyword">where</span> 条件】</span><br><span class="line">【<span class="keyword">group</span> <span class="keyword">by</span> 分组字段】</span><br><span class="line">【<span class="keyword">having</span> 条件】</span><br><span class="line">【<span class="keyword">order</span> <span class="keyword">by</span> 排序的字段】</span><br><span class="line"><span class="keyword">limit</span> 【起始的条目索引，】条目数;</span><br></pre></td></tr></table></figure><p>特点：</p><p>1.起始条目索引从0开始</p><p>2.<strong>limit子句放在查询语句的最后</strong></p><p>3.重要公式：</p><p>假如:每页显示条目数size，要显示的页数 page</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * </span><br><span class="line"><span class="keyword">from</span>  表 </span><br><span class="line"><span class="keyword">limit</span> （page<span class="number">-1</span>）*<span class="keyword">size</span>,<span class="keyword">size</span>;</span><br></pre></td></tr></table></figure><h3 id="进阶9联合查询"><a class="markdownIt-Anchor" href="#进阶9联合查询"></a> 进阶9：联合查询</h3><p>union：合并、联合，将多次查询结果合并成一个结果</p><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段|常量|表达式|函数 【<span class="keyword">from</span> 表】 【<span class="keyword">where</span> 条件】 </span><br><span class="line"><span class="keyword">union</span> 【all】</span><br><span class="line"><span class="keyword">select</span> 字段|常量|表达式|函数 【<span class="keyword">from</span> 表】 【<span class="keyword">where</span> 条件】 </span><br><span class="line"><span class="keyword">union</span> 【all】</span><br><span class="line"><span class="keyword">select</span> 字段|常量|表达式|函数 【<span class="keyword">from</span> 表】 【<span class="keyword">where</span> 条件】 </span><br><span class="line">.....</span><br></pre></td></tr></table></figure><p>特点：</p><ol><li>多条查询语句的查询的列数必须是一致的</li><li>多条查询语句的查询的列的类型几乎相同</li><li>union代表去重，union all代表不去重</li></ol><p><strong>总结各条查询语句的执行顺序</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 查询列表    <span class="comment"># 7</span></span><br><span class="line"><span class="keyword">from</span> 表<span class="number">1</span> 别名      <span class="comment"># 1</span></span><br><span class="line">连接类型 <span class="keyword">join</span> 表<span class="number">2</span>   <span class="comment"># 2</span></span><br><span class="line"><span class="keyword">on</span> 连接条件        <span class="comment"># 3</span></span><br><span class="line"><span class="keyword">where</span> 筛选         <span class="comment"># 4</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> 分组列表  <span class="comment"># 5</span></span><br><span class="line"><span class="keyword">having</span> 筛选        <span class="comment"># 6</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span>排序列表    <span class="comment"># 8</span></span><br><span class="line"><span class="keyword">limit</span> 起始条目索引，条目数;  <span class="comment"># 9</span></span><br></pre></td></tr></table></figure><h2 id="dml语言"><a class="markdownIt-Anchor" href="#dml语言"></a> DML语言</h2><h4 id="插入"><a class="markdownIt-Anchor" href="#插入"></a> 插入</h4><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(字段名，...)</span><br><span class="line"><span class="keyword">values</span>(值<span class="number">1</span>，...);</span><br></pre></td></tr></table></figure><p>特点：</p><ol><li>字段类型和值类型一致或兼容，而且一一对应</li><li>可以为空的字段，可以不用插入值，或用null填充</li><li>不可以为空的字段，必须插入值</li><li>字段个数和值的个数必须一致</li><li>字段可以省略，但默认所有字段，并且顺序和表中的存储顺序一致</li><li><strong>支持查询语句</strong></li></ol><h4 id="修改"><a class="markdownIt-Anchor" href="#修改"></a> 修改</h4><p>修改单表语法：★</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 字段=新值,字段=新值</span><br><span class="line">【<span class="keyword">where</span> 条件】</span><br></pre></td></tr></table></figure><p>修改多表语法：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">update 表<span class="number">1</span> 别名<span class="number">1</span>,表<span class="number">2</span> 别名<span class="number">2</span></span><br><span class="line"><span class="keyword">set</span> 字段=新值，字段=新值</span><br><span class="line">where 连接条件</span><br><span class="line"><span class="keyword">and</span> 筛选条件</span><br></pre></td></tr></table></figure><h4 id="删除"><a class="markdownIt-Anchor" href="#删除"></a> 删除</h4><p>方式1：delete语句</p><p><strong>单表删除： ★</strong><br>delete from 表名 【where 筛选条件】</p><p>级联删除：<br>delete 别名1，别名2<br>from 表1 别名1，表2 别名2<br>where 连接条件<br>and 筛选条件;</p><p>方式2：truncate语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> 表名</span><br></pre></td></tr></table></figure><p><strong>两种方式的区别【面试题】</strong></p><p>1.truncate不能加where条件，而delete可以加where条件</p><p>2.truncate的效率高一丢丢</p><p>3.truncate 删除带自增长的列的表后，如果再插入数据，数据从1开始<br>delete 删除带自增长列的表后，如果再插入数据，数据从上一次的断点处开始</p><p>4.truncate删除不能回滚，delete删除可以回滚</p><h2 id="ddl语句"><a class="markdownIt-Anchor" href="#ddl语句"></a> DDL语句</h2><h3 id="库和表的管理"><a class="markdownIt-Anchor" href="#库和表的管理"></a> 库和表的管理</h3><p>库的管理：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一、创建库</span></span><br><span class="line"><span class="keyword">create</span> [<span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span>] <span class="keyword">database</span> 库名</span><br><span class="line"><span class="comment"># 二、删除库</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> 库名</span><br><span class="line"><span class="comment"># 三、修改库</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span>  [<span class="keyword">if</span> <span class="keyword">exists</span>] 库名 [<span class="built_in">character</span> <span class="keyword">set</span> 字符集名];</span><br></pre></td></tr></table></figure><p>表的管理：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.创建表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> stuinfo(</span><br><span class="line">stuId <span class="built_in">INT</span> [约束],</span><br><span class="line">stuName <span class="built_in">VARCHAR</span>(<span class="number">20</span>) [约束],</span><br><span class="line">gender <span class="built_in">CHAR</span> [约束],</span><br><span class="line">bornDate DATETIE [约束]</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">DESC studentinfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.修改表 alter</span></span><br><span class="line"><span class="comment"># 格式</span></span><br><span class="line">1.添加列</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">column</span> 列名 类型 【<span class="keyword">first</span>|<span class="keyword">after</span> 字段名】;</span><br><span class="line">2.修改列的类型或约束</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">modify</span> <span class="keyword">column</span> 列名 新类型 【新约束】;</span><br><span class="line">3.修改列名</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">change</span> <span class="keyword">column</span> 旧列名 新列名 类型;</span><br><span class="line">4 .删除列</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> <span class="keyword">column</span> 列名;</span><br><span class="line">5.修改表名</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">rename</span> 【<span class="keyword">to</span>】 新表名;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例子：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#①修改字段名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> studentinfo <span class="keyword">CHANGE</span>  <span class="keyword">COLUMN</span> sex gender <span class="built_in">CHAR</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#②修改表名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo <span class="keyword">RENAME</span> [<span class="keyword">TO</span>]  studentinfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">#③修改字段类型和列级约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> studentinfo <span class="keyword">MODIFY</span> <span class="keyword">COLUMN</span> borndate <span class="built_in">DATE</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#④添加字段</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> studentinfo <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> email <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">first</span>;</span><br><span class="line"><span class="comment">#⑤删除字段</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> studentinfo <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> email;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.删除表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">EXISTS</span>] studentinfo;</span><br></pre></td></tr></table></figure><p>表的复制</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> author <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">'村上春树'</span>,<span class="string">'日本'</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">'莫言'</span>,<span class="string">'中国'</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">'冯唐'</span>,<span class="string">'中国'</span>),</span><br><span class="line">(<span class="number">4</span>,<span class="string">'金庸'</span>,<span class="string">'中国'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#1.仅仅复制表的结构</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> copy <span class="keyword">LIKE</span> author;</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.复制表的结构+数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> copy2 </span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> author;</span><br><span class="line"></span><br><span class="line"><span class="comment">#只复制部分数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> copy3</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,au_name</span><br><span class="line"><span class="keyword">FROM</span> author </span><br><span class="line"><span class="keyword">WHERE</span> nation=<span class="string">'中国'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#仅仅复制某些字段</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> copy4 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,au_name</span><br><span class="line"><span class="keyword">FROM</span> author</span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="常见类型"><a class="markdownIt-Anchor" href="#常见类型"></a> 常见类型</h3><p>对于一个关系表，除了定义每一列的名称外，还需要定义每一列的数据类型。关系数据库支持的标准数据类型包括数值、字符串、时间等：</p><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">INT</td><td style="text-align:center">整型</td><td>默认是有符号型，无符号添加unsigned关键字或者zerofill</td></tr><tr><td style="text-align:center">BIGINT</td><td style="text-align:center">长整型</td><td>8字节整数类型，范围约+/-922亿亿</td></tr><tr><td style="text-align:center">REAL</td><td style="text-align:center">浮点型</td><td>4字节浮点数，范围约+/-1038</td></tr><tr><td style="text-align:center">DOUBLE</td><td style="text-align:center">浮点型</td><td>8字节浮点数，范围约+/-10308</td></tr><tr><td style="text-align:center">DECIMAL(M,N)</td><td style="text-align:center">高精度小数</td><td>由用户指定精度的小数，例如，DECIMAL(20,10)表示一共20位，其中小数10位，通常用于财务计算</td></tr><tr><td style="text-align:center">CHAR(N)</td><td style="text-align:center">定长字符串</td><td>存储指定长度的字符串，例如，CHAR(100)总是存储100个字符的字符串</td></tr><tr><td style="text-align:center">VARCHAR(N)</td><td style="text-align:center">变长字符串</td><td>存储可变长度的字符串，例如，VARCHAR(100)可以存储0~100个字符的字符串</td></tr><tr><td style="text-align:center">BOOLEAN</td><td style="text-align:center">布尔类型</td><td>存储True或者False</td></tr><tr><td style="text-align:center">DATE</td><td style="text-align:center">日期类型</td><td>存储日期，例如，2018-06-22</td></tr><tr><td style="text-align:center">TIME</td><td style="text-align:center">时间类型</td><td>存储时间，例如，12:20:59</td></tr><tr><td style="text-align:center">DATETIME</td><td style="text-align:center">日期和时间类型</td><td>存储日期+时间，例如，2018-06-22 12:20:59</td></tr></tbody></table><p><strong>一、数值型</strong><br><strong>1、整型</strong><br>tinyint（1）、smallint（2）、mediumint（3）、int/integer（4）、bigint（5）</p><p>特点：<br>①都可以设置无符号和有符号，默认有符号，通过unsigned设置无符号<br>②如果超出了范围，会报out or range异常，插入临界值<br>③长度可以不指定，默认会有一个长度<br>长度代表显示的最大宽度，如果不够则左边用0填充，但需要搭配zerofill，并且默认变为无符号整型</p><p><strong>2、浮点型</strong><br>定点数：decimal(M,D)<br>浮点数:<br>float(M,D)   4<br>double(M,D)  8</p><p>特点：<br>①M代表整数部位+小数部位的个数，D代表小数部位<br>②如果超出范围，则报out or range异常，并且插入临界值<br>③M和D都可以省略，但对于定点数，M默认为10，D默认为0<br>④如果精度要求较高，则优先考虑使用定点数</p><p><strong>二、字符型</strong><br>char、varchar、binary、varbinary、enum、set、text、blob</p><p>char：固定长度的字符，写法为char(M)，最大长度不能超过M，其中M可以省略，默认为1<br>varchar：可变长度的字符，写法为varchar(M)，最大长度不能超过M，其中M不可以省略</p><p><strong>三、日期型</strong><br>year年<br>date日期<br>time时间<br>datetime 日期+时间          8<br>timestamp 日期+时间      4   比较容易受时区、语法模式、版本的影响，更能反映当前时区的真实时间</p><h3 id="常见约束"><a class="markdownIt-Anchor" href="#常见约束"></a> 常见约束</h3><ul><li>NOT NULL</li><li>DEFAULT</li><li>UNIQUE</li><li>CHECK（MySQL不支持）</li><li>PRIMARY KEY</li><li>FOREIGN KEY</li></ul><p><strong>通用写法：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> stuinfo(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>,  <span class="comment"># 列级约束</span></span><br><span class="line">stuname <span class="built_in">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">sex <span class="built_in">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">age <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">18</span>,</span><br><span class="line">seat <span class="built_in">INT</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">majorid <span class="built_in">INT</span>,</span><br><span class="line"><span class="keyword">CONSTRAINT</span> fk_stuinfo_major <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span>(majorid) <span class="keyword">REFERENCES</span> major(<span class="keyword">id</span>) <span class="comment"># 表级约束</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>主键和唯一的对比：</strong></p><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">唯一性</th><th style="text-align:center">是否能为空</th><th style="text-align:center">table中个数</th><th style="text-align:center">是否允许组合</th></tr></thead><tbody><tr><td style="text-align:center">primary key</td><td style="text-align:center">√</td><td style="text-align:center">×</td><td style="text-align:center">至多1个</td><td style="text-align:center">√：不推荐</td></tr><tr><td style="text-align:center">unique</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">可以有多个</td><td style="text-align:center">√：不推荐</td></tr></tbody></table><p><strong>外键：</strong></p><p>​    1、要求在从表设置外键关系</p><p>​    2、从表的外键列的类型和主表的关联列的类型要求一致或兼容，名称无要求</p><p>​    3、主表的关联列必须是一个key（一般是主键或唯一）</p><p>​    4、插入数据时，先插入主表，再插入从表</p><p>​          删除数据时，先删除从表，再删除主表</p><h2 id="数据库事务tcl"><a class="markdownIt-Anchor" href="#数据库事务tcl"></a> 数据库事务TCL</h2><p><em><code>Transaction Control Language 事务控制语言</code></em></p><p>通过一组逻辑操作单元（一组DML——sql语句），将数据从一种状态切换到另外一种状态</p><h3 id="特点acid面试重点"><a class="markdownIt-Anchor" href="#特点acid面试重点"></a> 特点:（ACID）[面试重点]</h3><ul><li>原子性：要么都执行，要么都回滚</li><li>一致性：保证数据的状态操作前和操作后保持一致</li><li>隔离性：多个事务同时操作相同数据库的同一个数据时，一个事务的执行不受另外一个事务的干扰</li><li>持久性：一个事务一旦提交，则数据将持久化到本地，除非其他事务对其进行修改</li></ul><p>相关步骤：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、开启事务</span></span><br><span class="line"><span class="keyword">set</span> autocommit=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span>;</span><br><span class="line"><span class="comment"># 2、编写事务的一组逻辑操作单元（多条sql语句）</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">insert</span> <span class="keyword">update</span> <span class="keyword">delete</span></span><br><span class="line"><span class="comment"># 3、提交事务或回滚事务</span></span><br><span class="line"><span class="keyword">rollback</span>; <span class="comment"># 回滚</span></span><br><span class="line"><span class="keyword">commit</span>; <span class="comment"># 提交</span></span><br></pre></td></tr></table></figure><h3 id="事务的分类"><a class="markdownIt-Anchor" href="#事务的分类"></a> 事务的分类</h3><ul><li><p>隐式事务，没有明显的开启和结束事务的标志<br>比如insert、update、delete语句本身就是一个事务</p></li><li><p>显式事务，具有明显的开启和结束事务的标志<br>1、开启事务——取消自动提交事务的功能<br>2、编写事务的——组逻辑操作单元（多条sql语句）<br>3、提交事务或回滚事务</p></li></ul><h3 id="事务的隔离级别"><a class="markdownIt-Anchor" href="#事务的隔离级别"></a> 事务的隔离级别:</h3><p>事务并发问题如何发生？</p><blockquote><p>当多个事务同时操作同一个数据库的相同数据时</p></blockquote><p>事务的并发问题有哪些？</p><ul><li>脏读：一个事务读取到了另外一个事务未提交的数据</li><li>不可重复读：同一个事务中，多次读取到的数据不一致</li><li>幻读：一个事务读取数据时，另外一个事务进行更新，导致第一个事务读取到了没有更新的数据</li></ul><p>事务的隔离级别</p><table><thead><tr><th style="text-align:center">级别</th><th style="text-align:center">脏读</th><th style="text-align:center">不可重复读</th><th style="text-align:center">幻读</th></tr></thead><tbody><tr><td style="text-align:center">read uncommitted</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">read committed</td><td style="text-align:center">×</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">repeatable read</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">serializable</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">×</td></tr></tbody></table><p><em><code>脏读针对更新，幻读针对插入</code></em></p><p>设置隔离级别：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">session</span>|<span class="keyword">global</span>  <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> 隔离级别名;</span><br></pre></td></tr></table></figure><p>查看隔离级别：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> @@tx_isolation;</span><br></pre></td></tr></table></figure><p>设置保存点 setpoint</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> autocommit=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">START</span> <span class="keyword">TRANSACTION</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">account</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="number">25</span>;</span><br><span class="line"><span class="keyword">SAVEPOINT</span> a;<span class="comment">#设置保存点</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">account</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="number">28</span>;</span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> a;<span class="comment">#回滚到保存点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">account</span>;</span><br></pre></td></tr></table></figure><h2 id="视图一张虚拟的表"><a class="markdownIt-Anchor" href="#视图一张虚拟的表"></a> 视图:一张虚拟的表</h2><p>视图和表的区别：</p><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">关键字</th><th style="text-align:center">是否占用物理空间</th><th style="text-align:center">使用</th></tr></thead><tbody><tr><td style="text-align:center">视图</td><td style="text-align:center">create view</td><td style="text-align:center">只是保存了sql逻辑</td><td style="text-align:center">一般是只查看</td></tr><tr><td style="text-align:center">表</td><td style="text-align:center">create table</td><td style="text-align:center">保存了数据</td><td style="text-align:center">增删改查</td></tr></tbody></table><p><strong>应用场景：</strong></p><ol><li>多个地方用到同样的查询结果</li><li>该查询结果使用的SQL语句较复杂</li></ol><p><strong>视图的好处：</strong></p><ol><li>sql语句提高重用性，效率高</li><li>和表实现了分离，提高了安全性</li></ol><h3 id="视图的创建"><a class="markdownIt-Anchor" href="#视图的创建"></a> 视图的创建</h3><p>​语法：<br>​CREATE VIEW  视图名<br>​AS<br>​查询语句;</p><h3 id="视图的增删改查"><a class="markdownIt-Anchor" href="#视图的增删改查"></a> 视图的增删改查</h3><p>增删改影响原始表的结构，所以下面的语句几乎不用！</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、查看视图的数据 ★</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> my_v4;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> my_v1 <span class="keyword">WHERE</span> last_name=<span class="string">'Partners'</span>;</span><br><span class="line"></span><br><span class="line">2、插入视图的数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> my_v4(last_name,department_id) <span class="keyword">VALUES</span>(<span class="string">'虚竹'</span>,<span class="number">90</span>);</span><br><span class="line"></span><br><span class="line">3、修改视图的数据</span><br><span class="line"><span class="keyword">UPDATE</span> my_v4 <span class="keyword">SET</span> last_name =<span class="string">'梦姑'</span> <span class="keyword">WHERE</span> last_name=<span class="string">'虚竹'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、删除视图的数据</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> my_v4;</span><br></pre></td></tr></table></figure><h3 id="某些视图不能更新"><a class="markdownIt-Anchor" href="#某些视图不能更新"></a> 某些视图不能更新</h3><ul><li>分组函数、distinct、group  by、having、union或者union all</li><li>常量视图</li><li>Select中包含子查询</li><li>join</li><li>from一个不能更新的视图</li><li>where子句的子查询引用了from子句中的表</li></ul><h3 id="视图逻辑的更新"><a class="markdownIt-Anchor" href="#视图逻辑的更新"></a> 视图逻辑的更新</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式一：</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">VIEW</span> test_v7</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name <span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id&gt;<span class="number">100</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式二:</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">VIEW</span> test_v7</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><h3 id="视图的删除"><a class="markdownIt-Anchor" href="#视图的删除"></a> 视图的删除</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以同时删除多个</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> test_v1,test_v2,test_v3;</span><br></pre></td></tr></table></figure><h3 id="视图结构的查看"><a class="markdownIt-Anchor" href="#视图结构的查看"></a> 视图结构的查看</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DESC test;</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> <span class="keyword">test</span>;</span><br></pre></td></tr></table></figure><h2 id="变量"><a class="markdownIt-Anchor" href="#变量"></a> 变量</h2><ol><li>系统变量<ul><li>全局变量</li><li>会话变量</li></ul></li><li>自定义变量<ul><li>用户变量</li><li>局部变量</li></ul></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1全局变量</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作用域：针对于所有会话（连接）有效，但不能跨重启</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">#①查看所有全局变量</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> <span class="keyword">VARIABLES</span>;</span><br><span class="line"><span class="comment">#②查看满足条件的部分系统变量</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">'%char%'</span>;</span><br><span class="line"><span class="comment">#③查看指定的系统变量的值</span></span><br><span class="line"><span class="keyword">SELECT</span> @@global.autocommit;</span><br><span class="line"><span class="keyword">SELECT</span> @@tx_isolation;</span><br><span class="line"><span class="comment">#④为某个系统变量赋值</span></span><br><span class="line"><span class="keyword">SET</span> @@global.autocommit=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> autocommit=<span class="number">0</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#2会话变量</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作用域：针对于当前会话（连接）有效</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">#①查看所有会话变量</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">SESSION</span> <span class="keyword">VARIABLES</span>;</span><br><span class="line"><span class="comment">#②查看满足条件的部分会话变量</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">SESSION</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">'%char%'</span>;</span><br><span class="line"><span class="comment">#③查看指定的会话变量的值</span></span><br><span class="line"><span class="keyword">SELECT</span> @@autocommit;</span><br><span class="line"><span class="keyword">SELECT</span> @@session.tx_isolation;</span><br><span class="line"><span class="comment">#④为某个会话变量赋值</span></span><br><span class="line"><span class="keyword">SET</span> @@session.tx_isolation=<span class="string">'read-uncommitted'</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">SESSION</span> tx_isolation=<span class="string">'read-committed'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用户变量 和 局部变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#案例：声明两个变量，求和并打印</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#用户变量</span></span><br><span class="line"><span class="keyword">SET</span> @m=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">SET</span> @n=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="keyword">sum</span>=@m+@n;</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="keyword">sum</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#局部变量</span></span><br><span class="line"><span class="keyword">DECLARE</span> m <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> n <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> <span class="keyword">SUM</span> <span class="built_in">INT</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">SUM</span>=m+n;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>;</span><br></pre></td></tr></table></figure><p><strong>用户变量和局部变量的对比</strong></p><table><thead><tr><th></th><th>作用域</th><th>定义位置</th><th>语法</th></tr></thead><tbody><tr><td>用户变量</td><td>当前会话</td><td>会话的任何地方</td><td>加@符号，不用指定类型</td></tr><tr><td>局部变量</td><td>定义它的BEGIN END中</td><td>BEGIN END的第一句话</td><td>一般不用加@,需要指定类型</td></tr></tbody></table><h2 id="存储过程"><a class="markdownIt-Anchor" href="#存储过程"></a> 存储过程</h2><blockquote><p>一组经过预先编译的<code>sql</code>语句的集合，理解成<strong>批处理语句</strong></p></blockquote><p><strong>好处：</strong></p><ol><li>提高了sql语句的重用性，减少了开发程序员的压力</li><li>提高了效率</li><li>减少了传输次数</li></ol><p><strong>分类：</strong></p><ol><li>无返回无参</li><li>仅带in类型，无返回有参</li><li>仅带out类型，有返回无参</li><li>既带in又带out，有返回有参</li><li>带inout，有返回有参<br>注意：in、out、inout都可以在一个存储过程中带多个</li></ol><p>参数列表包含三部分：<code>参数模式、参数名、参数类型</code>，例子——<code>in stuname varchar(20)</code></p><h3 id="创建存储过程"><a class="markdownIt-Anchor" href="#创建存储过程"></a> 创建存储过程</h3><p><strong>语法：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> 存储过程名(<span class="keyword">in</span>|<span class="keyword">out</span>|inout 参数名  参数类型,...)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">存储过程体</span><br><span class="line"><span class="keyword">end</span> $</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、需要设置新的结束标记</span><br><span class="line"><span class="number">2</span>、存储过程体中可以有多条sql语句，如果仅仅一条sql语句，则可以省略begin end</span><br><span class="line"><span class="number">3</span>、参数前面的符号的意思</span><br><span class="line"><span class="keyword">in</span>:该参数只能作为输入 （该参数不能做返回值）</span><br><span class="line"><span class="keyword">out</span>：该参数只能作为输出（该参数只能做返回值）</span><br><span class="line"><span class="keyword">inout</span>：既能做输入又能做输出</span><br></pre></td></tr></table></figure><p><strong>调用存储过程</strong><br>call 存储过程名(实参列表)<br>##函数</p><p>###创建函数</p><p>学过的函数：LENGTH、SUBSTR、CONCAT等<br>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> 函数名(参数名 参数类型,...) <span class="keyword">RETURNS</span> 返回类型</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">函数体</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><p>###调用函数<br>SELECT 函数名（实参列表）</p><p>###函数和存储过程的区别</p><figure class="highlight cal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">关键字调用语法返回值应用场景</span><br><span class="line">函数FUNCTIONSELECT 函数()只能是一个一般用于查询结果为一个值并返回时，当有返回值而且仅仅一个</span><br><span class="line">存储过程<span class="function"><span class="keyword">PROCEDURE</span><span class="title">CALL</span> 存储过程<span class="params">()</span>可以有0个或多个一般用于更新</span></span><br></pre></td></tr></table></figure><p>##流程控制结构</p><p>###分支<br>一、if函数<br>语法：if(条件，值1，值2)<br>特点：可以用在任何位置</p><p>二、case语句</p><p>语法：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">情况一：类似于switch</span><br><span class="line"><span class="keyword">case</span> 表达式</span><br><span class="line"><span class="keyword">when</span> 值<span class="number">1</span> <span class="keyword">then</span> 结果<span class="number">1</span>或语句<span class="number">1</span>(如果是语句，需要加分号) </span><br><span class="line"><span class="keyword">when</span> 值<span class="number">2</span> <span class="keyword">then</span> 结果<span class="number">2</span>或语句<span class="number">2</span>(如果是语句，需要加分号)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span> 结果n或语句n(如果是语句，需要加分号)</span><br><span class="line"><span class="keyword">end</span> 【<span class="keyword">case</span>】（如果是放在<span class="keyword">begin</span> <span class="keyword">end</span>中需要加上<span class="keyword">case</span>，如果放在<span class="keyword">select</span>后面不需要）</span><br><span class="line"></span><br><span class="line">情况二：类似于多重<span class="keyword">if</span></span><br><span class="line"><span class="keyword">case</span> </span><br><span class="line"><span class="keyword">when</span> 条件<span class="number">1</span> <span class="keyword">then</span> 结果<span class="number">1</span>或语句<span class="number">1</span>(如果是语句，需要加分号) </span><br><span class="line"><span class="keyword">when</span> 条件<span class="number">2</span> <span class="keyword">then</span> 结果<span class="number">2</span>或语句<span class="number">2</span>(如果是语句，需要加分号)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span> 结果n或语句n(如果是语句，需要加分号)</span><br><span class="line"><span class="keyword">end</span> 【<span class="keyword">case</span>】（如果是放在<span class="keyword">begin</span> <span class="keyword">end</span>中需要加上<span class="keyword">case</span>，如果放在<span class="keyword">select</span>后面不需要）</span><br></pre></td></tr></table></figure><p>特点：<br>可以用在任何位置</p><p>三、if elseif语句</p><p>语法：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 情况<span class="number">1</span> then 语句<span class="number">1</span>;</span><br><span class="line">elseif 情况<span class="number">2</span> then 语句<span class="number">2</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span> 语句n;</span><br><span class="line">end <span class="keyword">if</span>;</span><br></pre></td></tr></table></figure><p>特点：<br>只能用在begin end中！！！！！！！！！！！！！！！</p><p>三者比较：<br>应用场合<br>if函数简单双分支<br>case结构等值判断 的多分支<br>if结构区间判断 的多分支</p><p>###循环</p><p>语法：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">【标签：】<span class="keyword">WHILE</span> 循环条件  <span class="keyword">DO</span></span><br><span class="line">循环体</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">WHILE</span> 【标签】;</span><br></pre></td></tr></table></figure><p>特点：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">只能放在<span class="keyword">BEGIN</span> <span class="keyword">END</span>里面</span><br><span class="line"></span><br><span class="line">如果要搭配leave跳转语句，需要使用标签，否则可以不用标签</span><br><span class="line"></span><br><span class="line">leave类似于java中的<span class="keyword">break</span>语句，跳出所在循环！！！</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;mysql笔记&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#mysql笔记&quot;&gt;&lt;/a&gt; MySQL笔记&lt;/h1&gt;
&lt;h2 id=&quot;目标&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#目标&quot;&gt;&lt;/a&gt; 目标&lt;
      
    
    </summary>
    
      <category term="MySQL" scheme="http://yoursite.com/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>C-Standard-Library-architecure &amp; sources2</title>
    <link href="http://yoursite.com/2019/03/13/C-Standard-Library-architecure-sources2/"/>
    <id>http://yoursite.com/2019/03/13/C-Standard-Library-architecure-sources2/</id>
    <published>2019-03-13T11:27:45.000Z</published>
    <updated>2019-03-14T06:33:02.840Z</updated>
    
    <content type="html"><![CDATA[<h3 id="list容器链表"><a class="markdownIt-Anchor" href="#list容器链表"></a> list容器（链表）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt; //abort()</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;  //snprintf()</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; //find()</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt; </span></span></span><br><span class="line"><span class="keyword">namespace</span> jj03</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_list</span><span class="params">(<span class="keyword">long</span>&amp; value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\ntest_list().......... \n"</span>;</span><br><span class="line">     </span><br><span class="line"><span class="built_in">list</span>&lt;<span class="built_in">string</span>&gt; c;  </span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">clock_t</span> timeStart = clock();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">long</span> i=<span class="number">0</span>; i&lt; value; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">snprintf</span>(buf, <span class="number">10</span>, <span class="string">"%d"</span>, rand());</span><br><span class="line">        c.push_back(<span class="built_in">string</span>(buf));    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(exception&amp; p) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"i="</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span> &lt;&lt; p.what() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">abort</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"list.size()= "</span> &lt;&lt; c.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"list.max_size()= "</span> &lt;&lt; c.max_size() &lt;&lt; <span class="built_in">endl</span>;    <span class="comment">//357913941</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"list.front()= "</span> &lt;&lt; c.front() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"list.back()= "</span> &lt;&lt; c.back() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> target = get_a_target_string();</span><br><span class="line"><span class="comment">//-----------find----------------------</span></span><br><span class="line">    timeStart = clock();</span><br><span class="line"><span class="keyword">auto</span> pItem = find(c.begin(), c.end(), target);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"std::find(), milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (pItem != c.end())</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"found, "</span> &lt;&lt; *pItem &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"not found! "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//-----------sort----------------------    </span></span><br><span class="line">    timeStart = clock();</span><br><span class="line">c.sort();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"c.sort(), milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>;    </span><br><span class="line">    </span><br><span class="line">c.clear();</span><br><span class="line">test_moveable(<span class="built_in">list</span>&lt;MyString&gt;(),<span class="built_in">list</span>&lt;MyStrNoMove&gt;(), value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>一个萝卜一个坑</li><li>标准库有<kbd>sort</kbd>，容器自己也有一个<kbd>sort</kbd>,容器查找自然要用自己的sort</li></ul><h3 id="forward_list容器单向链表c11"><a class="markdownIt-Anchor" href="#forward_list容器单向链表c11"></a> forward_list容器——单向链表（c++11）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt; //abort()</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;  //snprintf()</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt; </span></span></span><br><span class="line"><span class="keyword">namespace</span> jj04</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_forward_list</span><span class="params">(<span class="keyword">long</span>&amp; value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\ntest_forward_list().......... \n"</span>;</span><br><span class="line">     </span><br><span class="line">forward_list&lt;<span class="built_in">string</span>&gt; c;  </span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">clock_t</span> timeStart = clock();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">long</span> i=<span class="number">0</span>; i&lt; value; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">snprintf</span>(buf, <span class="number">10</span>, <span class="string">"%d"</span>, rand());</span><br><span class="line">        c.push_front(<span class="built_in">string</span>(buf));     </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(exception&amp; p) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"i="</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span> &lt;&lt; p.what() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">abort</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"forward_list.max_size()= "</span> &lt;&lt; c.max_size() &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//536870911</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"forward_list.front()= "</span> &lt;&lt; c.front() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 找到最后一个元素非常慢</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> target = get_a_target_string();</span><br><span class="line">    timeStart = clock();</span><br><span class="line"><span class="keyword">auto</span> pItem = find(c.begin(), c.end(), target);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"std::find(), milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pItem != c.end())</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"found, "</span> &lt;&lt; *pItem &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"not found! "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    timeStart = clock();</span><br><span class="line">c.sort();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"c.sort(), milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">c.clear(); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>只有put_front( ) 没有put_back( )</li><li>单向链表找到最后一个元素非常慢</li><li>.size( )和.back( )都是不存在的</li></ul><h3 id="slist容器gnu非标准等价于forward_list"><a class="markdownIt-Anchor" href="#slist容器gnu非标准等价于forward_list"></a> slist容器（GNU，非标准）等价于forward_list</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ext\slist&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#inlcude <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> jj10</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test_slist</span><span class="params">(<span class="keyword">long</span>&amp; value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        __gnu_cxx::slist&lt;<span class="built_in">string</span>&gt; c;</span><br><span class="line">        <span class="keyword">char</span> buf[<span class="number">10</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">clock_t</span> timeStart = clock();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>;i&lt; value; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">snprintf</span>(buf, <span class="number">10</span>, <span class="string">"%d"</span>, rand());</span><br><span class="line">                c.put_front(<span class="built_in">string</span>(buf));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span>(exception&amp; p)</span><br><span class="line">            &#123;</span><br><span class="line">               <span class="built_in">cout</span> &lt;&lt; <span class="string">"i="</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span> &lt;&lt; p.what() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   <span class="built_in">abort</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="deque容器双端队列双向进出"><a class="markdownIt-Anchor" href="#deque容器双端队列双向进出"></a> deque容器——双端队列:双向进出</h3><p><img src="https://s2.ax1x.com/2019/03/13/AkBPh9.png" alt="AkBPh9.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt; //abort()</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;  //snprintf()</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt; </span></span></span><br><span class="line"><span class="keyword">namespace</span> jj05</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_deque</span><span class="params">(<span class="keyword">long</span>&amp; value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\ntest_deque().......... \n"</span>;</span><br><span class="line">     </span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="built_in">string</span>&gt; c;  </span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">clock_t</span> timeStart = clock();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">long</span> i=<span class="number">0</span>; i&lt; value; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">snprintf</span>(buf, <span class="number">10</span>, <span class="string">"%d"</span>, rand());</span><br><span class="line">        c.push_back(<span class="built_in">string</span>(buf));     </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(exception&amp; p) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"i="</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span> &lt;&lt; p.what() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">abort</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"deque.size()= "</span> &lt;&lt; c.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"deque.front()= "</span> &lt;&lt; c.front() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"deque.back()= "</span> &lt;&lt; c.back() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"deque.max_size()= "</span> &lt;&lt; c.max_size() &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//1073741821</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> target = get_a_target_string();</span><br><span class="line">    timeStart = clock();</span><br><span class="line"><span class="keyword">auto</span> pItem = find(c.begin(), c.end(), target);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"std::find(), milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pItem != c.end())</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"found, "</span> &lt;&lt; *pItem &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"not found! "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    timeStart = clock();</span><br><span class="line">sort(c.begin(), c.end());</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"sort(), milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">c.clear();</span><br><span class="line">test_moveable(<span class="built_in">deque</span>&lt;MyString&gt;(),<span class="built_in">deque</span>&lt;MyStrNoMove&gt;(), value); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关于stack和queue</strong></p><ul><li>stack栈（先进后出）和queue队列（先进先出）其实是deque的容器适配器，但是也可以称之为容器</li><li>都是<kbd>.push()</kbd></li><li>不提供iterator的操作，没有find算法，会破坏二者的特性</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;list容器链表&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#list容器链表&quot;&gt;&lt;/a&gt; list容器（链表）&lt;/h3&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="C++" scheme="http://yoursite.com/categories/C/"/>
    
    
      <category term="deque" scheme="http://yoursite.com/tags/deque/"/>
    
      <category term="list" scheme="http://yoursite.com/tags/list/"/>
    
      <category term="stack" scheme="http://yoursite.com/tags/stack/"/>
    
      <category term="forward_list" scheme="http://yoursite.com/tags/forward-list/"/>
    
  </entry>
  
  <entry>
    <title>C++ Standard Library--architecure &amp; sources1</title>
    <link href="http://yoursite.com/2019/03/12/C-Standard-Library-architecure-sources1/"/>
    <id>http://yoursite.com/2019/03/12/C-Standard-Library-architecure-sources1/</id>
    <published>2019-03-12T14:25:22.000Z</published>
    <updated>2019-03-15T01:02:50.193Z</updated>
    
    <content type="html"><![CDATA[<p>三月份开始复习<strong>泛型编程</strong>和<strong>STL</strong>的体系结构和内核分析,记录今天学的东西。</p><h3 id="1-c-standard-library-vs-standard-template-library"><a class="markdownIt-Anchor" href="#1-c-standard-library-vs-standard-template-library"></a> 1. C++ Standard Library VS Standard Template Library</h3><ul><li><p>标准库是以head files的形式呈现的</p></li><li><p>C++的标准模板库 &gt;= STL</p></li></ul><h3 id="2-stl六大部件"><a class="markdownIt-Anchor" href="#2-stl六大部件"></a> 2. STL六大部件</h3><ol><li>容器（Containers）</li><li>分配器（Allocators）</li><li>迭代器（Iterators）</li><li>适配器（Adapters）_变压器</li><li>算法（Algorithms）</li><li>仿函式（Functors）</li></ol><p><a href="https://imgchr.com/i/AFDFTe" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/03/13/AFDFTe.png" alt="AFDFTe.png"></a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ia[<span class="number">6</span>] = &#123;<span class="number">27</span>, <span class="number">48</span>, <span class="number">166</span>, <span class="number">78</span>, <span class="number">14</span>, <span class="number">227</span>&#125;;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>, allocator&lt;<span class="keyword">int</span>&gt;&gt; vi(ia, ia+<span class="number">6</span>);</span><br><span class="line">    <span class="comment">// predicate：判断式</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; count_if(vi.begin(), vi.end(), not1(bind2nd(less&lt;<span class="keyword">int</span>&gt;(), <span class="number">40</span>)));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：</p><ul><li>count_if：algorithm</li><li>not1:function adapter(negator)</li><li>bind2nd:function adapter(binder)</li><li>less:function object</li></ul><h3 id="3-container前闭后开区间-kbd-kbd"><a class="markdownIt-Anchor" href="#3-container前闭后开区间-kbd-kbd"></a> 3. Container——前闭后开区间 <kbd>[ )</kbd></h3><p><img src="https://s2.ax1x.com/2019/03/13/AFDXB8.png" alt="AFDXB8.png"></p><h3 id="4-range-based-for-loopsince-c11"><a class="markdownIt-Anchor" href="#4-range-based-for-loopsince-c11"></a> 4. range-based for loop(since C++11)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式</span></span><br><span class="line"><span class="keyword">for</span> (decl : coll)&#123;</span><br><span class="line">    statement</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//demo1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i: &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;)&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//demo2</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; vec;</span><br><span class="line">...</span><br><span class="line">    <span class="comment">// 按值传递</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> elem : vec)&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; elem &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 按引用传递</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; elem : vec)&#123;</span><br><span class="line">    elem *=<span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-auto-keyword-since-c-11"><a class="markdownIt-Anchor" href="#5-auto-keyword-since-c-11"></a> 5. auto keyword (since C++ 11)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>&lt;<span class="built_in">string</span>&gt; c;</span><br><span class="line">...</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="built_in">string</span>&gt;::iterator ite;</span><br><span class="line">ite = ::find(c.begin(), c.end(), target);</span><br><span class="line"><span class="comment">//-------------等价于---------------//</span></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="built_in">string</span>&gt; c;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">auto</span> ite = ::find(c.begin(), c.end(), target);</span><br></pre></td></tr></table></figure><h3 id="6容器的结构与分类"><a class="markdownIt-Anchor" href="#6容器的结构与分类"></a> 6.容器的结构与分类</h3><p><a href="https://imgchr.com/i/AFrUCd" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/03/13/AFrUCd.md.png" alt="AFrUCd.md.png"></a></p><ul><li><p>不定序容器是红黑树</p></li><li><p>Set、Map中的key——不可重复</p></li><li><p>Multiset、Multimap中的key——不可重复</p></li></ul><p><strong>辅助函数</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">array</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> ASIZE  =   <span class="number">500000L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">get_a_target_long</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> target = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"target (0~"</span> &lt;&lt; RAND_MAX &lt;&lt; <span class="string">"): "</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; target;</span><br><span class="line"><span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">get_a_target_string</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> target = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"target (0~"</span> &lt;&lt; RAND_MAX &lt;&lt; <span class="string">"): "</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; target;</span><br><span class="line"><span class="built_in">snprintf</span>(buf, <span class="number">10</span>, <span class="string">"%d"</span>, target); <span class="comment">// 作用：模拟object的感觉，不能总传value</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">string</span>(buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  下面两个配合qsort使用 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compareLongs</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* a, <span class="keyword">const</span> <span class="keyword">void</span>* b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (*(<span class="keyword">long</span>*)a - *(<span class="keyword">long</span>*)b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compareStrings</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* a, <span class="keyword">const</span> <span class="keyword">void</span>* b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (*(<span class="built_in">string</span>*)a &gt; *(<span class="built_in">string</span>*)b)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (*(<span class="built_in">string</span>*)a &lt; *(<span class="built_in">string</span>*)b)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="array容器"><a class="markdownIt-Anchor" href="#array容器"></a> Array容器</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt; //qsort, bsearch, NULL</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> jj01</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_array</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\ntest_array().......... \n"</span>;</span><br><span class="line">     </span><br><span class="line"><span class="built_in">array</span>&lt;<span class="keyword">long</span>,ASIZE&gt; c;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">clock_t</span> timeStart = clock();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">long</span> i=<span class="number">0</span>; i&lt; ASIZE; ++i) &#123;</span><br><span class="line">        c[i] = rand(); </span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"array.size()= "</span> &lt;&lt; c.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"array.front()= "</span> &lt;&lt; c.front() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"array.back()= "</span> &lt;&lt; c.back() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"array.data()= "</span> &lt;&lt; c.data() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> target = get_a_target_long();</span><br><span class="line"></span><br><span class="line">timeStart = clock();</span><br><span class="line">    ::qsort(c.data(), ASIZE, <span class="keyword">sizeof</span>(<span class="keyword">long</span>), compareLongs);</span><br><span class="line"><span class="keyword">long</span>* pItem = (<span class="keyword">long</span>*)::bsearch(&amp;target, (c.data()), ASIZE, <span class="keyword">sizeof</span>(<span class="keyword">long</span>), compareLongs); <span class="comment">// 二分查找</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"qsort()+bsearch(), milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//    </span></span><br><span class="line">  <span class="keyword">if</span> (pItem != <span class="literal">NULL</span>)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"found, "</span> &lt;&lt; *pItem &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"not found! "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>技巧：</p><ul><li>测试代码最好也要封装成函数；</li><li>用namespace可以避免变量冲突</li><li><strong>变量随用随定义是最好顶格写</strong>，这样方便查找！</li></ul><h3 id="vector容器"><a class="markdownIt-Anchor" href="#vector容器"></a> vector容器</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt; //abort()</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;  //snprintf()</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; //sort()</span></span></span><br><span class="line"><span class="keyword">namespace</span> jj02</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_vector</span><span class="params">(<span class="keyword">long</span>&amp; value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\ntest_vector().......... \n"</span>;</span><br><span class="line">     </span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; c;  </span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">clock_t</span> timeStart = clock();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">long</span> i=<span class="number">0</span>; i&lt; value; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">snprintf</span>(buf, <span class="number">10</span>, <span class="string">"%d"</span>, rand());</span><br><span class="line">        c.push_back(<span class="built_in">string</span>(buf));     </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(exception&amp; p) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"i="</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span> &lt;&lt; p.what() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">     <span class="comment">//曾經最高 i=58389486 then std::bad_alloc</span></span><br><span class="line"><span class="built_in">abort</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"vector.max_size()= "</span> &lt;&lt; c.max_size() &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//1073747823</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"vector.size()= "</span> &lt;&lt; c.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"vector.front()= "</span> &lt;&lt; c.front() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"vector.back()= "</span> &lt;&lt; c.back() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"vector.data()= "</span> &lt;&lt; c.data() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"vector.capacity()= "</span> &lt;&lt; c.capacity() &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对比不同的查找方式</span></span><br><span class="line"><span class="built_in">string</span> target = get_a_target_string();</span><br><span class="line"><span class="comment">//-------------find: 循序查找, 看运气------------</span></span><br><span class="line">    &#123;</span><br><span class="line">timeStart = clock();</span><br><span class="line"><span class="keyword">auto</span> pItem = ::find(c.begin(), c.end(), target); <span class="comment">//模板函数就是全局函数</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"std::find(), milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (pItem != c.end())</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"found, "</span> &lt;&lt; *pItem &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"not found! "</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//-----------sort后bresearch：二分查找-----------------   </span></span><br><span class="line">&#123;</span><br><span class="line">timeStart = clock();</span><br><span class="line">    sort(c.begin(), c.end());</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"sort(), milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line"></span><br><span class="line">timeStart = clock();    </span><br><span class="line"><span class="built_in">string</span>* pItem = (<span class="built_in">string</span>*)::bsearch(&amp;target, (c.data()), </span><br><span class="line">                                   c.size(), <span class="keyword">sizeof</span>(<span class="built_in">string</span>), compareStrings); </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"bsearch(), milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line">   </span><br><span class="line">  <span class="keyword">if</span> (pItem != <span class="literal">NULL</span>)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"found, "</span> &lt;&lt; *pItem &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"not found! "</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.clear();</span><br><span class="line">test_moveable(<span class="built_in">vector</span>&lt;MyString&gt;(),<span class="built_in">vector</span>&lt;MyStrNoMove&gt;(), value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>容器的<kbd>capacity</kbd>的是成倍数增长的，在另外的地方开辟内存然后再将原来的复制到新的，过程比较慢</li><li>循序查找不一定比sort后bresearch慢，由此思考时间复杂度</li><li>所有的算法都是全局函数</li><li>容器的定义都有第二参数分配器，一般用默认</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;三月份开始复习&lt;strong&gt;泛型编程&lt;/strong&gt;和&lt;strong&gt;STL&lt;/strong&gt;的体系结构和内核分析,记录今天学的东西。&lt;/p&gt;
&lt;h3 id=&quot;1-c-standard-library-vs-standard-template-library&quot;&gt;&lt;a c
      
    
    </summary>
    
      <category term="C++" scheme="http://yoursite.com/categories/C/"/>
    
    
      <category term="array" scheme="http://yoursite.com/tags/array/"/>
    
      <category term="vector" scheme="http://yoursite.com/tags/vector/"/>
    
  </entry>
  
  <entry>
    <title>智能寻迹爬楼载重清洁装置</title>
    <link href="http://yoursite.com/2019/03/10/%E7%88%AC%E6%A5%BC%E5%B0%8F%E8%BD%A6/"/>
    <id>http://yoursite.com/2019/03/10/爬楼小车/</id>
    <published>2019-03-10T14:09:18.000Z</published>
    <updated>2019-07-23T13:06:33.304Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>就像叶子从痛苦的蜷缩中要用力舒展一样，人也要从不假思索的蒙昧里挣脱，这才是活着。</p><p>​——柴静《看见》</p></blockquote><h2 id="演示视频见b站"><a class="markdownIt-Anchor" href="#演示视频见b站"></a> <a href="https://www.bilibili.com/video/av55167725" target="_blank" rel="noopener">演示视频见B站</a></h2><p>这是我大学作为项目负责人的封山之作，完成了毕业前要做一件真正的实物产品的心愿。这件作品耗费了我巨大的心血，最终的实现效果也没有达到我理想的状态。实践本就没有完美的事情，永远都在探索完美的路上。下文是我在毕业后总结归纳的一些细枝末节，搭建博客之后开学的第二周，作为一个会议记录于此，并时刻提醒自己，接受自己的不完美，但是持续不断的努力。</p><p><a href="https://imgchr.com/i/A9d4I0" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/03/10/A9d4I0.md.png" alt="A9d4I0.md.png"></a></p><h2 id="技术领域"><a class="markdownIt-Anchor" href="#技术领域"></a> <strong>技术领域</strong></h2><p>本发明涉及智能寻迹爬楼载重清洁装置，属于服务类机器人技术领域，其主要功能是实现上下楼负重搬运以及楼梯清洁，可以在没有电梯的建筑楼层使用。</p><h2 id="背景技术"><a class="markdownIt-Anchor" href="#背景技术"></a> 背景技术</h2><p>本发明的最初目的是解决搬运诸如水桶等重物时人工上楼搬运费时费力的问题。同时考虑到楼梯各时间段使用频繁，楼梯层数较多，人力清洁工作繁重，故在尾部加装清洁装置。两者结合通过电机带传动组成搬运清洁两用型的智能装置。国内多数爬楼载重机器人，采用升降式、腿式结构，上楼缓慢效率不高且爬楼机械装置大多不适用于平地，平地使用时所受阻力较大，行动缓慢，转弯不便。基于上述背景我们设计了独特的变形前轮，实现在平路和上下楼的智能切换，以及转向装置能自动调整前轮的角度实现快速转弯。该小车前轮采用变形轮机构，可平地导向也可上下楼梯，控制方式灵活。可适用于各种工厂、住宅楼的货物搬运。同时对车尾稍加人性化设计，便可实现清洁功能，具有较大的社会价值和经济价值。</p><h2 id="发明内容"><a class="markdownIt-Anchor" href="#发明内容"></a> <strong>发明内容</strong></h2><p><img src="https://s2.ax1x.com/2019/03/10/A9KdMT.png" alt="A9KdMT.png"></p><p>本发明的技术方案：</p><p>一种智能寻迹爬楼载重清洁装置，包括电气部分和机械部分；</p><p>所述的电气部分4包括电源4-1和电气模块4-2，以控制超声波导距、单片机、舵机以及电机；</p><p>所述的机械部分包括变形轮机构1、转向机构2、清洁机构3和机身5；</p><p>所述的机身5包括行星轮5-1和机身车座5-2，所述的机身车座5-2为长方形的面板，所述的行星轮5-1有两个，通过轴对称固定在机身车座5-2尾部的两端；</p><p>所述的变形轮机构1有两个，包括变形轮支架1-4、变形轮分支1-1、三爪卡销1-3、变形舵机1-2、圆盘支架1-6和舵盘1-5；</p><p>所述的变形轮分支1-1共三个，依次连接组成轮子的外轮廓；所述的变形轮分支1-1是由三根带有弧度的杆组成的三杆机构，一根外侧杆、一根滑动杆和一根支撑杆；外侧杆构成轮子的外轮廓，其一端设有滑槽，变形轮变形时，相邻的变形轮分支1-1的滑动杆滑入滑槽中；滑动杆和支撑杆的一端均固定在外侧杆上，支撑杆的另一端固定在滑动杆上，滑动杆的另一端铰接于变形轮支架1-4上；所述的滑动杆的下端、内侧设有滑轨，三爪卡销1-3在滑轨中滑动；所述的圆盘支架1-6为中心开有圆孔的圆盘；所述的变形轮支架1-4为中空的圆柱体，圆盘支架1-6中心圆孔的直径与变形轮支架1-4的直径相同，变形轮支架1-4穿过外侧的圆盘支架1-6中心开口，并固定在外侧的圆盘支架1-6上；所述的三爪卡销1-3为一端均匀分布有三个爪的圆柱体，三爪卡销1-3的圆柱体嵌套在变形轮支架1-4的内部，三爪卡销1-3的爪插在三杆机构的滑轨内，三爪卡销1-3的圆柱体设有五个通孔；所述的变形轮分支1-1的滑动杆下部有一个通孔，通过销键和铰环将三个三杆机构均匀固定在变形轮支架1-4上；所述的变形轮支架1-4、三爪卡销1-3和外侧的圆盘支架1-6，共同固定在内侧的圆盘支架1-6上，内侧和外侧的圆盘支架1-6配合，以固定三爪卡销1-3并保证三杆机构在一个平面内移动；所述的变形舵机1-2一端带有五个插杆，通过内侧的圆盘支架1-6的中心圆孔插入三爪卡销1-3的通孔内，使变形舵机1-2与三爪卡销1-3连接；所述的变形舵机1-2，另一端安装有舵盘1-5，变形舵机1-2提供转矩，通过正反转实现变形轮整体和变型的切换；</p><p><img src="https://s2.ax1x.com/2019/03/10/A9wMQg.png" alt="A9wMQg.png"></p><p><img src="https://s2.ax1x.com/2019/03/10/A9KDZ4.png" alt="A9KDZ4.png"></p><p><img src="https://s2.ax1x.com/2019/03/10/A9K5ee.png" alt="A9K5ee.png"></p><p>所述的转向机构2包括轴承座2-1、转动连接装置2-2、转向机构电机2-3、轴2-4、转动舵机2-5、联轴器2-6、皮带2-7、球头拉杆2-8和万向节2-9；所述的轴承座2-1共两个，对称固定在机身车座5-2前部的两端；所述的轴2-4的两端固定在轴承座2-1上，轴2-4的两端安装有万向节2-9，轴2-4通过万向节2-9与舵盘1-5相连接，使变形轮机构1与转向机构2相连接；所述的转向舵机2-5固定在机身车座5-2前部，转向舵机2-5的一侧安装有转动连接装置2-2，转动连接装置2-2的两个插孔分别用于连接球头拉杆2-8，球头拉杆2-8的另一端与万向节2-9外侧连接，使得转向舵机2-5与舵盘1-5相连接；所述的联轴器2-6套装在轴2-4上，所述的转向机构电机2-3固定机身车座5-2上；所述的皮带2-7，一端套装在联轴器2-6上，另一端套装在转向机构电机2-3的输出端；所述的转向机构电机2-3通过皮带2-7和联轴器2-6带动轴2-4旋转，轴2-4来传递动力，带动变形轮机构1运转；所述的转动舵机2-5工作时会左右摆动，球头拉杆2-8将转动舵机2-5的摆动转换为角度变化传递给万向节2-9，接着将该变化传递给与万向节2-9连接的变形轮舵机1-2，从而完成转向工作；</p><p><img src="https://s2.ax1x.com/2019/03/10/A9Kood.png" alt="A9Kood.png"></p><p>所述的清洁机构3位于装置的尾部，包括齿条3-1、刷子3-2、清洁机构电机3-3和齿轮3-4；所述的齿条3-1固定在机身车座5-2的尾部，所述的清洁机构电机3-3固定在机身车座5-2上，所述的齿轮3-4固定在清洁机构电机3-3的输出端，齿轮3-4与齿条3-1相互咬合；所述的刷子3-2位于机身车座5-2的尾部的底表面，通过螺栓活动连接，与齿条3-1固定连接；所述的清洁机构电机3-3的转动带动齿轮3-4转动，进而使齿条3-1横向往复运动，带动刷子3-2的往复运动，实现楼梯的清洁功能；</p><p><img src="https://s2.ax1x.com/2019/03/10/A9Muk9.png" alt="A9Muk9.png"></p><p>所述的电气部分4由电源4-1和电气模块4-2组成；所述的电源4-1和电气模块4-2并排固定在机身车座5-2中间位置；所述的电气模块4-2包括单片机模块和超声波模块。</p><p><img src="https://s2.ax1x.com/2019/03/10/A9MRts.png" alt="A9MRts.png"></p><p><img src="https://s2.ax1x.com/2019/03/10/A9QV3t.png" alt="A9QV3t.png"></p><p>所述的机身车座5-2为亚克力板材质。</p><p>所述的清洁机构电机3-3为37型减速电机。</p><p>所述的变形舵机1-2为RDS3109双轴舵机。</p><p>所述的轴2-4的直径为6mm。</p><p>本发明的有益效果：车采用变形轮结构：平地导向时为圆形，上下楼梯时一分为三，控制方式灵活；该车克服了现有爬楼装置只用于爬楼且平地转向、前行困难的缺点，通过变形轮实现平地上楼自由转换。变形轮简化了传统的铰链机构改用销传动在导轨中移动实现变形，结构简单且不失牢固与严密性，极具创造价值；上下四个超声波模块检测距离差判断墙、楼梯从而绕行和变形；车尾安装清洁装置，可自动清洁楼梯。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;就像叶子从痛苦的蜷缩中要用力舒展一样，人也要从不假思索的蒙昧里挣脱，这才是活着。&lt;/p&gt;
&lt;p&gt;​																		——柴静《看见》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;演示视频见b站&quot;&gt;&lt;a class=&quot;mar
      
    
    </summary>
    
      <category term="Projects" scheme="http://yoursite.com/categories/Projects/"/>
    
    
      <category term="避障" scheme="http://yoursite.com/tags/%E9%81%BF%E9%9A%9C/"/>
    
      <category term="超声波检测" scheme="http://yoursite.com/tags/%E8%B6%85%E5%A3%B0%E6%B3%A2%E6%A3%80%E6%B5%8B/"/>
    
      <category term="爬楼装置" scheme="http://yoursite.com/tags/%E7%88%AC%E6%A5%BC%E8%A3%85%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>小型鱼丸生产加工流水线设计</title>
    <link href="http://yoursite.com/2019/03/10/%E9%B1%BC%E4%B8%B8%E6%9C%BA/"/>
    <id>http://yoursite.com/2019/03/10/鱼丸机/</id>
    <published>2019-03-10T06:29:44.000Z</published>
    <updated>2019-07-23T13:07:40.176Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>工作马马虎虎，只想在兴趣和游戏中寻觅快活，充其量只能获得一时的快感，绝不能尝到从心底涌出的惊喜和快乐，但来自工作的喜悦并不像糖果那样——放进嘴里就甜味十足，而是需要从苦劳与艰辛中渗出，因此当我们聚精会神，孜孜不倦，克服艰辛后的成就感，世上没有哪种喜悦可以类比.</p><p>​——稻盛和夫《活法》</p></blockquote><h2 id="视频链接"><a class="markdownIt-Anchor" href="#视频链接"></a> <a href="https://www.bilibili.com/video/av55167221" target="_blank" rel="noopener">视频链接</a></h2><p>大二的时候，出于对工业设计和机械结构的兴趣，自学了SolidWorks，拉上几个朋友一起做了这个项目。来到威海，我们饱含着对大海的一种情怀和向往，致使我们想到了海产品的加工。鱼丸加工整个流水线很是庞大，剖割、清洗、杀菌、擂溃、调料、成型、蒸煮、冷冻到包装。我们着重从拥有较多机械结构的<strong>剖割</strong>、<strong>鱼丸成型</strong>和<strong>包装</strong>三部分建模——自动杀鱼系统、鱼丸成型系统和包装机系统。此套系统运用于鱼的前期处理包括去鳞，去内脏，去头尾，清洗等，以及鱼丸的成型和包装一体化的生产。</p><p>主要是用<strong>SolidWorks</strong>进行设计，<strong>keyshot</strong>进行渲染，<strong>Solid-Composer</strong>结合<strong>AE</strong>进行视频制作。整个项目的工程量相当大，从目标敲定到最后的完工花了将近四个月的时间。由于之间机器人比赛的经验，作为队长我很好的进行了分工和计划推进，最终的结果还是挺让人激动的。</p><h3 id="总设计图"><a class="markdownIt-Anchor" href="#总设计图"></a> 总设计图</h3><p><img src="https://s2.ax1x.com/2019/03/09/ASHY7t.jpg" alt="ASHY7t.jpg"></p><p><img src="https://s2.ax1x.com/2019/03/10/A9pHGd.png" alt="A9pHGd.png"></p><p><img src="https://s2.ax1x.com/2019/03/10/A9EaH1.png" alt="A9EaH1.png"></p><p><img src="https://s2.ax1x.com/2019/03/10/A9EuBn.png" alt="A9EuBn.png"></p><h3 id="杀鱼机部分"><a class="markdownIt-Anchor" href="#杀鱼机部分"></a> 杀鱼机部分</h3><p><img src="https://s2.ax1x.com/2019/03/09/ASHJ0I.jpg" alt="ASHJ0I.jpg"></p><p><img src="https://s2.ax1x.com/2019/03/10/A9pWKx.png" alt="A9pWKx.png"></p><p>机器主要传动方式为齿轮传动和皮带传动，将鱼平放在传送带上，前后的夹持装置把鱼尾和鱼头夹住；水平方向的刀片将鱼腹剖开，带有软毛刷的小滚筒将内脏清除，同时毛刷中的空心管冲水清洗鱼腹，内脏落至下方垃圾箱内；之后竖直方向的刀片将鱼头鱼尾切掉，鱼腹由出口处传送带运出，鱼头鱼尾回到垃圾箱上方，夹持装置上的顶杆使其落至垃圾箱中。</p><h3 id="鱼丸成型机部分"><a class="markdownIt-Anchor" href="#鱼丸成型机部分"></a> 鱼丸成型机部分</h3><p><img src="https://s2.ax1x.com/2019/03/09/ASHUtf.jpg" alt="ASHUtf.jpg"></p><p><img src="https://s2.ax1x.com/2019/03/10/A9p2x1.png" alt="A9p2x1.png"></p><p>鱼丸的成型方面运用了行星齿轮机构并综合了能量守恒及流体力学等方面要求设计了变速管以实现鱼丸成型，防止阻塞现象的发生。</p><h3 id="包装机部分"><a class="markdownIt-Anchor" href="#包装机部分"></a> 包装机部分</h3><p><img src="https://s2.ax1x.com/2019/03/09/ASHNAP.jpg" alt="ASHNAP.jpg"></p><p><img src="https://s2.ax1x.com/2019/03/10/A9poIe.png" alt="A9poIe.png"></p><p>包装机则通过两侧传送装置同时送纸袋，创新地运用到三边封口装置，其中用四个锥齿轮和连杆组成传动机构同时封左右和下口，上口鱼丸掉落后，通过两个机械臂的配合使包装袋转过90度后，另一个连杆机构再封装上口，而后掉落至传送带完成包装。</p><p>这些东西相当于对之前有个交代吧，知识都是相通的，要不断得在成功的地方吸取养分，然后迁移到其他地方。正如前文的摘录，孜孜以求才能活得更大的幸福，加油！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;工作马马虎虎，只想在兴趣和游戏中寻觅快活，充其量只能获得一时的快感，绝不能尝到从心底涌出的惊喜和快乐，但来自工作的喜悦并不像糖果那样——放进嘴里就甜味十足，而是需要从苦劳与艰辛中渗出，因此当我们聚精会神，孜孜不倦，克服艰辛后的成就感，世上没有哪种喜
      
    
    </summary>
    
      <category term="Projects" scheme="http://yoursite.com/categories/Projects/"/>
    
    
      <category term="SolidWorks" scheme="http://yoursite.com/tags/SolidWorks/"/>
    
      <category term="keyshot" scheme="http://yoursite.com/tags/keyshot/"/>
    
      <category term="机械设计" scheme="http://yoursite.com/tags/%E6%9C%BA%E6%A2%B0%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>2019年，未来的你怎么样了</title>
    <link href="http://yoursite.com/2019/02/08/%E4%BB%8A%E5%A4%A9%E8%81%8A%E8%81%8A%E6%A2%A6%E6%83%B3/"/>
    <id>http://yoursite.com/2019/02/08/今天聊聊梦想/</id>
    <published>2019-02-08T14:11:38.000Z</published>
    <updated>2019-03-05T07:49:29.616Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>平淡的生活里，最怕不是没有斗志，而是像《无问西东》里说得那样，把自己置身于忙碌当中，有一种麻木的踏实，但丧失了真实……</p></blockquote><p><img src="https://s2.ax1x.com/2019/03/05/kXvYY8.png" alt="kXvYY8.png"></p><p>很久没有通过文字和自己对话了，而时间不知不觉却已来到了2019年。无论内心汹涌澎湃还是波澜不惊，都抵不住日历一页页得翩跹而逝。在时间面前，众生平等，而任何微小的差异经过时间的放大，每个人的人生各自划过不同的轨迹，律动不同的音符。每当独处时，当音乐停止，我对眼前是世界依然是一无所知。</p><p>2018从某种意义上是改变和收获的一年。开始看电子书，开始打字写文章，开始不断学习编程，开始健身，开始重新热爱足球。这些之前我都不曾做过的事情，在2018年变得稀松平常了。我曾固执的认为电子书永远没有纸质书籍让我读起来有感觉，我曾因为机械专业的禁锢对编程拒之门外，我也曾因为喜欢跑步尤其是徜徉在威海的环海路跑步无数次拒绝去健身房撸铁，而改变都在悄然发生着。我通过电子书籍更快的获取营养，借助博客更好的练习表达能力，而健身让我的瘦弱的身体渐渐变得强壮，俄罗斯世界杯让我重燃对足球的热爱。有时我不禁问自己，改变好像也不难，但是你能坚持多久呢？</p><p>成功也不难，高中化学老师说过，不过“专注”二字。何其难，何其难，对于我这个对所有事物保持好奇而只有三分钟热度的人来说，成功还有我的一席之地吗？高考的失败在于没有持续努力，保研的苦果在于固执和缺乏沟通，每当在人生的转折点，我都会突然迷失，而今年我又面临着似乎更重要的抉择——就业。</p><p>乱花渐欲迷人眼，周遭的太多新奇和诱惑，我总是在一些事物中来回切换，而没有一直专注于一件事，这样导致了大量时间在重复曾经熟悉的东西而没有更深入地学习，吉他，编程，cv，dota等等都是如此，我希望自己能专注于一个点深入下去一探究竟，而不是大包大揽得学习很多表层的东西。表层的东西只要付出少量的时间成本就能够获得，深层的东西才是值得去挖掘的，而深层的获得需要日积月累得表层知识的铺垫，让理性逐渐渗透进感性，感觉就来了。能够有C罗的自律可能是一种奢望，但是我希望自己在没有很高天赋的情况下，能够自律得去面对生活，每当生活的很舒服的时候，我却常常惴惴不安，似乎只有辛勤的开垦才能让一天充满幸福，我不知道这是不是穷人的思维。然而麻木的踏实也是自我欺骗，这样并不能收获真实的快乐。</p><p>现在先坚持学习编程，吉他和健身，至于时间会将我带向哪里，在浪潮中去翻涌吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;平淡的生活里，最怕不是没有斗志，而是像《无问西东》里说得那样，把自己置身于忙碌当中，有一种麻木的踏实，但丧失了真实……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/03/05/kX
      
    
    </summary>
    
      <category term="杂记" scheme="http://yoursite.com/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="杂记" scheme="http://yoursite.com/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>操作像素的14中方法</title>
    <link href="http://yoursite.com/2019/02/02/%E6%93%8D%E4%BD%9C%E5%83%8F%E7%B4%A0%E7%9A%8414%E4%B8%AD%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/02/02/操作像素的14中方法/</id>
    <published>2019-02-02T14:00:24.000Z</published>
    <updated>2019-02-02T14:17:48.392Z</updated>
    
    <content type="html"><![CDATA[<p>​OpenCV是我研途中重点打交道的工具库。教研室流传下来的图像处理程序都是基于OpenCV1的code，那更底层，更多指针与结构体。而如今OpenCV4都已经更新了，C++强调接口的实用是大势所趋，用到什么去看相关的函数即可。这半年的学习让我深刻体会到线性学习的弊端和不足，这也是研究生主要看论文而本科生主要以课本为主的原因，链式学习更能快速打通各个学科之间的交叉与联系，保证学习的效率。</p><p>今天记录一下操作元素的思路。课题中的图像处理往往是通过各种方法提取到边缘后扫点，将点储存在容器中再拟合圆或者直线。如何快速扫描像素呢，国外的一本书中给出了14中不同的方式。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------------------【宏定义部分】---------------------------------------------</span></span><br><span class="line"><span class="comment">//        描述：包含程序所使用宏定义</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTESTS 14</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NITERATIONS 20</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------------------- 【方法一】-------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用.ptr 和 []</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce0</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> nl= image.rows; <span class="comment">//行数</span></span><br><span class="line">      <span class="keyword">int</span> nc= image.cols * image.channels(); <span class="comment">//每行元素的总元素数量</span></span><br><span class="line">              </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nl; j++)</span><br><span class="line">      &#123;</span><br><span class="line"></span><br><span class="line">          uchar* data= image.ptr&lt;uchar&gt;(j);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nc; i++)</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line">                 </span><br><span class="line">                  data[i]= data[i]/div*div + div/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">            &#125; <span class="comment">//单行处理结束                  </span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------------------------【方法二】-------------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用 .ptr 和 * ++</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce1</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> nl= image.rows; <span class="comment">//行数</span></span><br><span class="line">      <span class="keyword">int</span> nc= image.cols * image.channels(); <span class="comment">//每行元素的总元素数量</span></span><br><span class="line">              </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nl; j++)</span><br><span class="line">      &#123;</span><br><span class="line"></span><br><span class="line">          uchar* data= image.ptr&lt;uchar&gt;(j);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nc; i++)</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line">                 </span><br><span class="line">                 *data++= *data/div*div + div/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">            &#125; <span class="comment">//单行处理结束              </span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------------------------------【方法三】-------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用.ptr 和 * ++ 以及模操作</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce2</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> nl= image.rows; <span class="comment">//行数</span></span><br><span class="line">      <span class="keyword">int</span> nc= image.cols * image.channels(); <span class="comment">//每行元素的总元素数量</span></span><br><span class="line">              </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nl; j++)</span><br><span class="line">      &#123;</span><br><span class="line"></span><br><span class="line">          uchar* data= image.ptr&lt;uchar&gt;(j);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nc; i++)</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line">       </span><br><span class="line">                  <span class="keyword">int</span> v= *data;</span><br><span class="line">                  *data++= v - v%div + div/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">            &#125; <span class="comment">//单行处理结束                   </span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------------------【方法四】---------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用.ptr 和 * ++ 以及位操作</span></span><br><span class="line"><span class="comment">//----------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce3</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> nl= image.rows; <span class="comment">//行数</span></span><br><span class="line">      <span class="keyword">int</span> nc= image.cols * image.channels(); <span class="comment">//每行元素的总元素数量</span></span><br><span class="line">      <span class="keyword">int</span> n= <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="built_in">log</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(div))/<span class="built_in">log</span>(<span class="number">2.0</span>));</span><br><span class="line">      <span class="comment">//掩码值</span></span><br><span class="line">      uchar mask= <span class="number">0xFF</span>&lt;&lt;n; <span class="comment">// e.g. 对于 div=16, mask= 0xF0</span></span><br><span class="line">              </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nl; j++) &#123;</span><br><span class="line"></span><br><span class="line">          uchar* data= image.ptr&lt;uchar&gt;(j);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nc; i++) &#123;</span><br><span class="line">            <span class="comment">//------------开始处理每个像素-------------------</span></span><br><span class="line">                 </span><br><span class="line">            *data++= *data&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">            &#125;  <span class="comment">//单行处理结束            </span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------------------【方法五】----------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用指针算术运算</span></span><br><span class="line"><span class="comment">//---------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce4</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> nl= image.rows; <span class="comment">//行数</span></span><br><span class="line">      <span class="keyword">int</span> nc= image.cols * image.channels(); <span class="comment">//每行元素的总元素数量</span></span><br><span class="line">      <span class="keyword">int</span> n= <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="built_in">log</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(div))/<span class="built_in">log</span>(<span class="number">2.0</span>));</span><br><span class="line">      <span class="keyword">int</span> step= image.step; <span class="comment">//有效宽度</span></span><br><span class="line">      <span class="comment">//掩码值</span></span><br><span class="line">      uchar mask= <span class="number">0xFF</span>&lt;&lt;n; <span class="comment">// e.g. 对于 div=16, mask= 0xF0</span></span><br><span class="line">              </span><br><span class="line">      <span class="comment">//获取指向图像缓冲区的指针</span></span><br><span class="line">      uchar *data= image.data;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nl; j++)</span><br><span class="line">      &#123;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nc; i++)</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line">                 </span><br><span class="line">            *(data+i)= *data&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">            &#125; <span class="comment">//单行处理结束              </span></span><br><span class="line"></span><br><span class="line">            data+= step;  <span class="comment">// next line</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------------------------【方法六】----------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用 .ptr 和 * ++以及位运算、image.cols * image.channels()</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce5</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> nl= image.rows; <span class="comment">//行数</span></span><br><span class="line">      <span class="keyword">int</span> n= <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="built_in">log</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(div))/<span class="built_in">log</span>(<span class="number">2.0</span>));</span><br><span class="line">      <span class="comment">//掩码值</span></span><br><span class="line">      uchar mask= <span class="number">0xFF</span>&lt;&lt;n; <span class="comment">// e.g. 例如div=16, mask= 0xF0</span></span><br><span class="line">              </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nl; j++)</span><br><span class="line">      &#123;</span><br><span class="line"></span><br><span class="line">          uchar* data= image.ptr&lt;uchar&gt;(j);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;image.cols * image.channels(); i++)</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line">                 </span><br><span class="line">            *data++= *data&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">            &#125; <span class="comment">//单行处理结束            </span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// -------------------------------------【方法七】----------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用.ptr 和 * ++ 以及位运算(continuous)</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce6</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> nl= image.rows; <span class="comment">//行数</span></span><br><span class="line">      <span class="keyword">int</span> nc= image.cols * image.channels(); <span class="comment">//每行元素的总元素数量</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (image.isContinuous())  </span><br><span class="line">      &#123;</span><br><span class="line">          <span class="comment">//无填充像素</span></span><br><span class="line">          nc= nc*nl;</span><br><span class="line">          nl= <span class="number">1</span>;  <span class="comment">// 为一维数列</span></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> n= <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="built_in">log</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(div))/<span class="built_in">log</span>(<span class="number">2.0</span>));</span><br><span class="line">      <span class="comment">//掩码值</span></span><br><span class="line">      uchar mask= <span class="number">0xFF</span>&lt;&lt;n; <span class="comment">// e.g. 比如div=16, mask= 0xF0</span></span><br><span class="line">              </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nl; j++) &#123;</span><br><span class="line"></span><br><span class="line">          uchar* data= image.ptr&lt;uchar&gt;(j);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nc; i++) &#123;</span><br><span class="line">            <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line">                 </span><br><span class="line">            *data++= *data&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">            &#125; <span class="comment">//单行处理结束                   </span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------【方法八】------------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用 .ptr 和 * ++ 以及位运算 (continuous+channels)</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce7</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> nl= image.rows; <span class="comment">//行数</span></span><br><span class="line">      <span class="keyword">int</span> nc= image.cols ; <span class="comment">//列数</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (image.isContinuous())  </span><br><span class="line">      &#123;</span><br><span class="line">          <span class="comment">//无填充像素</span></span><br><span class="line">          nc= nc*nl;</span><br><span class="line">          nl= <span class="number">1</span>;  <span class="comment">// 为一维数组</span></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> n= <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="built_in">log</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(div))/<span class="built_in">log</span>(<span class="number">2.0</span>));</span><br><span class="line">      <span class="comment">//掩码值</span></span><br><span class="line">      uchar mask= <span class="number">0xFF</span>&lt;&lt;n; <span class="comment">// e.g. 比如div=16, mask= 0xF0</span></span><br><span class="line">              </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nl; j++) &#123;</span><br><span class="line"></span><br><span class="line">          uchar* data= image.ptr&lt;uchar&gt;(j);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nc; i++) &#123;</span><br><span class="line">            <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line">                 </span><br><span class="line">            *data++= *data&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">            *data++= *data&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">            *data++= *data&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">            &#125; <span class="comment">//单行处理结束                    </span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// -----------------------------------【方法九】 ------------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用Mat_ iterator</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce8</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//获取迭代器</span></span><br><span class="line">      Mat_&lt;Vec3b&gt;::iterator it= image.begin&lt;Vec3b&gt;();</span><br><span class="line">      Mat_&lt;Vec3b&gt;::iterator itend= image.end&lt;Vec3b&gt;();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> ( ; it!= itend; ++it) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line"></span><br><span class="line">        (*it)[<span class="number">0</span>]= (*it)[<span class="number">0</span>]/div*div + div/<span class="number">2</span>;</span><br><span class="line">        (*it)[<span class="number">1</span>]= (*it)[<span class="number">1</span>]/div*div + div/<span class="number">2</span>;</span><br><span class="line">        (*it)[<span class="number">2</span>]= (*it)[<span class="number">2</span>]/div*div + div/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">      &#125;<span class="comment">//单行处理结束  </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------------【方法十】-----------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用Mat_ iterator以及位运算</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce9</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// div必须是2的幂</span></span><br><span class="line">      <span class="keyword">int</span> n= <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="built_in">log</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(div))/<span class="built_in">log</span>(<span class="number">2.0</span>));</span><br><span class="line">      <span class="comment">//掩码值</span></span><br><span class="line">      uchar mask= <span class="number">0xFF</span>&lt;&lt;n; <span class="comment">// e.g. 比如 div=16, mask= 0xF0</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 获取迭代器</span></span><br><span class="line">      Mat_&lt;Vec3b&gt;::iterator it= image.begin&lt;Vec3b&gt;();</span><br><span class="line">      Mat_&lt;Vec3b&gt;::iterator itend= image.end&lt;Vec3b&gt;();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//扫描所有元素</span></span><br><span class="line">      <span class="keyword">for</span> ( ; it!= itend; ++it)</span><br><span class="line">      &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line"></span><br><span class="line">        (*it)[<span class="number">0</span>]= (*it)[<span class="number">0</span>]&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">        (*it)[<span class="number">1</span>]= (*it)[<span class="number">1</span>]&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">        (*it)[<span class="number">2</span>]= (*it)[<span class="number">2</span>]&amp;mask + div/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">      &#125;<span class="comment">//单行处理结束  </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------【方法十一】---------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用Mat Iterator_</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce10</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//获取迭代器</span></span><br><span class="line">      Mat_&lt;Vec3b&gt; cimage= image;</span><br><span class="line">      Mat_&lt;Vec3b&gt;::iterator it=cimage.begin();</span><br><span class="line">      Mat_&lt;Vec3b&gt;::iterator itend=cimage.end();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> ( ; it!= itend; it++) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line"></span><br><span class="line">        (*it)[<span class="number">0</span>]= (*it)[<span class="number">0</span>]/div*div + div/<span class="number">2</span>;</span><br><span class="line">        (*it)[<span class="number">1</span>]= (*it)[<span class="number">1</span>]/div*div + div/<span class="number">2</span>;</span><br><span class="line">        (*it)[<span class="number">2</span>]= (*it)[<span class="number">2</span>]/div*div + div/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------------------【方法十二】--------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用动态地址计算配合at</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce11</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> nl= image.rows; <span class="comment">//行数</span></span><br><span class="line">      <span class="keyword">int</span> nc= image.cols; <span class="comment">//列数</span></span><br><span class="line">              </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nl; j++)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nc; i++)</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line">                 </span><br><span class="line">                  image.at&lt;Vec3b&gt;(j,i)[<span class="number">0</span>]=     image.at&lt;Vec3b&gt;(j,i)[<span class="number">0</span>]/div*div + div/<span class="number">2</span>;</span><br><span class="line">                  image.at&lt;Vec3b&gt;(j,i)[<span class="number">1</span>]=     image.at&lt;Vec3b&gt;(j,i)[<span class="number">1</span>]/div*div + div/<span class="number">2</span>;</span><br><span class="line">                  image.at&lt;Vec3b&gt;(j,i)[<span class="number">2</span>]=     image.at&lt;Vec3b&gt;(j,i)[<span class="number">2</span>]/div*div + div/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">            &#125; <span class="comment">//单行处理结束                 </span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------------【方法十三】-----------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用图像的输入与输出</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce12</span><span class="params">(<span class="keyword">const</span> Mat &amp;image, <span class="comment">//输入图像</span></span></span></span><br><span class="line"><span class="function"><span class="params">                 Mat &amp;result,      <span class="comment">// 输出图像</span></span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> nl= image.rows; <span class="comment">//行数</span></span><br><span class="line">      <span class="keyword">int</span> nc= image.cols ; <span class="comment">//列数</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//准备好初始化后的Mat给输出图像</span></span><br><span class="line">      result.create(image.rows,image.cols,image.type());</span><br><span class="line"></span><br><span class="line">      <span class="comment">//创建无像素填充的图像</span></span><br><span class="line">      nc= nc*nl;</span><br><span class="line">      nl= <span class="number">1</span>;  <span class="comment">//单维数组</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> n= <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="built_in">log</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(div))/<span class="built_in">log</span>(<span class="number">2.0</span>));</span><br><span class="line">      <span class="comment">//掩码值</span></span><br><span class="line">      uchar mask= <span class="number">0xFF</span>&lt;&lt;n; <span class="comment">// e.g.比如div=16, mask= 0xF0</span></span><br><span class="line">              </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nl; j++) &#123;</span><br><span class="line"></span><br><span class="line">          uchar* data= result.ptr&lt;uchar&gt;(j);</span><br><span class="line">          <span class="keyword">const</span> uchar* idata= image.ptr&lt;uchar&gt;(j);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nc; i++) &#123;</span><br><span class="line">            <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line">                 </span><br><span class="line">            *data++= (*idata++)&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">            *data++= (*idata++)&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">            *data++= (*idata++)&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">          &#125; <span class="comment">//单行处理结束                   </span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------------------【方法十四】-------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用操作符重载</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce13</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">int</span> n= <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="built_in">log</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(div))/<span class="built_in">log</span>(<span class="number">2.0</span>));</span><br><span class="line">      <span class="comment">//掩码值</span></span><br><span class="line">      uchar mask= <span class="number">0xFF</span>&lt;&lt;n; <span class="comment">// e.g. 比如div=16, mask= 0xF0</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//进行色彩还原</span></span><br><span class="line">      image=(image&amp;Scalar(mask,mask,mask))+Scalar(div/<span class="number">2</span>,div/<span class="number">2</span>,div/<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------------------------【main( )函数】--------------------------------------------</span></span><br><span class="line"><span class="comment">//        描述：控制台应用程序的入口函数，我们的程序从这里开始</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    int64 t[NTESTS],tinit;</span><br><span class="line">    Mat image0;</span><br><span class="line">    Mat image1;</span><br><span class="line">    Mat image2;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">"color 4F"</span>);</span><br><span class="line"></span><br><span class="line">    image0= imread(<span class="string">"1.png"</span>);</span><br><span class="line">    <span class="keyword">if</span> (!image0.data)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//时间值设为0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;NTESTS; i++)</span><br><span class="line">        t[i]= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 多次重复测试</span></span><br><span class="line">    <span class="keyword">int</span> n=NITERATIONS;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;n; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; k &lt;&lt; <span class="string">" of "</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        <span class="comment">//【方法一】利用.ptr 和 []</span></span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce0(image1);</span><br><span class="line">        t[<span class="number">0</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法二】利用 .ptr 和 * ++</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce1(image1);</span><br><span class="line">        t[<span class="number">1</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法三】利用.ptr 和 * ++ 以及模操作</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce2(image1);</span><br><span class="line">        t[<span class="number">2</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法四】 利用.ptr 和 * ++ 以及位操作</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce3(image1);</span><br><span class="line">        t[<span class="number">3</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法五】 利用指针的算术运算</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce4(image1);</span><br><span class="line">        t[<span class="number">4</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法六】利用 .ptr 和 * ++以及位运算、image.cols * image.channels()</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce5(image1);</span><br><span class="line">        t[<span class="number">5</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法七】利用.ptr 和 * ++ 以及位运算(continuous)</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce6(image1);</span><br><span class="line">        t[<span class="number">6</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法八】利用 .ptr 和 * ++ 以及位运算 (continuous+channels)</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce7(image1);</span><br><span class="line">        t[<span class="number">7</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法九】 利用Mat_ iterator</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce8(image1);</span><br><span class="line">        t[<span class="number">8</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法十】 利用Mat_ iterator以及位运算</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce9(image1);</span><br><span class="line">        t[<span class="number">9</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法十一】利用Mat Iterator_</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce10(image1);</span><br><span class="line">        t[<span class="number">10</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法十二】 利用动态地址计算配合at</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce11(image1);</span><br><span class="line">        t[<span class="number">11</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法十三】 利用图像的输入与输出</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        Mat result;</span><br><span class="line">        colorReduce12(image1, result);</span><br><span class="line">        t[<span class="number">12</span>]+= getTickCount()-tinit;</span><br><span class="line">        image2= result;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//【方法十四】 利用操作符重载</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce13(image1);</span><br><span class="line">        t[<span class="number">13</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//------------------------------</span></span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">//输出图像   </span></span><br><span class="line">    imshow(<span class="string">"原始图像"</span>,image0);</span><br><span class="line">    imshow(<span class="string">"结果"</span>,image2);</span><br><span class="line">    imshow(<span class="string">"图像结果"</span>,image1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出平均执行时间</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"-------------------------------------------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法一】利用.ptr 和 []的方法所用时间为 "</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">0</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法二】利用 .ptr 和 * ++ 的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">1</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法三】利用.ptr 和 * ++ 以及模操作的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">2</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法四】利用.ptr 和 * ++ 以及位操作的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">3</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法五】利用指针算术运算的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">4</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法六】利用 .ptr 和 * ++以及位运算、channels()的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">5</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法七】利用.ptr 和 * ++ 以及位运算(continuous)的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">6</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法八】利用 .ptr 和 * ++ 以及位运算 (continuous+channels)的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">7</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法九】利用Mat_ iterator 的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">8</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法十】利用Mat_ iterator以及位运算的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">9</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法十一】利用Mat Iterator_的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">10</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法十二】利用动态地址计算配合at 的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">11</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法十三】利用图像的输入与输出的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">12</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法十四】利用操作符重载的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">13</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;    </span><br><span class="line">    </span><br><span class="line">    waitKey();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​	OpenCV是我研途中重点打交道的工具库。教研室流传下来的图像处理程序都是基于OpenCV1的code，那更底层，更多指针与结构体。而如今OpenCV4都已经更新了，C++强调接口的实用是大势所趋，用到什么去看相关的函数即可。这半年的学习让我深刻体会到线性学习的弊端和不
      
    
    </summary>
    
      <category term="OpenCV" scheme="http://yoursite.com/categories/OpenCV/"/>
    
    
      <category term="OpenCV" scheme="http://yoursite.com/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>一款类似于mac-dock栏的windows软件</title>
    <link href="http://yoursite.com/2019/01/28/%E4%B8%80%E6%AC%BE%E7%B1%BB%E4%BC%BC%E4%BA%8Emac-dock%E6%A0%8F%E7%9A%84windows%E8%BD%AF%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/01/28/一款类似于mac-dock栏的windows软件/</id>
    <published>2019-01-28T08:41:17.000Z</published>
    <updated>2022-01-23T07:55:18.738Z</updated>
    
    <content type="html"><![CDATA[<p>原文链接：一款类似于mac-dock栏的windows软件</p><h3 id="一款类似于mac-dock栏的windows软件"><a class="markdownIt-Anchor" href="#一款类似于mac-dock栏的windows软件"></a> 一款类似于mac-dock栏的windows软件</h3><p><a href="https://imgchr.com/i/kXj3PU" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/03/05/kXj3PU.md.png" alt="kXj3PU.md.png"></a><br>软件名称叫 <code>Winstep Nexus Ultimate</code></p><p>软件链接如下：</p><p>链接：<a href="https://www.lanzous.com/i1xnevc" target="_blank" rel="noopener">https://www.lanzous.com/i1xnevc</a>    密码:5vsy</p><h4 id="安装破解方法"><a class="markdownIt-Anchor" href="#安装破解方法"></a> 安装破解方法</h4><ol><li>下载安装Winstep Nexus，安装完成后不要启动</li><li>以管理员权限运行Activation.exe，将其安装到Winstep Nexus默认目录中</li><li>启动Winstep Nexus，输入任意用户名和密钥注册</li><li>重启Winstep Nexus即为激活版</li></ol><p>注：不能更新，如果更新，可重新执2-4步</p><h4 id="效果图"><a class="markdownIt-Anchor" href="#效果图"></a> 效果图</h4><p>这是我的桌面，软件的主题有很多，挑自己喜欢的风格和颜色即可。</p><p><a href="https://imgchr.com/i/kXvZFK" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/03/05/kXvZFK.md.png" alt="kXvZFK.md.png"></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文链接：一款类似于mac-dock栏的windows软件&lt;/p&gt;
&lt;h3 id=&quot;一款类似于mac-dock栏的windows软件&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#一款类似于mac-dock栏的windows软件&quot;&gt;&lt;/a&gt; 一款
      
    
    </summary>
    
      <category term="黑科技" scheme="http://yoursite.com/categories/%E9%BB%91%E7%A7%91%E6%8A%80/"/>
    
    
      <category term="黑科技" scheme="http://yoursite.com/tags/%E9%BB%91%E7%A7%91%E6%8A%80/"/>
    
  </entry>
  
  <entry>
    <title>误差补偿模型</title>
    <link href="http://yoursite.com/2019/01/28/%E8%AF%AF%E5%B7%AE%E8%A1%A5%E5%81%BF%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2019/01/28/误差补偿模型/</id>
    <published>2019-01-28T08:41:17.000Z</published>
    <updated>2019-02-01T09:29:00.462Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>就像来自遥远宇宙的一束光，不知道它从哪里来，也不知道它到哪里去，从我们头上掠过，波澜不惊。</p></blockquote><h3 id="误差来源"><a class="markdownIt-Anchor" href="#误差来源"></a> 误差来源</h3><p>视觉测量误差主要来源有：图像采集误差，相机安装误差，运动平台误差。其中高精度的CCD传感器与图像采集卡的误差微乎其微可以忽略；相机坐标系如果与水平面不共面或共面但是存在夹角都会引入误差；三维运动平台的几何误差的垂直度问题将导致图像处理中的圆心提取和图像拼接，误差需要补偿。</p><h3 id="坐标系转换"><a class="markdownIt-Anchor" href="#坐标系转换"></a> 坐标系转换</h3><p><img src="https://img-blog.csdnimg.cn/20181122134704175.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZseV93dA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol><li>图像坐标系<br><img src="https://img-blog.csdnimg.cn/20181122141206254.png" alt="在这里插入图片描述"><br>图像坐标系建立在CCD传感器的面上如上图。</li><li>视觉坐标系<br><img src="https://img-blog.csdnimg.cn/20181122141220479.png" alt="在这里插入图片描述"></li><li>装配作业坐标系<br>与视觉坐标系建系相同<br><img src="https://img-blog.csdnimg.cn/20181122141449212.png" alt="在这里插入图片描述"></li><li>世界坐标系<br>世界坐标系是空间绝对坐标系，选取视觉坐标为世界坐标系即可</li></ol><h3 id="转换"><a class="markdownIt-Anchor" href="#转换"></a> 转换</h3><p>各坐标系的空间位置如图所示，三维运动平台中X轴和Y轴滑台不垂直，YV0和YC0为实际的Y轴滑台运动方向。图像坐标系UOV与世界坐标系XWOYW之间的夹角为θ，以世界坐标系XW轴为基准，图像U轴向世界坐标系Y轴正方向偏转为正，反之为负。视觉测量模块三维运动平台X轴与YV0轴滑台之间的夹角为α。世界坐标系和装配作业坐标系XCOYC之间的夹角为φ，以世界坐标系X轴为基准，装配作业坐标系X轴向世界坐标系Y轴正方向偏转为正，反之为负。装配作业模块三维运动平台X轴与YC0轴滑台之间夹角为β。<br><img src="https://img-blog.csdnimg.cn/20190113194541759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZseV93dA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>根据坐标系之间的坐标转换关系建立误差补偿模型，以图像中一点为例，分别将其从图像坐标系装换到世界坐标系和装配作业坐标系中。<br>首先完成由图像坐标系向世界坐标系的转换，设图像中一点（u，v），其在世界坐标系中的坐标为（x，y），由于图像坐标系单位为像素，世界坐标系单位为微米，单位转换关系为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable side="right"><mlabeledtr><mtd><mtext>(1)</mtext></mtd><mtd><mrow><mi>P</mi><mo>=</mo><mrow><mo fence="true">{</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">​</mi><msub><mi>u</mi><mn>0</mn></msub><mo>=</mo><mi>u</mi><mo>×</mo><msub><mi>S</mi><mi>x</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">​</mi><msub><mi>v</mi><mn>0</mn></msub><mo>=</mo><mi>v</mi><mo>×</mo><msub><mi>S</mi><mi>y</mi></msub><mi mathvariant="normal">​</mi></mrow></mstyle></mtd></mtr></mtable></mrow><mi mathvariant="normal">​</mi></mrow></mtd></mlabeledtr></mtable><annotation encoding="application/x-tex">P=\begin{cases} ​u_0=u \times S_x\\ ​v_0=v \times S_y​\end{cases} \tag{1}​</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">​</span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">​</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord">​</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">​</span></span><span class="tag"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">1</span></span><span class="mord">)</span></span></span></span></span></span></p><p>相应的矩阵形式<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>M</mi><mi>s</mi></msub></mrow><annotation encoding="application/x-tex">M_s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable side="right"><mlabeledtr><mtd><mtext>(2)</mtext></mtd><mtd><mrow><msub><mi>M</mi><mi>s</mi></msub><mo>=</mo><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>S</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>S</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow></mtd></mlabeledtr></mtable><annotation encoding="application/x-tex">M_s= \begin{bmatrix}   S_x &amp; 0 &amp; 0 \\   0&amp; S_y &amp; 0 \\  0 &amp; 0 &amp; 1  \end{bmatrix} \tag{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span><span class="tag"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">2</span></span><span class="mord">)</span></span></span></span></span></span></p><p>图像坐标系和世界坐标系坐标轴之间存在夹角θ，需对图像坐标系进行旋转，旋转矩阵<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>M</mi><mi>R</mi></msub></mrow><annotation encoding="application/x-tex">M_R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable side="right"><mlabeledtr><mtd><mtext>(3)</mtext></mtd><mtd><mrow><msub><mi>M</mi><mi>R</mi></msub><mo>=</mo><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow></mtd></mlabeledtr></mtable><annotation encoding="application/x-tex">M_R= \begin{bmatrix}  cos\theta &amp; -sin\theta &amp; 0 \\  sin\theta&amp; cos\theta&amp; 0 \\  0 &amp; 0 &amp; 1  \end{bmatrix} \tag{3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span><span class="tag"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">3</span></span><span class="mord">)</span></span></span></span></span></span></p><p>采集过程中相机会变换采集位置，应该对图像坐标系原点和世界坐标系原点之间的距离进行补偿，需要进行平移变换，相应的平移变换矩阵<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>M</mi><mi>T</mi></msub></mrow><annotation encoding="application/x-tex">M_T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable side="right"><mlabeledtr><mtd><mtext>(4)</mtext></mtd><mtd><mrow><msub><mi>M</mi><mi>T</mi></msub><mo>=</mo><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>D</mi><mi>x</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>D</mi><mi>y</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow></mtd></mlabeledtr></mtable><annotation encoding="application/x-tex">M_T= \begin{bmatrix}  1 &amp; 0 &amp; D_x \\ 0&amp; 1&amp; D_y\\  0 &amp; 0 &amp; 1  \end{bmatrix} \tag{4}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span><span class="tag"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">4</span></span><span class="mord">)</span></span></span></span></span></span></p><p>图像坐标系原点在世界坐标系中的坐标值（Dx，Dy）无法直接获取，从图5.4可知，相机在三维运动平台中XY向滑台位移分别为dx和dy，经计算得出此时相机在世界坐标系的坐标（Dx，Dy），计算公式为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable side="right"><mlabeledtr><mtd><mtext>(5)</mtext></mtd><mtd><mrow><mo fence="true">{</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>D</mi><mi>x</mi></msub><mo>=</mo><msub><mi>d</mi><mi>x</mi></msub><mo>−</mo><msub><mi>d</mi><mi>y</mi></msub><mo>×</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo>(</mo><mi>α</mi><mo>−</mo><mn>9</mn><msup><mn>0</mn><mi>o</mi></msup><mo>)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>D</mi><mi>y</mi></msub><mo>=</mo><msub><mi>d</mi><mi>y</mi></msub><mo>×</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo>(</mo><mi>α</mi><mo>−</mo><mn>9</mn><msup><mn>0</mn><mi>o</mi></msup><mo>)</mo></mrow></mstyle></mtd></mtr></mtable></mrow></mtd></mlabeledtr></mtable><annotation encoding="application/x-tex">\begin{cases} D_x=d_x-d_y \times sin(\alpha-90^o)\\ D_y=d_y \times cos(\alpha-90^o)\end{cases} \tag{5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">9</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">9</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="tag"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">5</span></span><span class="mord">)</span></span></span></span></span></span></p><p>图像中一点（u，v）转换为世界坐标系一点（x，y）的误差补偿模型表达式为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable side="right"><mlabeledtr><mtd><mtext>(6)</mtext></mtd><mtd><mrow><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>d</mi><mi>x</mi></msub><mo>−</mo><msub><mi>d</mi><mi>y</mi></msub><mo>×</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo>(</mo><mi>α</mi><mo>−</mo><mn>9</mn><msup><mn>0</mn><mi>o</mi></msup><mo>)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>d</mi><mi>y</mi></msub><mo>×</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo>(</mo><mi>α</mi><mo>−</mo><mn>9</mn><msup><mn>0</mn><mi>o</mi></msup><mo>)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>S</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>S</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>u</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>v</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow></mtd></mlabeledtr></mtable><annotation encoding="application/x-tex"> \begin{bmatrix}  x \\ y\\  1  \end{bmatrix} =   \begin{bmatrix}  1&amp;0&amp;d_x-d_y \times sin(\alpha-90^o)\\ 0&amp; 1&amp; d_y \times cos(\alpha-90^o)\\  0&amp;0&amp;1  \end{bmatrix}    \begin{bmatrix}  cos\theta &amp; -sin\theta &amp; 0 \\  sin\theta&amp; cos\theta&amp; 0 \\  0 &amp; 0 &amp; 1  \end{bmatrix}   \begin{bmatrix}   S_x &amp; 0 &amp; 0 \\   0&amp; S_y &amp; 0 \\  0 &amp; 0 &amp; 1  \end{bmatrix}    \begin{bmatrix}  u\\v\\  1  \end{bmatrix} \tag{6}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">9</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">9</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">u</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span><span class="tag"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">6</span></span><span class="mord">)</span></span></span></span></span></span></p><p>得到零件在世界坐标系中的坐标后，装配作业模块夹持壳体完成对正。由于世界坐标系和装配作业坐标系之间存在夹角，并且装配作业模块XY滑台不垂直，需要进行误差补偿。<br>装配过程仅需获取两个零件圆心的相对位置，不要求零件的绝对位置。可直接建立相对位置转换的误差补偿模型。设两零件在世界坐标系中的距离为（ΔX，ΔY），转换到装配作业坐标系后坐标为（ΔXC，ΔYC）。<br>首先对世界坐标系进行旋转补偿夹角φ，旋转矩阵<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>M</mi><mi>R</mi></msub></mrow><annotation encoding="application/x-tex">M_R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable side="right"><mlabeledtr><mtd><mtext>(7)</mtext></mtd><mtd><mrow><msub><mi>M</mi><mi>R</mi></msub><mo>=</mo><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>φ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mi>φ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>φ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>φ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow></mtd></mlabeledtr></mtable><annotation encoding="application/x-tex">M_R=   \begin{bmatrix}  cos\varphi &amp; sin\varphi &amp; 0\\  -sin\varphi &amp; cos\varphi &amp; 0\\0 &amp; 0&amp; 1  \end{bmatrix} \tag{7}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">φ</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">φ</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">φ</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">φ</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span><span class="tag"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">7</span></span><span class="mord">)</span></span></span></span></span></span></p><p>旋转变换之后得到两个圆心在装配作业坐标系中的坐标差，由于装配作业模块XY向滑台不垂直，需要计算出XY滑台应该补偿的实际距离，转换矩阵<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>M</mi><mi>D</mi></msub></mrow><annotation encoding="application/x-tex">M_D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable side="right"><mlabeledtr><mtd><mtext>(8)</mtext></mtd><mtd><mrow><msub><mi>M</mi><mi>D</mi></msub><mo>=</mo><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>t</mi><mi>a</mi><mi>n</mi><mo>(</mo><mi>β</mi><mo>−</mo><mn>9</mn><msup><mn>0</mn><mi>o</mi></msup><mo>)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>s</mi><mi>e</mi><mi>c</mi><mo>(</mo><mi>β</mi><mo>−</mo><mn>9</mn><msup><mn>0</mn><mi>o</mi></msup><mo>)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow></mtd></mlabeledtr></mtable><annotation encoding="application/x-tex">M_D=\begin{bmatrix}1 &amp; tan(\beta-90^o) &amp; 0\\0 &amp; sec(\beta-90^o) &amp; 0 \\0 &amp; 0 &amp;1\end{bmatrix} \tag{8}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">9</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">9</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span><span class="tag"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">8</span></span><span class="mord">)</span></span></span></span></span></span></p><p>零件圆心世界坐标系中的坐标差转换到装配作业坐标系中，并计算出实际的XY滑台补偿位移量（ΔXC0，ΔYC0）误差补偿模型的矩阵表达式为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable side="right"><mlabeledtr><mtd><mtext>(9)</mtext></mtd><mtd><mrow><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">Δ</mi><msub><mi>X</mi><mrow><mi>C</mi><mi>O</mi></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">Δ</mi><msub><mi>Y</mi><mrow><mi>C</mi><mi>O</mi></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>t</mi><mi>a</mi><mi>n</mi><mo>(</mo><mi>β</mi><mo>−</mo><mn>9</mn><msup><mn>0</mn><mi>o</mi></msup><mo>)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>s</mi><mi>e</mi><mi>c</mi><mo>(</mo><mi>β</mi><mo>−</mo><mn>9</mn><msup><mn>0</mn><mi>o</mi></msup><mo>)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>φ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mi>φ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>φ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>φ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">Δ</mi><mi>X</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">Δ</mi><mi>Y</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow></mtd></mlabeledtr></mtable><annotation encoding="application/x-tex"> \begin{bmatrix}  \Delta X_{CO} \\   \Delta Y_{CO} \\  1  \end{bmatrix} =   \begin{bmatrix}1 &amp; tan(\beta-90^o) &amp; 0\\0 &amp; sec(\beta-90^o) &amp; 0 \\0 &amp; 0 &amp;1\end{bmatrix}   \begin{bmatrix}  cos\varphi &amp; sin\varphi &amp; 0\\  -sin\varphi &amp; cos\varphi &amp; 0\\0 &amp; 0&amp; 1  \end{bmatrix}   \begin{bmatrix}  \Delta X\\   \Delta Y\\  1  \end{bmatrix} \tag{9}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">Δ</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">O</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">Δ</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">O</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">9</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">9</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">φ</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">φ</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">φ</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">φ</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">Δ</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">Δ</span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span><span class="tag"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">9</span></span><span class="mord">)</span></span></span></span></span></span></p><p>终于敲完了，latex确实很好用，矩阵书写很方便，坚持用Markdown来写博客！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;就像来自遥远宇宙的一束光，不知道它从哪里来，也不知道它到哪里去，从我们头上掠过，波澜不惊。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;误差来源&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#误差来源&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="Computer Vision" scheme="http://yoursite.com/categories/Computer-Vision/"/>
    
    
      <category term="坐标转换" scheme="http://yoursite.com/tags/%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2/"/>
    
      <category term="camera calibrate" scheme="http://yoursite.com/tags/camera-calibrate/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="http://yoursite.com/2019/01/27/hello-world/"/>
    <id>http://yoursite.com/2019/01/27/hello-world/</id>
    <published>2019-01-26T16:00:00.000Z</published>
    <updated>2019-01-29T05:25:15.170Z</updated>
    
    <content type="html"><![CDATA[<p>终于搭建成功了个人网站，愿君乘风破浪，不枉满腔赤诚！</p><h2 id="常用操作"><a class="markdownIt-Anchor" href="#常用操作"></a> 常用操作</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>生成一篇新的博客，然后选用一款<code>markdown</code>编辑器进行编辑即可</p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><p>这条语句经常用来本地测试博客的更改情况和效果。</p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>生成文件</p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>部署到服务器</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;终于搭建成功了个人网站，愿君乘风破浪，不枉满腔赤诚！&lt;/p&gt;
&lt;h2 id=&quot;常用操作&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#常用操作&quot;&gt;&lt;/a&gt; 常用操作&lt;/h2&gt;
&lt;h3 id=&quot;create-a-new-post&quot;&gt;&lt;a class
      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
