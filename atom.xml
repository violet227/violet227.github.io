<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>量子孤岛</title>
  
  <subtitle>王 韬</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-22T13:37:45.437Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>孤岛violet</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>QtMouse</title>
    <link href="http://yoursite.com/2019/08/22/QtMouse/"/>
    <id>http://yoursite.com/2019/08/22/QtMouse/</id>
    <published>2019-08-22T12:21:06.000Z</published>
    <updated>2019-08-22T13:37:45.437Z</updated>
    
    <content type="html"><![CDATA[<h1 id="打地鼠项目"><a class="markdownIt-Anchor" href="#打地鼠项目"></a> 打地鼠项目</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;打地鼠项目&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#打地鼠项目&quot;&gt;&lt;/a&gt; 打地鼠项目&lt;/h1&gt;

      
    
    </summary>
    
      <category term="Projects" scheme="http://yoursite.com/categories/Projects/"/>
    
    
      <category term="Qt" scheme="http://yoursite.com/tags/Qt/"/>
    
  </entry>
  
  <entry>
    <title>pytorch yolo</title>
    <link href="http://yoursite.com/2019/08/03/pytorch-yolo/"/>
    <id>http://yoursite.com/2019/08/03/pytorch-yolo/</id>
    <published>2019-08-03T13:50:36.000Z</published>
    <updated>2019-08-03T14:01:27.951Z</updated>
    
    <content type="html"><![CDATA[<p>在正式介绍 YOLOv3 之前, 我们先将其和 YOLO 的其他版本做一个简单的比较, 它们的网络结构对比如下所示:</p><p>模型实现总共会分为以下六部分:</p><ul><li>(一) 配置文件以及解析</li><li>(二) 搭建YOLO模型框架</li><li>(三) 实现自定义网络层的前向和反向传播过程</li><li>(四) 数据类的设计与实现</li><li>(五) 训练/测试/检测脚本的实现</li><li>(六) 辅助函数及算法实现(目标函数, NMS算法等)</li></ul><h1 id="一-配置文件以及解析"><a class="markdownIt-Anchor" href="#一-配置文件以及解析"></a> (一) 配置文件以及解析</h1><h2 id="配置文件"><a class="markdownIt-Anchor" href="#配置文件"></a> 配置文件</h2><p>官方代码使用了配置文件来创建网络, <code>cfg</code> 文件中描述了网络的整体结构, 它相当于 caffe 中的 <code>.protxt</code> 文件一样. 我们也将使用官方的 <code>cfg</code> 文件来创建我们的网络.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir config</span><br><span class="line"><span class="built_in">cd</span> config</span><br><span class="line">wget https://raw.githubusercontent.com/pjreddie/darknet/master/cfg/yolov3.cfg</span><br></pre></td></tr></table></figure><p>打开该文件, 将会看到类似于下面的信息:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[convolutional]</span><br><span class="line"><span class="attribute">batch_normalize</span>=1</span><br><span class="line"><span class="attribute">filters</span>=64</span><br><span class="line"><span class="attribute">size</span>=3</span><br><span class="line"><span class="attribute">stride</span>=2</span><br><span class="line"><span class="attribute">pad</span>=1</span><br><span class="line"><span class="attribute">activation</span>=leaky</span><br><span class="line"></span><br><span class="line">[convolutional]</span><br><span class="line"><span class="attribute">batch_normalize</span>=1</span><br><span class="line"><span class="attribute">filters</span>=32</span><br><span class="line"><span class="attribute">size</span>=1</span><br><span class="line"><span class="attribute">stride</span>=1</span><br><span class="line"><span class="attribute">pad</span>=1</span><br><span class="line"><span class="attribute">activation</span>=leaky</span><br><span class="line"></span><br><span class="line">[convolutional]</span><br><span class="line"><span class="attribute">batch_normalize</span>=1</span><br><span class="line"><span class="attribute">filters</span>=64</span><br><span class="line"><span class="attribute">size</span>=3</span><br><span class="line"><span class="attribute">stride</span>=1</span><br><span class="line"><span class="attribute">pad</span>=1</span><br><span class="line"><span class="attribute">activation</span>=leaky</span><br><span class="line"></span><br><span class="line">[shortcut]</span><br><span class="line"><span class="attribute">from</span>=-3</span><br><span class="line"><span class="attribute">activation</span>=linear</span><br><span class="line"><span class="built_in">..</span>.</span><br></pre></td></tr></table></figure><h3 id="convolutional-和-shortcut"><a class="markdownIt-Anchor" href="#convolutional-和-shortcut"></a> convolutional 和 shortcut</h3><p>上面的信息中显示了4个 block, 其中 3 个是卷积网络层, 最后一个是 shortcut 网络层, shortcut 网络层是一种 skip connection, 就像 ResNet 中的一样, 其中的 <code>from</code> 参数为 <code>-3</code> 表示该层的输出是从往前数倒数第三层的图谱 <strong>直接相加</strong> 得到的.</p><h3 id="upsample"><a class="markdownIt-Anchor" href="#upsample"></a> upsample</h3><p><code>cfg</code>文件中的 <code>upsample</code> 参数代表了双线性插值时使用的 <code>stride</code> 参数</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[upsample]</span></span><br><span class="line"><span class="attr">stride</span>=<span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="route"><a class="markdownIt-Anchor" href="#route"></a> route</h3><p><code>route</code> 参数拥有 <code>layers</code> 属性, 它的值可以是一个, 也可以是两个, 如下所示. 当 <code>layers</code> 属性只含有一个值时, 它会输出指定的网络层的特征图谱, 在下面的例子中, <code>layers=-4</code>, 因此, 当前的 <code>route</code> 网络层会输出前面的倒数第 4 个网络层的特征图谱. 当 <code>layers</code> 属性含有两个值时, 它会输出两个网络层的特征图谱连接(concatenated)后的特征图谱, 在下面的例子中, 当前的 <code>route</code> 网络层会将前一层(-1)和第 61 层的特征图片沿着深度维度(depth dimension)进行连接(concatenated), 然后输出连接后的特征图谱.</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[route]</span></span><br><span class="line"><span class="attr">layers</span> = -<span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="section">[route]</span></span><br><span class="line"><span class="attr">layers</span> = -<span class="number">1</span>, <span class="number">61</span></span><br></pre></td></tr></table></figure><h3 id="net"><a class="markdownIt-Anchor" href="#net"></a> net</h3><p><code>cfg</code> 文件中的另一种 block 类型是 <code>net</code>, 它提供了网络的训练信息, 如下所示:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[net]</span></span><br><span class="line"><span class="comment"># Testing</span></span><br><span class="line"><span class="attr">batch</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">subdivisions</span>=<span class="number">1</span></span><br><span class="line"><span class="comment"># Training</span></span><br><span class="line"><span class="comment"># batch=64</span></span><br><span class="line"><span class="comment"># subdivisions=16</span></span><br><span class="line"><span class="attr">width</span>= <span class="number">320</span></span><br><span class="line"><span class="attr">height</span> = <span class="number">320</span></span><br><span class="line"><span class="attr">channels</span>=<span class="number">3</span></span><br><span class="line"><span class="attr">momentum</span>=<span class="number">0.9</span></span><br><span class="line"><span class="attr">decay</span>=<span class="number">0.0005</span></span><br><span class="line"><span class="attr">angle</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">saturation</span> = <span class="number">1.5</span></span><br><span class="line"><span class="attr">exposure</span> = <span class="number">1.5</span></span><br><span class="line"><span class="attr">hue</span>=.<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="解析配置文件"><a class="markdownIt-Anchor" href="#解析配置文件"></a> 解析配置文件</h2><p>我们定义了一个名为 <code>parse_config.py</code> 的文件, 其内部的 <code>parse_model_config()</code> 函数的参数是指定的 <code>cfg</code> 的文件路径, 它的功能是将 <code>cfg</code> 文件中的信息加载到模型中, 并且用 <strong>元素为字典的列表</strong> 的形式进行存储, 如下所示:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./utils/parse_config.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_model_config</span><span class="params">(path)</span>:</span></span><br><span class="line">    f = open(path, <span class="string">'r'</span>) <span class="comment">#读取文件</span></span><br><span class="line">    module_defs = [] <span class="comment"># 创建列表, 列表中的元素为字典</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines(): <span class="comment"># 逐行读取</span></span><br><span class="line">        line = line.strip() <span class="comment"># 消除行头尾的空白符(空格, 回车等)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> line <span class="keyword">or</span> line.startswith(<span class="string">'#'</span>): <span class="comment"># 如果遇到空行或者注释行, 则跳过</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> line.startswith(<span class="string">'['</span>):<span class="comment"># 遇到模块的起始, 在列表后添加新的字典</span></span><br><span class="line">            module_defs.append(&#123;&#125;)</span><br><span class="line">            module_defs[<span class="number">-1</span>][<span class="string">'type'</span>] = line[<span class="number">1</span>:<span class="number">-1</span>].strip() <span class="comment"># 根据参数值为字典赋值</span></span><br><span class="line">            <span class="keyword">if</span>(module_defs[<span class="number">-1</span>][<span class="string">'type'</span>]==<span class="string">"convolutional"</span>):</span><br><span class="line">                module_defs[<span class="number">-1</span>][<span class="string">"batch_normalize"</span>] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            key, value = line.split(<span class="string">'='</span>)<span class="comment"># 根据参数值为字典赋值, 注意要去除空白符</span></span><br><span class="line">            module_defs[<span class="number">-1</span>][key.strip()] = value.strip()</span><br><span class="line">    <span class="keyword">return</span> module_defs</span><br></pre></td></tr></table></figure><p>调用该函数后, 会返回一个列表, 列表中的每个元素都是一个字典, 代表了配置文件中的以 <code>[...]</code> 开头的一个 block, 下面是列表中的部分元素示例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">model_config = parse_model_config(<span class="string">"../config/yolov3-tiny.cfg"</span>)</span><br><span class="line">print(model_config[<span class="number">0</span>])</span><br><span class="line">print(model_config[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>输出如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'channels'</span>: <span class="string">'3'</span>, <span class="string">'hue'</span>: <span class="string">'.1'</span>, <span class="string">'batch'</span>: <span class="string">'1'</span>, <span class="string">'steps'</span>: <span class="string">'400000,450000'</span>, <span class="string">'burn_in'</span>: <span class="string">'1000'</span>, <span class="string">'max_batches'</span>: <span class="string">'500200'</span>, <span class="string">'learning_rate'</span>: <span class="string">'0.001'</span>, <span class="string">'exposure'</span>: <span class="string">'1.5'</span>, <span class="string">'policy'</span>: <span class="string">'steps'</span>, <span class="string">'height'</span>: <span class="string">'416'</span>, <span class="string">'width'</span>: <span class="string">'416'</span>, <span class="string">'subdivisions'</span>: <span class="string">'1'</span>, <span class="string">'angle'</span>: <span class="string">'0'</span>, <span class="string">'type'</span>: <span class="string">'net'</span>, <span class="string">'scales'</span>: <span class="string">'.1,.1'</span>, <span class="string">'momentum'</span>: <span class="string">'0.9'</span>, <span class="string">'decay'</span>: <span class="string">'0.0005'</span>, <span class="string">'saturation'</span>: <span class="string">'1.5'</span>&#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">'stride'</span>: <span class="string">'1'</span>, <span class="string">'activation'</span>: <span class="string">'leaky'</span>, <span class="string">'type'</span>: <span class="string">'convolutional'</span>, <span class="string">'filters'</span>: <span class="string">'16'</span>, <span class="string">'pad'</span>: <span class="string">'1'</span>, <span class="string">'size'</span>: <span class="string">'3'</span>, <span class="string">'batch_normalize'</span>: <span class="string">'1'</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="二-数据类的设计与实现"><a class="markdownIt-Anchor" href="#二-数据类的设计与实现"></a> (二) 数据类的设计与实现</h1><p>在搭建 YOLO 模型之前, 我们需要先创建处理数据输入的类, 在 PyTorch 中, 通常是通过集成 <code>torch.utils.data.Dataset</code> 类来实现的, 我们需要实现该类的 <code>__getitem__()</code> 和 <code>__len__()</code> 方法, 实现后, 会将子类的实例作为 <code>DataLoader</code> 的参数, 来构建生成 batch 的实例对象. 下面, 先只给出有关数据集类的实现, 具体的加载过程在后续的脚本解析中给出.</p><h2 id="class-imagefolderdataset-类"><a class="markdownIt-Anchor" href="#class-imagefolderdataset-类"></a> class ImageFolder(Dataset) 类</h2><p>这里我们起名为 <code>ImageFolder</code>, 主要是因为原作者使用了这个名字, 实际上我不太建议使用这个名字, 因为会与 PyTorch 中 <code>ImageFolder</code> 类的名字冲突, 容易引起误会, 这里注意一下, 我们这里实现的 <code>ImageFolder</code> 类与 PyTorch 中的同名类并没有任何联系. 代码解析如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./utils/datasets.py</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImageFolder</span><span class="params">(Dataset)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, folder_path, img_size=<span class="number">416</span>)</span>:</span></span><br><span class="line">        <span class="comment"># 获取文件夹下的所有图片路径, glob是一个用于获取路径的通配符模块</span></span><br><span class="line">        self.files = sorted(glob.glob(<span class="string">'%s/*.*'</span> % folder_path))</span><br><span class="line">        <span class="comment">#　设置数据集的图片大小属性, 所有的图片都会被放缩到该尺寸</span></span><br><span class="line">        self.img_shape = (img_size, img_size)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, index)</span>:</span></span><br><span class="line">        img_path = self.files[index % len(self.files)] <span class="comment"># 根据index获取图片路径</span></span><br><span class="line">        <span class="comment"># Extract image</span></span><br><span class="line">        img = np.array(Image.open(img_path)) <span class="comment"># 利用PIL Image读取图片, 然后转换成numpy数组</span></span><br><span class="line">        h, w, _ = img.shape <span class="comment"># 获取图片的高和宽</span></span><br><span class="line">        dim_diff = np.abs(h - w) <span class="comment"># 计算高宽差的绝对值</span></span><br><span class="line">        <span class="comment"># 根据高宽差计算应该填补的像素数量（填补至高和宽相等）</span></span><br><span class="line">        pad1, pad2 = dim_diff // <span class="number">2</span>, dim_diff - dim_diff // <span class="number">2</span></span><br><span class="line">        <span class="comment"># 确定填补位置(填补到边长较短的一边)</span></span><br><span class="line">        pad = ((pad1, pad2), (<span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">0</span>)) <span class="keyword">if</span> h &lt;= w <span class="keyword">else</span> ((<span class="number">0</span>, <span class="number">0</span>), (pad1, pad2), (<span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        <span class="comment"># 调用 np.pad 函数进行填补</span></span><br><span class="line">        input_img = np.pad(img, pad, <span class="string">'constant'</span>, constant_values=<span class="number">127.5</span>) / <span class="number">255.</span></span><br><span class="line">        <span class="comment"># 将图片放缩至数据集规定的尺寸, 同时进行归一化操作</span></span><br><span class="line">        input_img = resize(input_img, (*self.img_shape, <span class="number">3</span>), mode=<span class="string">'reflect'</span>)</span><br><span class="line">        <span class="comment"># 将通道维度放置在首位(C,H,W)</span></span><br><span class="line">        input_img = np.transpose(input_img, (<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">        <span class="comment"># 将numpy数组转换成tenosr, 数据类型为 float32</span></span><br><span class="line">        input_img = torch.from_numpy(input_img).float()</span><br><span class="line">        <span class="comment"># 返回图片路径和图片 tensor</span></span><br><span class="line">        <span class="keyword">return</span> img_path, input_img</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(self.files)</span><br></pre></td></tr></table></figure><h2 id="class-listdatasetdataset-类"><a class="markdownIt-Anchor" href="#class-listdatasetdataset-类"></a> class ListDataset(Dataset) 类</h2><p><code>ListDataset</code> 类定义了训练时所需的数据集和标签, 该类的 <code>__getitem__()</code> 方法会返回三个变量, 分别是: 图片路径, 经过放缩处理后的图片(尺寸大小为指定尺寸), 以及经过处理后的 box 坐标信息. 其中, 图片的存储形式为: (<em>C</em>×<em>H</em>×<em>W</em>)(C×H×W), 标签的存储形式为: (50×5)(50×5), 这 50 条数据不一定每一条都具有意义, 对于无意义的数据, 其值为 0, 训练时直接跳过即可, 对于有意义的数据, 每一条数据的形式为: (<em>c<strong>l</strong>a<strong>s</strong>s<strong>i</strong>d</em>,<em>x</em>,<em>y</em>,<em>w</em>,<em>h</em>)(classid,x,y,w,h), 其中, <em>c<strong>l</strong>a<strong>s</strong>s<strong>i</strong>d</em>classid 是每个 box 对应的目标类别编号, <em>x</em>,<em>y</em>,<em>w</em>,<em>h</em>x,y,w,h 是每个 box 的中心点坐标和宽高, 它们都是以小数形式表示的, 也就是相对于图片宽高的比例.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./utils/datasets.py</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListDataset</span><span class="params">(Dataset)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, list_path, img_size=<span class="number">416</span>)</span>:</span></span><br><span class="line">        <span class="comment"># list_path: data_config 文件中的 trian 或 val 指定的文件: trainvalno5k.txt 或者 5k.txt</span></span><br><span class="line">        <span class="comment"># 该文件中存放了用于训练或者测试的.jpg图片的路径, 同时根据此路径可以得到对应的 labels 文件</span></span><br><span class="line">        <span class="keyword">with</span> open(list_path, <span class="string">'r'</span>) <span class="keyword">as</span> file:</span><br><span class="line">            self.img_files = file.readlines()</span><br><span class="line">        <span class="comment"># 根据图片的路径得到 label 的路径, label 的存储格式为一个图片对应一个.txt文件</span></span><br><span class="line">        <span class="comment"># 文件的每一行代表了该图片的 box 信息, 其内容为: class_id, x, y, w, h (xywh都是用小数形式存储的)</span></span><br><span class="line">        self.label_files = [path.replace(<span class="string">'images'</span>, <span class="string">'labels'</span>).replace(<span class="string">'.png'</span>, <span class="string">'.txt'</span>).replace(<span class="string">'.jpg'</span>, <span class="string">'.txt'</span>) <span class="keyword">for</span> path <span class="keyword">in</span> self.img_files]</span><br><span class="line">        self.img_shape = (img_size, img_size) <span class="comment"># 获取图片目标大小, 之后会将图片放缩到此大小, 并相应调整box的数据</span></span><br><span class="line">        self.max_objects = <span class="number">50</span> <span class="comment"># 定义每一张图片最多含有的 box 数量</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, index)</span>:</span></span><br><span class="line">        <span class="comment"># 根据index获取对应的图片路径</span></span><br><span class="line">        img_path = self.img_files[index % len(self.img_files)].rstrip()</span><br><span class="line">        img = np.array(Image.open(img_path))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果当前获取到的图片的通道数不为3, 则跳过当前图片, 直到获取到通道数为3的图片</span></span><br><span class="line">        <span class="keyword">while</span> len(img.shape)!=<span class="number">3</span>:</span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">            img_path = self.img_files[(index) % len(self.img_files)].rstrip()</span><br><span class="line">            img = np.array(Image.open(img_path))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取图片的高和宽, 并根据它们的差异对图片执行 padding 操作, 使图片宽高比为1</span></span><br><span class="line">        h, w, _ = img.shape</span><br><span class="line">        dim_diff = np.abs(h - w)        </span><br><span class="line">        pad1, pad2 = dim_diff//<span class="number">2</span>, dim_diff - dim_diff//<span class="number">2</span></span><br><span class="line">        pad = ((pad1, pad2), (<span class="number">0</span>,<span class="number">0</span>), (<span class="number">0</span>,<span class="number">0</span>)) <span class="keyword">if</span> h&lt;=w <span class="keyword">else</span> ((<span class="number">0</span>,<span class="number">0</span>), (pad1, pad2), (<span class="number">0</span>,<span class="number">0</span>))        </span><br><span class="line">        input_img = np.pad(img, pad, <span class="string">'constant'</span>, constant_values=<span class="number">128</span>) / <span class="number">255.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 暂存padding后的图片的宽和高</span></span><br><span class="line">        padded_h, padded_w, _ = input_img.shape</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将图片大小放缩到指定的存储, 并将通道数放置到高和宽之前</span></span><br><span class="line">        input_img = resize(input_img, (*self.img_shape, <span class="number">3</span>), mode=<span class="string">'reflect'</span>)</span><br><span class="line">        input_img = np.transpose(input_img, (<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将图片转化成 tensor</span></span><br><span class="line">        input_img = torch.from_numpy(input_img).float()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取图片对应的 label 文件的路径</span></span><br><span class="line">        label_path = self.label_files[index % len(self.img_files)].rstrip()</span><br><span class="line"></span><br><span class="line">        labels = <span class="keyword">None</span></span><br><span class="line">        <span class="comment"># 根据图片 padding 之后的存储, 对 label 文件中的 box 坐标按比例进行缩放</span></span><br><span class="line">        <span class="keyword">if</span> os.path.exists(label_path):</span><br><span class="line">            labels = np.loadtxt(label_path).reshape(<span class="number">-1</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">            x1 = w * (labels[:, <span class="number">1</span>] - labels[:, <span class="number">3</span>] / <span class="number">2</span>) <span class="comment"># 先获取box左上角和右下角的像素坐标</span></span><br><span class="line">            y1 = h * (labels[:, <span class="number">2</span>] - labels[:, <span class="number">4</span>] / <span class="number">2</span>)</span><br><span class="line">            x2 = w * (labels[:, <span class="number">1</span>] + labels[:, <span class="number">3</span>] / <span class="number">2</span>)</span><br><span class="line">            y2 = h * (labels[:, <span class="number">2</span>] + labels[:, <span class="number">4</span>] / <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 根据 padding 的大小, 更新这些坐标的值</span></span><br><span class="line">            x1 += pad[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">            y1 += pad[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">            x2 += pad[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">            y2 += pad[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 重新将坐标转化成小数模式(相对应padding后的宽高的比例)</span></span><br><span class="line">            labels[:, <span class="number">1</span>] = ((x1+x2)/<span class="number">2</span>) / padded_w</span><br><span class="line">            labels[:, <span class="number">2</span>] = ((y1+y2)/<span class="number">2</span>) / padded_h</span><br><span class="line">            labels[:, <span class="number">3</span>] *= w / padded_w</span><br><span class="line">            labels[:, <span class="number">4</span>] *= h / padded_h</span><br><span class="line">        filled_labels = np.zeros((self.max_objects, <span class="number">5</span>)) <span class="comment"># 创建50×5的占位空间</span></span><br><span class="line">        <span class="keyword">if</span> labels <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>: <span class="comment"># 将更新后的box坐标填充到刚刚申请的占位空间中</span></span><br><span class="line">            filled_labels[range(len(labels))[:self.max_objects]] = labels[:self.max_objects]</span><br><span class="line">        <span class="comment"># 将 label 转化成 tensor</span></span><br><span class="line">        filled_labels =torch.from_numpy(filled_labels)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 返回图片路径, 图片tensor, label tensor</span></span><br><span class="line">        <span class="keyword">return</span> img_path, input_img, filled_labels</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(self.img_files)</span><br></pre></td></tr></table></figure><h1 id="三-搭建yolo模型框架"><a class="markdownIt-Anchor" href="#三-搭建yolo模型框架"></a> (三) 搭建YOLO模型框架</h1><p>在 <code>models.py</code> 文件中, 定义了 YOLO 的模型框架, 文件概览及类之间的调用关系如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./models.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="comment">#...</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_modules</span><span class="params">(module_defs)</span>:</span></span><br><span class="line">    <span class="comment"># 根据配置文件的列表字典创建模型</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    EmptyLayer()</span><br><span class="line">    YOLOLayer()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmptyLayer</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="comment"># 'route' 和 'shortcut' 网络层的占位符(placeholder)</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YOLOLayer</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="comment"># Detection Layer</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Darknet</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="comment"># YOLOv3 object detection model</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, config_path, img_size=<span class="number">416</span>)</span>:</span></span><br><span class="line">        super(Darknet, self).__init__()</span><br><span class="line">        self.module_defs = parse_model_config(config_path)</span><br><span class="line">        <span class="comment"># 这里调用了 create_modules 函数来根据配置文件的信息创建对应的网络</span></span><br><span class="line">        self.hyperparams, self.module_list = create_modules(self.module_defs)</span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">    <span class="comment"># ...</span></span><br></pre></td></tr></table></figure><h2 id="create_modules-函数"><a class="markdownIt-Anchor" href="#create_modules-函数"></a> create_modules() 函数</h2><p>下面我们先来看看模型创建函数 <code>create_modules</code> 的代码解析:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./models.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_modules</span><span class="params">(module_defs)</span>:</span></span><br><span class="line">    <span class="comment"># 参数 module_defs 是根据配置文件生成的列表字典, 列表中的每一个字典都代表一个网络层模块</span></span><br><span class="line"></span><br><span class="line">    hyperparams = module_defs.pop(<span class="number">0</span>) <span class="comment"># 第0个字段是 [net] 模块, 存储了模型的一些超参数</span></span><br><span class="line"></span><br><span class="line">    output_filters = [int(hyperparams[<span class="string">"channels"</span>])] <span class="comment"># 获取输入层的输出通道数,</span></span><br><span class="line">    <span class="comment"># out_filers 是一个列表, 后续还会添加其他网络层的输出通道数</span></span><br><span class="line"></span><br><span class="line">    module_list = nn.ModuleList()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, module_def <span class="keyword">in</span> enumerate(module_defs): <span class="comment"># 遍历配置文件中的每一个模块([net]模块已被弹出)</span></span><br><span class="line">        modules = nn.Sequential() <span class="comment"># 存储一个模块, 一个模块可能包含多个层, 如 卷积+激活</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> module_def[<span class="string">"type"</span>] == <span class="string">"convolutional"</span>:</span><br><span class="line">            bn = int(module_def[<span class="string">"batch_normalize"</span>])</span><br><span class="line">            filters = int(module_def[<span class="string">"filters"</span>])</span><br><span class="line">            kernel_size = int(module_def[<span class="string">"size"</span>])</span><br><span class="line">            pad = (kernel_size<span class="number">-1</span>) // <span class="number">2</span> <span class="keyword">if</span> int(module_def[<span class="string">"pad"</span>]) <span class="keyword">else</span> <span class="number">0</span> <span class="comment"># 维持卷积前后图片大小不变</span></span><br><span class="line"></span><br><span class="line">            modules.add_module(</span><br><span class="line">                <span class="string">"conv_%d"</span> % i, <span class="comment"># 名字</span></span><br><span class="line">                nn.Conv2d(</span><br><span class="line">                    in_channels=output_filters[<span class="number">-1</span>], <span class="comment"># 前一层的输出就是这一层的输入</span></span><br><span class="line">                    out_channels=filters,</span><br><span class="line">                    kernel_size=kernel_size,</span><br><span class="line">                    stride=int(module_def[<span class="string">"stride"</span>])</span><br><span class="line">                    padding=pad,</span><br><span class="line">                    bias=<span class="keyword">not</span> bn,<span class="comment"># 当带有 BN 层时, 会抵消掉前一层的偏置项(可通过数学计算证明)</span></span><br><span class="line">                ),</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> bn: <span class="comment"># 添加 BatchNorm 网络层</span></span><br><span class="line">                modules.add_module(<span class="string">"batch_norm_%d"</span> % i, nn.BatchNorm2d(filters))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> module_def[<span class="string">"activation"</span>] == <span class="string">"leaky"</span>: <span class="comment"># 添加激活层</span></span><br><span class="line">                modules.add_module(<span class="string">"leaky_%d"</span> % i, nn.LeakyReLU(<span class="number">0.1</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> module_def[<span class="string">"type"</span>] == <span class="string">"maxpool"</span>:</span><br><span class="line">            kernel_size = int(module_def[<span class="string">"size"</span>])</span><br><span class="line">            stride = int(module_def[<span class="string">"stride"</span>])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> kernel_size == <span class="number">2</span> <span class="keyword">and</span> stride == <span class="number">1</span>:</span><br><span class="line">                padding = nn.ZeroPad2d((<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>)) <span class="comment"># 在右边和下边添加 zero padding</span></span><br><span class="line">                modules.add_module(<span class="string">"_debug_padding_%d"</span> % i, padding)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 定义 max_pool 网络层, 注意 maxpool 没有 filter 参数</span></span><br><span class="line">            maxpool = nn.MaxPool2d(</span><br><span class="line">                kernel_size=kernel_size,</span><br><span class="line">                stride=stride,</span><br><span class="line">                padding=(kernel_size<span class="number">-1</span>) // <span class="number">2</span>,</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            modules.add_module(<span class="string">"maxpool_%d"</span> % i, maxpool)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> module_def[<span class="string">"type"</span>] == <span class="string">"upsample"</span>: <span class="comment"># 根据 stride 扩大特征图谱的宽和高</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 目前, 新版本的 PyTorch 已经逐渐启用 Upsample, 而推荐使用更加一般化的 nn.functional.interpolate</span></span><br><span class="line">            upsample = nn.Upsample(scale_factor=int(module_def[<span class="string">"stride"</span>]), mode=<span class="string">"nearest"</span>)</span><br><span class="line"></span><br><span class="line">            modules.add_module(<span class="string">"upsample_%d"</span> % i, upsample)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> module_def[<span class="string">"type"</span>] == <span class="string">"route"</span>:</span><br><span class="line">            layers = [int(x) <span class="keyword">for</span> x <span class="keyword">in</span> module_def[<span class="string">"laers"</span>].split(<span class="string">','</span>)]</span><br><span class="line">            filters = sum([output_filters[layer_i] <span class="keyword">for</span> layer_i <span class="keyword">in</span> layers])</span><br><span class="line"></span><br><span class="line">            module.add_module(<span class="string">"route_%d"</span> % i, EmptyLayer())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> module_def[<span class="string">"type"</span>] == <span class="string">"shortcut"</span>:</span><br><span class="line">            filters = output_filters[module_def[<span class="string">"from"</span>]]</span><br><span class="line"></span><br><span class="line">            modules.add_module(<span class="string">"shortcut_%d"</span> % i, EmptyLayer())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> module_def[<span class="string">"type"</span>] == <span class="string">"yolo"</span>:</span><br><span class="line"></span><br><span class="line">            anchor_idxs = [int(x) <span class="keyword">for</span> x <span class="keyword">in</span> module_def[<span class="string">"mask"</span>].split(<span class="string">','</span>)]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 提取 anchors</span></span><br><span class="line">            anchors = [int(x) <span class="keyword">for</span> x <span class="keyword">in</span> module_def[<span class="string">"anchors"</span>].split(<span class="string">','</span>)]</span><br><span class="line">            anchors = [(anchors[i], anchors[i+<span class="number">1</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(anchors), <span class="number">2</span>)]</span><br><span class="line"></span><br><span class="line">            anchors = [anchors[i] <span class="keyword">for</span> i <span class="keyword">in</span> anchor_idxs]</span><br><span class="line"></span><br><span class="line">            num_classes = module_def[<span class="string">"classes"</span>]</span><br><span class="line">            img_height = hyperparams[<span class="string">"height"</span>]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 定义 Detection Layer</span></span><br><span class="line">            yolo_layer = YOLOLayer(anchors, num_classes, img_height)</span><br><span class="line">            modules.add_module(<span class="string">"yolo_%d"</span> % i, yolo_layer)</span><br><span class="line"></span><br><span class="line">        module_list.append(modules)</span><br><span class="line">        output_filters.append(filters)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> hyperparams, module_list</span><br></pre></td></tr></table></figure><h2 id="class-emptylayernnmodule"><a class="markdownIt-Anchor" href="#class-emptylayernnmodule"></a> class EmptyLayer(nn.Module)</h2><p>在上面的代码中, 对于 <code>route</code> 和 <code>shortcut</code> 使用了自定义的 <code>class EmptyLayer(nn.Module)</code>, 该类主要起到一个占位符(placeholder)的作用, 其内部实现会根据模块的类型不同而有所区别, 下面是该类的定义:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./models.py</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmptyLayer</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(EmptyLayer, self).__init__()</span><br></pre></td></tr></table></figure><h2 id="class-yololayernnmodule"><a class="markdownIt-Anchor" href="#class-yololayernnmodule"></a> class YOLOLayer(nn.Module)</h2><p>接着, 对于 <code>yolo</code> 模块, 使用了 <code>class YOLOLayer(nn.Module)</code> , 该类的定义如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./models.py</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YOLOLayer</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, anchors, num_classes, img_dim)</span>:</span></span><br><span class="line">        super(YOLOLayer, self).__init__()</span><br><span class="line">        self.anchors = anchors <span class="comment"># anchors = [(116,90),(156,198),(373,326)]</span></span><br><span class="line">        self.num_anchors = len(anchors) <span class="comment"># 3</span></span><br><span class="line">        self.num_classes = num_classes <span class="comment"># 80</span></span><br><span class="line">        self.bbox_attrs = <span class="number">5</span> + num_classes <span class="comment">#</span></span><br><span class="line">        self.image_dim = img_dim <span class="comment"># 416</span></span><br><span class="line">        self.ignore_thres = <span class="number">0.5</span></span><br><span class="line">        self.lambda_coord = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        self.mse_loss = nn.MSELoss(size_average=<span class="keyword">True</span>)</span><br><span class="line">        self.bce_loss = nn.BCELoss(size_average=<span class="keyword">True</span>)</span><br><span class="line">        self.ce_loss = nn.CrossEntropyLoss()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x, targets=None)</span>:</span></span><br><span class="line">        <span class="comment"># x: [1, 255, 13, 13]</span></span><br><span class="line">        <span class="comment"># targets: [50, 5]</span></span><br><span class="line">        nA = self.num_anchors <span class="comment"># 3</span></span><br><span class="line">        nB = x.size(<span class="number">0</span>) <span class="comment"># batch_size</span></span><br><span class="line">        nG = x.size(<span class="number">2</span>) <span class="comment"># W = 13</span></span><br><span class="line">        stride = self.image_dim / nG <span class="comment"># 416 / W = 416 / 13 = 32</span></span><br><span class="line"></span><br><span class="line">        FloatTensor = torch.cuda.FloatTensor <span class="keyword">if</span> x.is_cuda <span class="keyword">else</span> torch.FloatTensor</span><br><span class="line">        LongTensor = torch.cuda.LongTensor <span class="keyword">if</span> x.is_cuda <span class="keyword">else</span> torch.LongTensor</span><br><span class="line">        ByteTensor = torch.cuda.ByteTensor <span class="keyword">if</span> x.is_cuda <span class="keyword">else</span> torch.ByteTensor</span><br><span class="line">        <span class="comment"># (batch, anchors, 5+num_classes, x.size(2), x.size(2)), 调换顺序</span></span><br><span class="line">        <span class="comment"># [1, 3, 13, 13, 85]</span></span><br><span class="line">        prediction = x.view(nB, nA, self.bbox_attrs, nG, nG).permute(<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>).contiguous()</span><br><span class="line"></span><br><span class="line">        x = torch.sigmoid(prediction[..., <span class="number">0</span>]) <span class="comment"># center x: [1, 3, 13, 13]</span></span><br><span class="line">        y = torch.sigmoid(prediction[..., <span class="number">1</span>]) <span class="comment"># center y: [1, 3, 13, 13]</span></span><br><span class="line">        w = prediction[..., <span class="number">2</span>] <span class="comment"># width: [1, 3, 13, 13]</span></span><br><span class="line">        h = prediction[..., <span class="number">3</span>] <span class="comment"># height: [1, 3, 13, 13]</span></span><br><span class="line">        pred_conf = torch.sigmoid(prediction[..., <span class="number">4</span>]) <span class="comment"># [1, 3, 13, 13]</span></span><br><span class="line">        pred_cls = torch.sigmoid(prediction[..., <span class="number">5</span>:]) <span class="comment"># [1, 3, 13, 13, 80]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># grid_x的shape为[1,1,nG,nG], 每一行的元素为:[0,1,2,3,...,nG-1]</span></span><br><span class="line">        grid_x = torch.arange(nG).repeat(nG, <span class="number">1</span>).view([<span class="number">1</span>,<span class="number">1</span>,nG,nG]).type(FloatTensor)</span><br><span class="line">        <span class="comment"># grid_y的shape为[1,1,nG,nG], 每一列元素为: [0,1,2,3, ...,nG-1]</span></span><br><span class="line">        grid_y = torch.arange(nG).repeat(nG, <span class="number">1</span>).t().view(<span class="number">1</span>,<span class="number">1</span>,nG,nG).type(FloatTensor)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># scaled_anchors 是将原图上的 box 大小根据当前特征图谱的大小转换成相应的特征图谱上的 box</span></span><br><span class="line">        <span class="comment"># shape: [3, 2]</span></span><br><span class="line">        scaled_anchors = FloatTensor([(a_w / stride, a_h / stride) <span class="keyword">for</span> a_w, a_h <span class="keyword">in</span> self.anchors])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 分别获取其 w 和 h, 并将shape形状变为: [1,3,1,1]</span></span><br><span class="line">        anchor_w = scaled_anchors[:, <span class="number">0</span>:<span class="number">1</span>].view((<span class="number">1</span>, nA, <span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">        anchor_h = scaled_anchors[:, <span class="number">1</span>:<span class="number">2</span>].view((<span class="number">1</span>, nA, <span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># shape: [1, 3, 13, 13, 4], 给 anchors 添加 offset 和 scale</span></span><br><span class="line">        pred_boxes = FloatTensor(prediction[..., :<span class="number">4</span>].shape)</span><br><span class="line">        pred_boxes[..., <span class="number">0</span>] = x.data + grid_x</span><br><span class="line">        pred_boxes[..., <span class="number">0</span>] = y.data + grid_y</span><br><span class="line">        pred_boxes[..., <span class="number">2</span>] = torch.exp(w.data) * anchor_w</span><br><span class="line">        pred_boxes[..., <span class="number">3</span>] = torch.exp(h.data) * anchor_h</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> targets <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:<span class="comment"># 如果提供了 targets 标签, 则说明是处于训练阶段</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> x.is_cuda:</span><br><span class="line">                self.mse_loss = self.mse_loss.cuda()</span><br><span class="line">                self.bce_loss = self.bce_loss.cuda()</span><br><span class="line">                self.ce_loss = self.ce_loss.cuda()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 调用 utils.py 文件中的 build_targets 函数, 将真实的 box 数据转化成训练用的数据格式</span></span><br><span class="line">            <span class="comment"># nGT = int 真实box的数量</span></span><br><span class="line">            <span class="comment"># nCorrect = int 预测正确的数量</span></span><br><span class="line">            <span class="comment"># mask: torch.Size([1, 3, 13, 13])</span></span><br><span class="line">            <span class="comment"># conf_mask: torch.Size([1, 3, 13, 13])</span></span><br><span class="line">            <span class="comment"># tx: torch.Size([1, 3, 13, 13])</span></span><br><span class="line">            <span class="comment"># ty: torch.Size([1, 3, 13, 13])</span></span><br><span class="line">            <span class="comment"># tw: torch.Size([1, 3, 13, 13])</span></span><br><span class="line">            <span class="comment"># th: torch.Size([1, 3, 13, 13])</span></span><br><span class="line">            <span class="comment"># tconf: torch.Size([1, 3, 13, 13])</span></span><br><span class="line">            <span class="comment"># tcls: torch.Size([1, 3, 13, 13, 80])</span></span><br><span class="line">            nGT, nCorrect, mask, conf_mask, tx, ty, tw, th, tconf, cls = build_targets(</span><br><span class="line">                pred_boxes = pred_boxes.cpu().data,</span><br><span class="line">                pred_conf=pred_cls.cpu().data,</span><br><span class="line">                target=targets.cpu().data,</span><br><span class="line">                anchors=scaled_anchors.cpu().data,</span><br><span class="line">                num_anchors=nA,</span><br><span class="line">                num_classes=self.num_classes,</span><br><span class="line">                grid_size=nG,</span><br><span class="line">                ignore_thres=self.ignore_thres,</span><br><span class="line">                img_dim=self.image_dim,</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            nProposals = int((pred_conf &gt; <span class="number">0.5</span>).sum().item()) <span class="comment"># 计算置信度大于0.5的预测box数量</span></span><br><span class="line">            recall = float(nCorrect / nGT) <span class="keyword">if</span> nGT <span class="keyword">else</span> <span class="number">1</span> <span class="comment"># 计算召回率</span></span><br><span class="line">            precision = float(nCorrect / nProposals)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 处理 masks</span></span><br><span class="line">            mask = Variable(mask.type(ByteTensor))</span><br><span class="line">            conf_mask = Variable(conf_mask.type(ByteTensor))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 处理 target Variables</span></span><br><span class="line">            tx = Variable(tx.type(FloatTensor), requires_grad=<span class="keyword">False</span>)</span><br><span class="line">            ty = Variable(ty.type(FloatTensor), requires_grad=<span class="keyword">False</span>)</span><br><span class="line">            tw = Variable(tw.type(FloatTensor), requires_grad=<span class="keyword">False</span>)</span><br><span class="line">            th = Variable(th.type(FloatTensor), requires_grad=<span class="keyword">False</span>)</span><br><span class="line">            tconf = Variable(tconf.type(FloatTensor), requires_grad=<span class="keyword">False</span>)</span><br><span class="line">            tcls = Variable(tcls.type(LongTensor), requires_grad=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 获取表明gt和非gt的conf_mask</span></span><br><span class="line">            <span class="comment"># 这里 conf_mask_true 指的是具有最佳匹配度的anchor box</span></span><br><span class="line">            <span class="comment"># conf_mask_false 指的是iou小于0.5的anchor box, 其余的anchor box都被忽略了</span></span><br><span class="line">            conf_mask_true = mask <span class="comment"># mask 只有best_n对应位为1, 其余都为0</span></span><br><span class="line">            conf_mask_false = conf_mask-mask <span class="comment"># conf_mask中iou大于ignore_thres的为0, 其余为1, best_n也为1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 忽略 non-existing objects, 计算相应的loss</span></span><br><span class="line">            loss_x = self.mse_loss(x[mask], tx[mask])</span><br><span class="line">            loss_y = self.mse_loss(y[mask], ty[mask])</span><br><span class="line">            loss_w = self.mse_loss(w[mask], tw[mask])</span><br><span class="line">            loss_h = self.mse_loss(h[mask], th[mask])</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 这里 conf_mask_true 指的是具有最佳匹配度的anchor box</span></span><br><span class="line">            <span class="comment"># conf_mask_false 指的是iou小于0.5的anchor box, 其余的anchor box都被忽略了</span></span><br><span class="line">            loss_conf = self.bce_loss(</span><br><span class="line">                pred_conf[conf_mask_false], tconf[conf_mask_false]</span><br><span class="line">            ) + self.bce_loss(</span><br><span class="line">                pred_conf[conf_mask_true], tconf[conf_mask_true]</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            <span class="comment"># pred_cls[mask]的shape为: [7,80], torch.argmax(tcls[mask], 1)的shape为[7]</span></span><br><span class="line">            <span class="comment"># CrossEntropyLoss对象的输入为(x,class), 其中x为预测的每个类的概率, class为gt的类别下标</span></span><br><span class="line">            loss_cls = (<span class="number">1</span> / nB) * self.ce_loss(pred_cls[mask], torch.argmax(tcls[mask], <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">            loss = loss_x + loss_y + loss_w + loss_h + loss_conf + loss_cls</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                loss,</span><br><span class="line">                loss_x.item(),</span><br><span class="line">                loss_y.item(),</span><br><span class="line">                loss_w.item(),</span><br><span class="line">                loss_h.item(),</span><br><span class="line">                loss_conf.item(),</span><br><span class="line">                loss_cls.item(),</span><br><span class="line">                recall,</span><br><span class="line">                precision,</span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 非训练阶段则直接返回准确率, output的shape为: [nB, -1, 85]</span></span><br><span class="line">            output = torch.cat(</span><br><span class="line">                (</span><br><span class="line">                    pred_boxes.view(nB, <span class="number">-1</span>, <span class="number">4</span>) * stride,</span><br><span class="line">                    pred_conf.view(nB, <span class="number">-1</span>, <span class="number">1</span>),</span><br><span class="line">                    pred_cls.view(nB, <span class="number">-1</span>, self.num_classes),</span><br><span class="line">                ),</span><br><span class="line">                <span class="number">-1</span>,</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure><p>上面 <code>YOLOLayer</code> 类的 <code>forward()</code> 函数使用了 <code>build_targets()</code> 函数来将真实的标签数据转化成训练用的格式, 关于该函数的解析可以看 <a href="http://utils.py" target="_blank" rel="noopener">utils.py</a> 文件解析中的 build_target()函数</p><h2 id="class-darknetnnmodule"><a class="markdownIt-Anchor" href="#class-darknetnnmodule"></a> class Darknet(nn.Module)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./models.py</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Darknet</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="comment"># yolo v3 检测模型</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, config_path, img_size=<span class="number">416</span>)</span>:</span></span><br><span class="line">        super(Darknet, self).__init__()</span><br><span class="line">        self.module_defs = parse_model_config(config_path)</span><br><span class="line">        self.hyperparams, self.module_list = create_modules(self.module_defs)</span><br><span class="line">        self.img_size = img_size</span><br><span class="line">        self.seen = <span class="number">0</span></span><br><span class="line">        self.header_info = np.array([<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,self.seen,<span class="number">0</span>])</span><br><span class="line">        self.loss_names = [<span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"w"</span>, <span class="string">"h"</span>, <span class="string">"conf"</span>, <span class="string">"cls"</span>, <span class="string">"recall"</span>, <span class="string">"precision"</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x, targets=None)</span>:</span></span><br><span class="line">        is_training = targets <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="comment"># 如果targets不为None, 则将is_training设为true</span></span><br><span class="line">        output = []</span><br><span class="line">        self.losses = defaultdict(float)</span><br><span class="line">        layer_outputs = []</span><br><span class="line">        print(<span class="string">"input: "</span>, x.shape)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i, (module_def, module) <span class="keyword">in</span> enumerate(zip(self.module_defs, self.module_list)):</span><br><span class="line">            <span class="keyword">if</span> module_def[<span class="string">"type"</span>] <span class="keyword">in</span> [<span class="string">"convolutional"</span>, <span class="string">"upsample"</span>, <span class="string">"maxpool"</span>]:</span><br><span class="line">                <span class="comment"># 如果是内置的网络层类型, 则直接调用其 forward 函数即可</span></span><br><span class="line">                x = module(x)</span><br><span class="line">            <span class="keyword">elif</span> module_def[<span class="string">"type"</span>] == <span class="string">"route"</span>:</span><br><span class="line">                layer_i = [int(x) <span class="keyword">for</span> x <span class="keyword">in</span> module_def[<span class="string">"layers"</span>].split(<span class="string">","</span>)]</span><br><span class="line">                <span class="comment"># x的shape为:[N,C,W,H], 因此, dim=1代表在深度维度上进行连接</span></span><br><span class="line">                x = torch.cat([layer_outputs[i] <span class="keyword">for</span> i <span class="keyword">in</span> layer_i], <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">elif</span> module_def[<span class="string">"type"</span>] == <span class="string">"shortcut"</span>:</span><br><span class="line">                layer_i = int(module_def[<span class="string">"from"</span>])</span><br><span class="line">                <span class="comment"># 注意这里可看出route的shortcut的区别, 前者相当于短路(不在乎前一层的输出),</span></span><br><span class="line">                <span class="comment"># 后者相当于res模块(需要加上前一层的输出)</span></span><br><span class="line">                x = layer_outputs[<span class="number">-1</span>] + layer_outputs[layer_i]</span><br><span class="line">            <span class="keyword">elif</span> module_def[<span class="string">"type"</span>] == <span class="string">"yolo"</span>:</span><br><span class="line">                <span class="keyword">if</span> is_training:</span><br><span class="line">                    <span class="comment"># yolo module的输出为(tuple):</span></span><br><span class="line">                    <span class="comment"># ( loss,loss_x.item(),loss_y.item(),loss_w.item(),loss_h.item(),</span></span><br><span class="line">                    <span class="comment"># loss_conf.item(),loss_cls.item(),recall,precision )</span></span><br><span class="line">                    <span class="comment"># 令 x = loss, losses=(剩余的元素组成的tuple)</span></span><br><span class="line">                    x, *losses = module[<span class="number">0</span>](x, targets)</span><br><span class="line">                    <span class="keyword">for</span> name, loss <span class="keyword">in</span> zip(self.loss_names, losses): <span class="comment">#将losses根据名字加入字典</span></span><br><span class="line">                        self.losses[name] += loss</span><br><span class="line">                <span class="keyword">else</span>:<span class="comment"># 如果是非training阶段, 则直接计算结果, 无需记录loss</span></span><br><span class="line">                    x = module(x)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 记录yolo层的预测结果</span></span><br><span class="line">                output.append(x)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#记录每一层的输出</span></span><br><span class="line">            layer_outputs.append(x)</span><br><span class="line"></span><br><span class="line">        self.losses[<span class="string">"recall"</span>] /= <span class="number">3</span></span><br><span class="line">        self.losses[<span class="string">"precision"</span>] /= <span class="number">3</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果是训练阶段, 则计算和, 否则, 沿着深度维度将不同yolo层的预测结果连接起来并返回</span></span><br><span class="line">        <span class="keyword">return</span> sum(output) <span class="keyword">if</span> is_training <span class="keyword">else</span> torch.cat(output, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h1 id="四-实现自定义网络层的前向和反向传播过程"><a class="markdownIt-Anchor" href="#四-实现自定义网络层的前向和反向传播过程"></a> (四) 实现自定义网络层的前向和反向传播过程</h1><h1 id="五-训练测试检测脚本的实现"><a class="markdownIt-Anchor" href="#五-训练测试检测脚本的实现"></a> (五) 训练/测试/检测脚本的实现</h1><h2 id="detectpy"><a class="markdownIt-Anchor" href="#detectpy"></a> <a href="http://detect.py" target="_blank" rel="noopener">detect.py</a></h2><p>该函数定义了模型的检测逻辑, 调用该函数, 会将图片送入模型中去运算, 并且会返回相应的预测结果, 然后, 需要对预测结果执行 NMS 算法, 消除重叠的框, 最后, 将预测结果以<code>.png</code>的格式进行可视化存储.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./detect.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> utils.utils <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> utils.datasets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> torch.autograd <span class="keyword">import</span> Variable</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.patches <span class="keyword">as</span> patches</span><br><span class="line"><span class="keyword">from</span> matplotlib.ticker <span class="keyword">import</span> NullLocator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">'--image_folder'</span>, type=str, default=<span class="string">'data/samples'</span>, help=<span class="string">'path to dataset'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--config_path'</span>, type=str, default=<span class="string">'config/yolov3.cfg'</span>, help=<span class="string">'path to model config file'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--weights_path'</span>, type=str, default=<span class="string">'weights/yolov3.weights'</span>, help=<span class="string">'path to weights file'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--class_path'</span>, type=str, default=<span class="string">'data/coco.names'</span>, help=<span class="string">'path to class label file'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--conf_thres'</span>, type=float, default=<span class="number">0.8</span>, help=<span class="string">'object confidence threshold'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--nms_thres'</span>, type=float, default=<span class="number">0.4</span>, help=<span class="string">'iou thresshold for non-maximum suppression'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--batch_size'</span>, type=int, default=<span class="number">1</span>, help=<span class="string">'size of the batches'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--n_cpu'</span>, type=int, default=<span class="number">8</span>, help=<span class="string">'number of cpu threads to use during batch generation'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--img_size'</span>, type=int, default=<span class="number">416</span>, help=<span class="string">'size of each image dimension'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--use_cuda'</span>, type=bool, default=<span class="keyword">True</span>, help=<span class="string">'whether to use cuda if available'</span>)</span><br><span class="line">opt = parser.parse_args([])</span><br><span class="line">print(opt)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指示当前cuda是否可用</span></span><br><span class="line">cuda = torch.cuda.is_available() <span class="keyword">and</span> opt.use_cuda</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建模型并加载权重</span></span><br><span class="line">model = Darknet(opt.config_path, img_size=opt.img_size)</span><br><span class="line">model.load_weights(opt.weights_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果cuda可用, 则将model移至cuda</span></span><br><span class="line"><span class="keyword">if</span> cuda:</span><br><span class="line">    model.cuda()</span><br><span class="line"></span><br><span class="line">model.eval() <span class="comment"># 将模型的状态置为eval状态(会改变月一些内置网络层的行为)</span></span><br><span class="line"></span><br><span class="line">img_datasets = ImageFolder(opt.image_folder, img_size=opt.img_size)</span><br><span class="line">dataloader = DataLoader(img_datasets,</span><br><span class="line">                        batch_size=opt.batch_size, shuffle=<span class="keyword">False</span>, num_workers=opt.n_cpu</span><br><span class="line">                       )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用utils/utils.py文件中的load_classes()函数加载类别的名字(['person','car',...,'toothbrush'])</span></span><br><span class="line">classes = load_classes(opt.class_path)</span><br><span class="line"></span><br><span class="line">Tensor = torch.cuda.FloatTensor <span class="keyword">if</span> cuda <span class="keyword">else</span> torch.FLoatTnesor</span><br><span class="line"></span><br><span class="line">imgs = [] <span class="comment"># 存储图片路径</span></span><br><span class="line">img_detections = [] <span class="comment"># 存储每张图片的检测结果</span></span><br><span class="line"></span><br><span class="line">data_size = len(img_datasets) <span class="comment"># 图片的数量</span></span><br><span class="line">epoch_size = len(dataloader) <span class="comment"># epoch的数量: data_size / batch_size</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'\nPerforming object detection: &#123;&#125; images, &#123;&#125; epoches'</span>.format(data_size, epoch_size))</span><br><span class="line"></span><br><span class="line">prev_time = time.time()</span><br><span class="line"><span class="keyword">for</span> batch_i, (img_paths, input_imgs) <span class="keyword">in</span> enumerate(dataloader):</span><br><span class="line">    <span class="comment"># 配置输入</span></span><br><span class="line">    input_imgs = Variable(input_imgs.type(Tensor)) <span class="comment"># Tensor: FloatTensor</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取预测结果</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="comment"># detections的shape为: [1,10647,85], 其中, 1为batch_size</span></span><br><span class="line">        <span class="comment"># 因为对于尺寸为416的图片来说:(13*13+26*26+52*52) * 3 = 10647</span></span><br><span class="line">        <span class="comment"># 如果图片尺寸为608(必须为32的倍数), 那么就为:(19*19+38*38+76*76) * 3 = 22743</span></span><br><span class="line">        detections = model(input_imgs)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># nms: 对于每一类(不同类之间的box不执行nms), 先选出具有最大score的box,</span></span><br><span class="line">        <span class="comment"># 然后删除与该box交并比较大的同类box, 接着继续选下一个最大socre的box, 直至同类box为空</span></span><br><span class="line">        <span class="comment"># 注意yolo与faster rcnn在执行nms算法时的不同, 前者是在多类上执行的, 后者是在两类上执行的</span></span><br><span class="line">        <span class="comment"># 执行nms后, 这里的detections是一个列表, 列表中的每个元素代表着一张图片nms后的box集合</span></span><br><span class="line">        <span class="comment"># 每一张图片的shape为:[m, 7], m代表box的数量, 7代表:(x1,y1,x2,y2,obj_conf,class_conf,class_pred)</span></span><br><span class="line">        detections = non_max_suppression(detections, <span class="number">80</span>, opt.conf_thres, opt.nms_thres)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">#break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 记录当前时间</span></span><br><span class="line">    current_time = time.time()</span><br><span class="line">    <span class="comment"># 计算detect花费的时间(一张图片)</span></span><br><span class="line">    inference_time = datetime.timedelta(seconds=current_time - prev_time)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 更新prev_time</span></span><br><span class="line">    prev_time = current_time</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印到屏幕</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'\t+ Batch %d, Inference Time: %s'</span> % (batch_i, inference_time))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 记录图片的路径和检测结果, 以便后面进行可视化</span></span><br><span class="line">    imgs.extend(img_paths)</span><br><span class="line">    img_detections.extend(detections)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测完成后, 根据 imgs 和 img_detections 的值进行可视化(以.png图片形式存储在磁盘上)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设值边框的颜色</span></span><br><span class="line">cmap = plt.get_cmap(<span class="string">'tab20b'</span>)</span><br><span class="line">colors = [cmap(i) <span class="keyword">for</span> i <span class="keyword">in</span> np.linspace(<span class="number">0</span>, <span class="number">1</span>, <span class="number">20</span>)]</span><br><span class="line"></span><br><span class="line">print(<span class="string">'\nSaving image:'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历所有的imgs 和 img_detections, 对检测结果进行可视化</span></span><br><span class="line"><span class="keyword">for</span> img_i, (path, detections) <span class="keyword">in</span> enumerate(zip(imgs, img_detections)):</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"(%d) Image: '%s'"</span> % (img_i, path))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建plot</span></span><br><span class="line">    img = np.array(Image.open(path))</span><br><span class="line">    plt.figure()</span><br><span class="line">    fig, ax = plt.subplots(<span class="number">1</span>)</span><br><span class="line">    ax.imshow(img) <span class="comment"># 将img添加到当前的plot中</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算给当前图片添加的padding的像素数</span></span><br><span class="line">    pad_x = max(img.shape[<span class="number">0</span>] - img.shape[<span class="number">1</span>], <span class="number">0</span>) * (opt.img_size / max(img.shape))</span><br><span class="line">    pad_y = max(img.shape[<span class="number">1</span>] - img.shape[<span class="number">0</span>], <span class="number">0</span>) * (opt.img_size / max(img.shape))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取移除padding之后的图片的宽和高, 注意这个宽和高不同图片的原始大小, 而是放缩后的大小(长边为opt.img_size)</span></span><br><span class="line">    unpad_h = opt.img_size - pad_y</span><br><span class="line">    unpad_w = opt.img_size - pad_x</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在图片上画相应的box的边框和标签</span></span><br><span class="line">    <span class="keyword">if</span> detections <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="comment"># 获取当前图片中出现过的标签</span></span><br><span class="line">        unique_labels = detections[:, <span class="number">-1</span>].cpu().unique()</span><br><span class="line">        n_cls_preds = len(unique_labels) <span class="comment"># 获取出现过的标签的数量</span></span><br><span class="line">        bbox_colors = random.sample(colors, n_cls_preds) <span class="comment"># 为每个类别标签随机分配颜色</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> x1, y1, x2, y2, conf, cls_conf, cls_pred <span class="keyword">in</span> detections:</span><br><span class="line">            <span class="comment"># 输出当前box的标签和相应的概率</span></span><br><span class="line">            <span class="keyword">print</span> (<span class="string">'\t+ Label: %s, Conf: %.5f'</span> % (classes[int(cls_pred)], cls_conf.item()))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 将坐标转换到原始图片上的像素坐标</span></span><br><span class="line">            box_h = ((y2-y1) / unpad_h) * img.shape[<span class="number">0</span>]</span><br><span class="line">            box_w = ((x2-x1) / unpad_w) * img.shape[<span class="number">1</span>]            </span><br><span class="line">            y1 = ((y1 - pad_y // <span class="number">2</span>) / unpad_h) * img.shape[<span class="number">0</span>]</span><br><span class="line">            x1 = ((x1 - pad_x // <span class="number">2</span>) / unpad_w) * img.shape[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 获取当前类别的颜色</span></span><br><span class="line">            color = bbox_colors[int(np.where(unique_labels == int(cls_pred))[<span class="number">0</span>])]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 创建矩形</span></span><br><span class="line">            bbox = patches.Rectangle((x1, y1), box_w, box_h, linewidth=<span class="number">2</span>, edgecolor=color, facecolor=<span class="string">'none'</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 将创建好的矩形添加到当前的plot中(会加载在图片的上面)</span></span><br><span class="line">            ax.add_patch(bbox)</span><br><span class="line">            <span class="comment"># 添加标签</span></span><br><span class="line">            plt.text(x1, y1, s=classes[int(cls_pred)], color=<span class="string">'white'</span>, verticalalignment=<span class="string">'top'</span>, bbox=&#123;<span class="string">'color'</span>:color, <span class="string">'pad'</span>:<span class="number">0</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将图片保存在磁盘上</span></span><br><span class="line">    plt.axis(<span class="string">'off'</span>)</span><br><span class="line">    plt.gca().xaxis.set_major_locator(NullLocator())</span><br><span class="line">    plt.gca().yaxis.set_major_locator(NullLocator())</span><br><span class="line">    plt.savefig(<span class="string">'output/%d.png'</span> % (img_i), bbox_inches=<span class="string">'tight'</span>, pad_inches=<span class="number">0.0</span>)</span><br><span class="line">    plt.close()</span><br></pre></td></tr></table></figure><h2 id="trainpy"><a class="markdownIt-Anchor" href="#trainpy"></a> <a href="http://train.py" target="_blank" rel="noopener">train.py</a> 训练脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./train.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> utils.utils <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> utils.datasets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> utils.parse_config <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">from</span> torch.autograd <span class="keyword">import</span> Variable</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"--epochs"</span>, type=int, default=<span class="number">30</span>, help=<span class="string">"number of epochs"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--image_folder"</span>, type=str, default=<span class="string">"data/samples"</span>, help=<span class="string">"path to dataset"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--batch_size"</span>, type=int, default=<span class="number">16</span>, help=<span class="string">"size of each image batch"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--model_config_path"</span>, type=str, default=<span class="string">"config/yolov3.cfg"</span>, help=<span class="string">"path to model config file"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--data_config_path"</span>, type=str, default=<span class="string">"config/coco.data"</span>, help=<span class="string">"path to data config file"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--weights_path"</span>, type=str, default=<span class="string">"weights/yolov3.weights"</span>, help=<span class="string">"path to weights file"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--class_path"</span>, type=str, default=<span class="string">"data/coco.names"</span>, help=<span class="string">"path to class label file"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--conf_thres"</span>, type=float, default=<span class="number">0.8</span>, help=<span class="string">"object confidence threshold"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--nms_thres"</span>, type=float, default=<span class="number">0.4</span>, help=<span class="string">"iou thresshold for non-maximum suppression"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--n_cpu"</span>, type=int, default=<span class="number">0</span>, help=<span class="string">"number of cpu threads to use during batch generation"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--img_size"</span>, type=int, default=<span class="number">416</span>, help=<span class="string">"size of each image dimension"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--checkpoint_interval"</span>, type=int, default=<span class="number">1</span>, help=<span class="string">"interval between saving model weights"</span>)</span><br><span class="line">parser.add_argument(</span><br><span class="line">    <span class="string">"--checkpoint_dir"</span>, type=str, default=<span class="string">"checkpoints"</span>, help=<span class="string">"directory where model checkpoints are saved"</span></span><br><span class="line">)</span><br><span class="line">parser.add_argument(<span class="string">"--use_cuda"</span>, type=bool, default=<span class="keyword">True</span>, help=<span class="string">"whether to use cuda if available"</span>)</span><br><span class="line">opt = parser.parse_args([])</span><br><span class="line">print(opt)</span><br><span class="line"></span><br><span class="line">cuda = torch.cuda.is_available() <span class="keyword">and</span> opt.use_cuda</span><br><span class="line"></span><br><span class="line">os.makedirs(<span class="string">"output"</span>, exist_ok=<span class="keyword">True</span>)</span><br><span class="line">os.makedirs(<span class="string">"checkpoints"</span>, exist_ok=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载各个类的名字</span></span><br><span class="line">classes = load_classes(opt.class_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载数据集相关配置(主要是路径)</span></span><br><span class="line">data_config = parse_data_config(opt.data_config_path)</span><br><span class="line">train_path = data_config[<span class="string">"train"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取模型超参数</span></span><br><span class="line">hyperparams = parse_model_config(opt.model_config_path)[<span class="number">0</span>]</span><br><span class="line">learning_rate = float(hyperparams[<span class="string">"learning_rate"</span>])</span><br><span class="line">momentum = float(hyperparams[<span class="string">"momentum"</span>])</span><br><span class="line">decay = float(hyperparams[<span class="string">"decay"</span>])</span><br><span class="line">burn_in = int(hyperparams[<span class="string">"burn_in"</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化创建模型结构</span></span><br><span class="line">model = Darknet(opt.model_config_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机初始化权重, weights_init_normal是定义在utils.py文件中函数, 会对模型进行高斯随机初始化</span></span><br><span class="line">model.apply(weights_init_normal)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> cuda:</span><br><span class="line">    model = model.cuda()</span><br><span class="line"></span><br><span class="line">model.train() <span class="comment"># 将模型置于训练模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ListDataset是用于训练时使用的数据集类, 它会返回以下三个变量:</span></span><br><span class="line"><span class="comment"># 图片路径(str), 图片(3,416,416), 以及图片的box标签信息(50,5)</span></span><br><span class="line">dataloader = torch.utils.data.DataLoader(</span><br><span class="line">    ListDataset(train_path), batch_size=opt.batch_size, shuffle=<span class="keyword">False</span>, num_workers=opt.n_cpu</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">Tensor = torch.cuda.FloatTensor <span class="keyword">if</span> cuda <span class="keyword">else</span> torch.FloatTensor</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下式的lambda函数等价于: Adam(p for p in model.parameters() if p.requires_grad== True)</span></span><br><span class="line">optimizer = torch.optim.Adam(filter(<span class="keyword">lambda</span> p: p.requires_grad, model.parameters()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(opt.epochs):</span><br><span class="line">    <span class="keyword">for</span> batch_i, (_, imgs, targets) <span class="keyword">in</span> enumerate(dataloader):</span><br><span class="line">        <span class="comment"># imgs: [16, 3, 416, 416]</span></span><br><span class="line">        <span class="comment"># targets: [16, 50, 5]</span></span><br><span class="line">        imgs = Variable(imgs.type(Tensor))</span><br><span class="line">        targets = Variable(targets.type(Tensor), requires_grad=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 清空优化器中的缓存梯度</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line"></span><br><span class="line">        loss = model(imgs, targets)</span><br><span class="line"></span><br><span class="line">        loss.backward() <span class="comment"># 执行反向传播算法</span></span><br><span class="line">        optimizer.step() <span class="comment"># 根据梯度对参数进行更新</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 打印当前训练状态的各项损失值</span></span><br><span class="line">        print(</span><br><span class="line">            <span class="string">"[Epoch %d/%d, Batch %d/%d] [Losses: x %f, y %f, w %f, h %f, conf %f, cls %f, total %f, recall: %.5f, precision: %.5f]"</span></span><br><span class="line">            % (</span><br><span class="line">                epoch,</span><br><span class="line">                opt.epochs,</span><br><span class="line">                batch_i,</span><br><span class="line">                len(dataloader),</span><br><span class="line">                model.losses[<span class="string">"x"</span>],</span><br><span class="line">                model.losses[<span class="string">"y"</span>],</span><br><span class="line">                model.losses[<span class="string">"w"</span>],</span><br><span class="line">                model.losses[<span class="string">"h"</span>],</span><br><span class="line">                model.losses[<span class="string">"conf"</span>],</span><br><span class="line">                model.losses[<span class="string">"cls"</span>],</span><br><span class="line">                loss.item(),</span><br><span class="line">                model.losses[<span class="string">"recall"</span>],</span><br><span class="line">                model.losses[<span class="string">"precision"</span>],</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 记录当前处理过的图片的总数</span></span><br><span class="line">        model.seen += imgs.size(<span class="number">0</span>) <span class="comment"># 16</span></span><br><span class="line">    <span class="keyword">if</span> epoch % opt.checkpoint_interval == <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># 调用 ./models.py 文件中的 save_weights 函数, 将训练好的参数权重进行存储</span></span><br><span class="line">        model.save_weights(<span class="string">"%s/%d.weights"</span> % (opt.checkpoint_dir, epoch))</span><br></pre></td></tr></table></figure><h2 id="testpy"><a class="markdownIt-Anchor" href="#testpy"></a> <a href="http://test.py" target="_blank" rel="noopener">test.py</a> 测试脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./test.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> utils.utils <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> utils.datasets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> utils.parse_config <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">from</span> torch.autograd <span class="keyword">import</span> Variable</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"--batch_size"</span>, type=int, default=<span class="number">16</span>, help=<span class="string">"size of each image batch"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--model_config_path"</span>, type=str, default=<span class="string">"config/yolov3.cfg"</span>, help=<span class="string">"path to model config file"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--data_config_path"</span>, type=str, default=<span class="string">"config/coco.data"</span>, help=<span class="string">"path to data config file"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--weights_path"</span>, type=str, default=<span class="string">"weights/yolov3.weights"</span>, help=<span class="string">"path to weights file"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--class_path"</span>, type=str, default=<span class="string">"data/coco.names"</span>, help=<span class="string">"path to class label file"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--iou_thres"</span>, type=float, default=<span class="number">0.5</span>, help=<span class="string">"iou threshold required to qualify as detected"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--conf_thres"</span>, type=float, default=<span class="number">0.5</span>, help=<span class="string">"object confidence threshold"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--nms_thres"</span>, type=float, default=<span class="number">0.45</span>, help=<span class="string">"iou thresshold for non-maximum suppression"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--n_cpu"</span>, type=int, default=<span class="number">0</span>, help=<span class="string">"number of cpu threads to use during batch generation"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--img_size"</span>, type=int, default=<span class="number">416</span>, help=<span class="string">"size of each image dimension"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"--use_cuda"</span>, type=bool, default=<span class="keyword">True</span>, help=<span class="string">"whether to use cuda if available"</span>)</span><br><span class="line">opt = parser.parse_args([])</span><br><span class="line">print(opt)</span><br><span class="line"></span><br><span class="line">cuda = torch.cuda.is_available() <span class="keyword">and</span> opt.use_cuda</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据集配置(路径)</span></span><br><span class="line">data_config = parse_data_config(opt.data_config_path)</span><br><span class="line">test_path = data_config[<span class="string">"valid"</span>]</span><br><span class="line">num_classes = int(data_config[<span class="string">"classes"</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化网络模型结构</span></span><br><span class="line">model = Darknet(opt.model_config_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用 ./models.py 文件中的 load_weights 函数加载模型的预训练权重</span></span><br><span class="line">model.load_weights(opt.weights_path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> cuda:</span><br><span class="line">    model = model.cuda()</span><br><span class="line"></span><br><span class="line">model.eval() <span class="comment"># 将模型置于推演模式eval</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据集加载器, 这里需要根据数据的标签计算准确率, 因此需要使用ListDataset</span></span><br><span class="line">dataset = ListDataset(test_path)</span><br><span class="line">dataloader = torch.utils.data.DataLoader(dataset, batch_size=opt.batch_size, shuffle=<span class="keyword">False</span>, num_workers=opt.n_cpu)</span><br><span class="line"></span><br><span class="line">Tensor = torch.cuda.FloatTensor <span class="keyword">if</span> cuda <span class="keyword">else</span> torch.FloatTensor</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Compute mAP..."</span>)</span><br><span class="line"></span><br><span class="line">all_detections = []</span><br><span class="line">all_annotations = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> batch_i, (_, imgs, targets) <span class="keyword">in</span> enumerate(tqdm.tqdm(dataloader, desc=<span class="string">"Detecting objects"</span>)):</span><br><span class="line">    imgs = Variable(imgs.type(Tensor))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad(): <span class="comment"># 禁止计算梯度, 加快模型运算速度</span></span><br><span class="line">        outputs = model(imgs)</span><br><span class="line">        <span class="comment"># 对计算结果执行 NMS 算法</span></span><br><span class="line">        <span class="comment"># outputs的shape为:[batch_size, m, 7]</span></span><br><span class="line">        outputs = non_max_suppression(outputs, <span class="number">80</span>, conf_thres=opt.conf_thres, nms_thres=opt.nms_thres)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> output, annotations <span class="keyword">in</span> zip(outputs, targets): <span class="comment">#targets的shape为:[batch_size, n, 5]</span></span><br><span class="line">        <span class="comment"># 根据类别的数量创建占位空间, all_detections为一个列表, 列表中只有一个元素,</span></span><br><span class="line">        <span class="comment"># 该元素还是一个列表, 该列表中有80个np元素</span></span><br><span class="line">        all_detections.append([np.array([]) <span class="keyword">for</span> _ <span class="keyword">in</span> range(num_classes)])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> output <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="comment"># 获取预测结果的相应值</span></span><br><span class="line">            pred_boxes = output[:, :<span class="number">5</span>].cpu().numpy() <span class="comment"># 坐标和包含物体的概率obj_conf</span></span><br><span class="line">            scores = output[:, <span class="number">4</span>].cpu().numpy() <span class="comment"># 置信度</span></span><br><span class="line">            pred_labels = output[:, <span class="number">-1</span>].cput().numpy() <span class="comment"># 类别编号</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 按照置信度对预测的box进行排序</span></span><br><span class="line">            sort_i = np.argsort(scores)</span><br><span class="line">            pred_labels = pred_labels[sort_i]</span><br><span class="line">            pred_boxes = pred_boxes[sort_i]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> label <span class="keyword">in</span> range(num_classes):</span><br><span class="line">                <span class="comment"># all_detections是只有一个元素的列表, 因此这里用-1,</span></span><br><span class="line">                <span class="comment"># 获取所有预测类别为label的预测box, 可以将all_detections的shape看作为[1,1,80]</span></span><br><span class="line">                all_detections[<span class="number">-1</span>][label] = pred_boxes[pred_labels == label]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># [1,1,80]</span></span><br><span class="line">        all_annotations.append([np.array([]) <span class="keyword">for</span> _ <span class="keyword">in</span> range(num_classes)])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> any(annotations[:, <span class="number">-1</span>] &gt; <span class="number">0</span>):</span><br><span class="line">            annotations_labels = annotations[annotations[:, <span class="number">-1</span>] &gt; <span class="number">0</span>, <span class="number">0</span>].numpy() <span class="comment"># 获取类别编号</span></span><br><span class="line">            _annotation_boxes = annotations[annotations[:, <span class="number">-1</span>] &gt; <span class="number">0</span>, <span class="number">1</span>:].numpy() <span class="comment"># 获取box坐标</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 将box的格式转换成x1,y1,x2,y2的形式, 同时将图片放缩至opt.img_size大小</span></span><br><span class="line">            annotation_boxes = np.empty_like(_annotation_boxes)</span><br><span class="line">            annotation_boxes[:, <span class="number">0</span>] = _annotation_boxes[:, <span class="number">0</span>] - _annotation_boxes[:, <span class="number">2</span>] / <span class="number">2</span></span><br><span class="line">            annotation_boxes[:, <span class="number">1</span>] = _annotation_boxes[:, <span class="number">1</span>] - _annotation_boxes[:, <span class="number">3</span>] / <span class="number">2</span></span><br><span class="line">            annotation_boxes[:, <span class="number">2</span>] = _annotation_boxes[:, <span class="number">0</span>] + _annotation_boxes[:, <span class="number">2</span>] / <span class="number">2</span></span><br><span class="line">            annotation_boxes[:, <span class="number">3</span>] = _annotation_boxes[:, <span class="number">1</span>] + _annotation_boxes[:, <span class="number">3</span>] / <span class="number">2</span></span><br><span class="line">            <span class="comment"># 因为原始的标签数据是以小数形式存储的, 所以可以直接利用乘法进行放缩</span></span><br><span class="line">            annotation_boxes *= opt.img_size</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> label <span class="keyword">in</span> range(num_classes):</span><br><span class="line">                all_annotations[<span class="number">-1</span>][label] = annotation_boxes[annotation_labels == label, :]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以字典形式记录每一类的mAP值</span></span><br><span class="line">average_precisions = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> label <span class="keyword">in</span> range(num_classes):</span><br><span class="line">    true_positives = []</span><br><span class="line">    scores = []</span><br><span class="line">    num_annotations = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> tqdm.tqdm(range(len(all_annotations)), desc=<span class="string">"Computing AP for class '&#123;&#125;'"</span>.format(label)):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取同类的预测结果和标签信息, i代表当前图片在batch中的位置</span></span><br><span class="line">        detections = all_detections[i][label]</span><br><span class="line">        annotations = all_annotations[i][label]</span><br><span class="line"></span><br><span class="line">        num_annotations += annotations.shape[<span class="number">0</span>]</span><br><span class="line">        detected_annotations = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> *bbox, score <span class="keyword">in</span> detections:</span><br><span class="line">            scores.append(score)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> annotations.shape[<span class="number">0</span>] == <span class="number">0</span>:</span><br><span class="line">                true_positives.addpend(<span class="number">0</span>) <span class="comment"># 当前box并非真正例</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 利用./utils/utils.py文件中的bbox_iou_numpy函数获取交并比矩阵(都是同类的box)</span></span><br><span class="line">            overlaps = bbox_iou_numpy(np.expand_dims(bbox, axis=<span class="number">0</span>), annotations)</span><br><span class="line">            assigned_annotation = np.argmax(overlaps, axis=<span class="number">1</span>) <span class="comment"># 获取最大交并比的下标</span></span><br><span class="line">            max_overlap = overlaps[<span class="number">0</span>, assigned_annotation] <span class="comment"># 获取最大交并比</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> max_overlap &gt;= opt.iou_thres <span class="keyword">and</span> assigned_annotation <span class="keyword">not</span> <span class="keyword">in</span> detected_annotations:</span><br><span class="line">                true_positives.append(<span class="number">1</span>)</span><br><span class="line">                detected_annotations.append(assigned_annotation)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                true_positives.append(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果当前类没有出现在该图片中, 在当前类的 AP 为 0</span></span><br><span class="line">    <span class="keyword">if</span> num_annotations == <span class="number">0</span>:</span><br><span class="line">        average_precisions[label] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    true_positives = np.array(true_positives) <span class="comment"># 将列表转化成numpy数组</span></span><br><span class="line">    false_positives = np.ones_like(true_positives) - true_positives</span><br><span class="line"></span><br><span class="line">    <span class="comment">#按照socre进行排序</span></span><br><span class="line">    indices = np.argsort(-np.array(scores))</span><br><span class="line">    false_positives = false_positives[indices]</span><br><span class="line">    true_positives = true_positives[indices]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 统计假正例和真正例</span></span><br><span class="line">    false_positives = np.cumsum(false_positives)</span><br><span class="line">    true_positives = np.cumsum(true_positives)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算召回率和准确率</span></span><br><span class="line">    recall = true_positives / num_annotations</span><br><span class="line">    precision = true_positives / np.maximum(true_positives + false_positives, np.finfo(np.float64).eps)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调用utils.py文件中的compute_ap函数计算average precision</span></span><br><span class="line">    average_precision = compute_ap(recall, precision)</span><br><span class="line">    average_precisions[label] = average_precision</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Average Precisions:"</span>)</span><br><span class="line"><span class="keyword">for</span> c, ap <span class="keyword">in</span> average_precisions.items():</span><br><span class="line">    print(<span class="string">"+ Class '&#123;&#125;' - AP: &#123;&#125;"</span>.format(c, ap))</span><br><span class="line"></span><br><span class="line">mAP = np.mean(list(average_precisions.values()))</span><br><span class="line">print(<span class="string">"mAP: &#123;&#125;"</span>.format(mAP))</span><br></pre></td></tr></table></figure><h1 id="六-辅助函数及算法实现目标函数-nms算法等"><a class="markdownIt-Anchor" href="#六-辅助函数及算法实现目标函数-nms算法等"></a> (六) 辅助函数及算法实现(目标函数, NMS算法等)</h1><h2 id="utilspy"><a class="markdownIt-Anchor" href="#utilspy"></a> <a href="http://utils.py" target="_blank" rel="noopener">utils.py</a></h2><h3 id="load_classes"><a class="markdownIt-Anchor" href="#load_classes"></a> load_classes()</h3><h3 id="weights_init_normal"><a class="markdownIt-Anchor" href="#weights_init_normal"></a> weights_init_normal()</h3><h3 id="compute_ap"><a class="markdownIt-Anchor" href="#compute_ap"></a> compute_ap()</h3><h3 id="bbox_iou"><a class="markdownIt-Anchor" href="#bbox_iou"></a> bbox_iou()</h3><p>在 <code>build_targets</code> 函数中, 使用了 <code>bbox_iou()</code> 函数来计算两组 box 之间的 iou 大小, 代码实现逻辑如下所示:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#./utils/utils.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bbox_iou</span><span class="params">(box1, box2, x1y1x2y2=True)</span>:</span></span><br><span class="line">    <span class="comment"># 返回 box1 和 box2 的 iou, box1 和 box2 的 shape 要么相同, 要么其中一个为[1,4]</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> x1y1x2y2:</span><br><span class="line">        <span class="comment"># 获取 box1 和 box2 的左上角和右下角坐标</span></span><br><span class="line">        b1_x1, b1_x2 = box1[:, <span class="number">0</span>] - box1[:, <span class="number">2</span>] / <span class="number">2</span>, box1[:, <span class="number">0</span>] + box1[:, <span class="number">2</span>] / <span class="number">2</span></span><br><span class="line">        b1_y1, b1_y2 = box1[:, <span class="number">1</span>] - box1[:, <span class="number">3</span>] / <span class="number">2</span>, box1[:, <span class="number">1</span>] + box1[:, <span class="number">3</span>] / <span class="number">2</span></span><br><span class="line">        b2_x1, b2_x2 = box2[:, <span class="number">0</span>] - box2[:, <span class="number">2</span>] / <span class="number">2</span>, box2[:, <span class="number">0</span>] + box2[:, <span class="number">2</span>] / <span class="number">2</span></span><br><span class="line">        b2_y1, b2_y2 = box2[:, <span class="number">1</span>] - box2[:, <span class="number">3</span>] / <span class="number">2</span>, box2[:, <span class="number">1</span>] + box2[:, <span class="number">3</span>] / <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 获取 box1 和 box2 的左上角和右下角坐标</span></span><br><span class="line">        b1_x1, b1_y1, b1_x2, b1_y2 = box1[:, <span class="number">0</span>], box1[:, <span class="number">1</span>], box1[:, <span class="number">2</span>], box1[:, <span class="number">3</span>]</span><br><span class="line">        b2_x1, b2_y1, b2_x2, b2_y2 = box2[:, <span class="number">0</span>], box2[:, <span class="number">1</span>], box2[:, <span class="number">2</span>], box2[:, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取相交矩形的左上角和右下角坐标</span></span><br><span class="line">    <span class="comment"># 注意, torch.max 函数要求输入的两个参数要么 shape 相同, 此时在相同位置上进行比较并取最大值</span></span><br><span class="line">    <span class="comment"># 要么其中一个 shape 的第一维为 1, 此时会自动将该为元素与另一个 box 的所有元素做比较, 这里使用的就是该用法.</span></span><br><span class="line">    <span class="comment"># 具体来说, b1_x1 为 [1, 1], b2_x1 为 [3, 1], 此时会有 b1_x1 中的一条数据分别与 b2_x1 中的三条数据做比较并取最大值</span></span><br><span class="line">    inter_rect_x1 = torch.max(b1_x1, b2_x1)</span><br><span class="line">    inter_rect_y1 = torch.max(b1_y1, b2_y1)</span><br><span class="line">    inter_rect_x2 = torch.min(b1_x2, b2_x2)</span><br><span class="line">    inter_rect_y2 = torch.min(b1_y2, b2_y2)</span><br><span class="line">    <span class="comment"># 计算相交矩形的面积</span></span><br><span class="line">    inter_area = torch.clamp(inter_rect_x2 - inter_rect_x1 + <span class="number">1</span>, min=<span class="number">0</span>) * torch.clamp(</span><br><span class="line">        inter_rect_y2 - inter_rect_y1 + <span class="number">1</span>, min=<span class="number">0</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 分别求 box1 矩形和 box2 矩形的面积.</span></span><br><span class="line">    b1_area = (b1_x2 - b1_x1 + <span class="number">1</span>) * (b1_y2 - b1_y1 + <span class="number">1</span>)</span><br><span class="line">    b2_area = (b2_x2 - b2_x1 + <span class="number">1</span>) * (b2_y2 - b2_y1 + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算 iou 并将其返回</span></span><br><span class="line">    iou = inter_area / (b1_area + b2_area - inter_area + <span class="number">1e-16</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> iou</span><br></pre></td></tr></table></figure><h3 id="bbox_iou_numpy"><a class="markdownIt-Anchor" href="#bbox_iou_numpy"></a> bbox_iou_numpy()</h3><h3 id="non_max_suppression"><a class="markdownIt-Anchor" href="#non_max_suppression"></a> non_max_suppression()</h3><p>对预测的结果执行 NMS 算法, 传入的预测结果shape为: [1,10647,85], 最终会返回一个列表, 列表中的每个元素是每张图片的box组成的tensor, box的shape为: (x1, y1, x2, y2, object_conf, class_score, class_pred).<br>在 YOLO 中, 是对每一个类别(如80类)执行 NMS 算法. 而在 Faster R-CNN 中, 是对两个类进行 NMS 算法, 因此, 在 Faster R-CNN 中, 对于不同的类的 box, 如果它们的重叠度较高, 那么就会删除其中的一个.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./utils/utils.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># nms: 对于每一类(不同类之间的box不执行nms), 先选出具有最大score的box, 删除与该box交并比较大的同类box,</span></span><br><span class="line"><span class="comment"># 接着继续选下一个最大socre的box, 直至同类box为空, 然后对下一类执行nms</span></span><br><span class="line"><span class="comment"># 注意yolo与faster rcnn在执行nms算法时的不同, 前者是在多类上执行的, 后者是在两类上执行的</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">non_max_suppression</span><span class="params">(prediction, num_classes, conf_thres=<span class="number">0.5</span>, nms_thres=<span class="number">0.4</span>)</span>:</span></span><br><span class="line">    <span class="comment"># prediction的shape为: [1,10647,85], 其中, 1为batch_size, 10647是尺寸为416的图片的anchor box的总数</span></span><br><span class="line">    <span class="comment"># num_classes: 80</span></span><br><span class="line">    <span class="comment"># 移除那些置信度低于conf_thres的boxes, 同时在剩余的boxes上执行NMS算法</span></span><br><span class="line">    <span class="comment"># 返回值中box的shape为: (x1, y1, x2, y2, object_conf, class_score, class_pred)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取box的(x1,x2,y1,y2)坐标</span></span><br><span class="line">    box_corner = prediction.new(prediction.shape)</span><br><span class="line">    box_corner[:, :, <span class="number">0</span>] = prediction[:, :, <span class="number">0</span>] - prediction[:, :, <span class="number">2</span>] / <span class="number">2</span></span><br><span class="line">    box_corner[:, :, <span class="number">1</span>] = prediction[:, :, <span class="number">1</span>] - prediction[:, :, <span class="number">3</span>] / <span class="number">2</span></span><br><span class="line">    box_corner[:, :, <span class="number">2</span>] = prediction[:, :, <span class="number">0</span>] + prediction[:, :, <span class="number">2</span>] / <span class="number">2</span></span><br><span class="line">    box_corner[:, :, <span class="number">3</span>] = prediction[:, :, <span class="number">1</span>] + prediction[:, :, <span class="number">3</span>] / <span class="number">2</span></span><br><span class="line">    prediction[:, :, :<span class="number">4</span>] = box_corner[:, :, :<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># len(prediction)为Batch_size, 这里申请了占位空间, 大小为batch_size</span></span><br><span class="line">    output = [<span class="keyword">None</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(prediction))]</span><br><span class="line">    <span class="keyword">for</span> image_i, image_pred <span class="keyword">in</span> enumerate(prediction):</span><br><span class="line">        <span class="comment"># 先清除所有置信度小于conf_thres的box, conf_mask的shape为:[n], n为置信度大于阈值的box数量</span></span><br><span class="line">        conf_mask = (image_pred[:, <span class="number">4</span>] &gt;= conf_thres).squeeze() <span class="comment"># 这里的squeeze()可加可不加</span></span><br><span class="line">        image_pred = image_pred[conf_mask] <span class="comment"># image_pred的shape为[n, 85]</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> image_pred.size(<span class="number">0</span>):</span><br><span class="line">            <span class="keyword">continue</span> <span class="comment"># 如果所有的box的置信度都小于阈值, 那么就跳过当前的图片, 对下一张进行操作</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取每个box的类别的预测结果和编号(0~79), 使用了keepdim, 否则shape维数会减一(dim指定的维度会消失)</span></span><br><span class="line">        <span class="comment"># class_conf的shape为[n, 1], 代表n个box的score</span></span><br><span class="line">        <span class="comment"># class_pred的shape为[n, 1], 代表n个box的类别编号</span></span><br><span class="line">        class_conf, class_pred = torch.max(image_pred[:, <span class="number">5</span> : <span class="number">5</span> + num_classes], <span class="number">1</span>, keepdim=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 对以上结果进行汇总, shape为[n,7]: (x1,y1,x2,y2, obj_conf, class_conf, class_pred)</span></span><br><span class="line">        detections = torch.cat((image_pred[:, :<span class="number">5</span>], class_conf.float(), class_pred.float()), <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取当前image中出现过的类别号, 然后分别对每一类执行NMS算法</span></span><br><span class="line">        unique_labels = detections[:, <span class="number">-1</span>].cpu().unique()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> prediction.is_cuda:</span><br><span class="line">            unique_labels = unique_labels.cuda()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 分别对每一类执行NMS算法, 注意这点与faster rcnn不同, 后者只对两类执行nms算法, 也就是是否出现物体</span></span><br><span class="line">        <span class="comment"># faster rcnn的nms算法会有一个问题, 那就是当两个不同物体重复度较高时, fasterrcnn会忽略置信度较低的一个</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> unique_labels:</span><br><span class="line">            <span class="comment"># 获取指定类别的所有box</span></span><br><span class="line">            detections_class = detections[detections[:, <span class="number">-1</span>] == c] <span class="comment"># detections的最后一维指示类别编号</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 按照每个box的置信度进行排序(第5维代表置信度 score)</span></span><br><span class="line">            _, conf_sort_index = torch.sort(detections_class[:, <span class="number">4</span>], descending=<span class="keyword">True</span>)</span><br><span class="line">            detections_class = detections_class[conf_sort_index]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 执行NMS算法, 核心思想是先将具有最大socre的box放置在max_detections列表当中,</span></span><br><span class="line">            <span class="comment"># 然后令该box与剩余的所有同类box计算交并比, 接着删除那些具有较大交并比的box(大于阈值)</span></span><br><span class="line">            <span class="comment"># 重复对detections_class执行上面两步操作, 知道detections_class中只剩下一个box为止</span></span><br><span class="line">            max_detections = []</span><br><span class="line">            <span class="keyword">while</span> detections_class.size(<span class="number">0</span>):</span><br><span class="line">                <span class="comment"># 将具有最大score的box添加到max_detections列表中,</span></span><br><span class="line">                <span class="comment"># 注意要将box的shape扩展成:[1,7], 方便后续max的连接(cat)</span></span><br><span class="line">                max_detections.append(detections_class[<span class="number">0</span>].unsqueeze(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 当只剩下一个box时, 当前类的nms过程终止</span></span><br><span class="line">                <span class="keyword">if</span> len(detections_class) == <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 获取当前最大socre的box与其余同类box的iou, 调用了本文件的bbox_iou()函数</span></span><br><span class="line">                ious = bbox_iou(max_detections[<span class="number">-1</span>], detections_class[<span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 移除那些交并比大于阈值的box(也即只保留交并比小于阈值的box)</span></span><br><span class="line">                detections_class = detections_class[<span class="number">1</span>:][ious &lt; nms_thres]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 将执行nms后的剩余的同类box连接起来, 最终shape为[m, 7], m为nms后同类box的数量</span></span><br><span class="line">            max_detections = torch.cat(max_detections).data</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 将计算结果添加到output返回值当中, output是一个列表, 列表中的每个元素代表这一张图片的nms后的box</span></span><br><span class="line">            <span class="comment"># 注意, 此时同一张图片的不同类的box也会连接到一起, box的最后一维会存储类别编号(4+1+1+1).</span></span><br><span class="line">            output[image_i] = (</span><br><span class="line">                max_detections <span class="keyword">if</span> output[image_i] <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">else</span> torch.cat(</span><br><span class="line">                    (output[image_i], max_detections)</span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure><h3 id="build_targets-函数"><a class="markdownIt-Anchor" href="#build_targets-函数"></a> build_targets() 函数</h3><p>该函数会根据 targets, anchors 以及预测的 box 来创建训练模型时使用的数据形式, 在 YOLO 中, 我们的训练目标不是直接的 box 坐标, 而是对其进行相应的编码, 然后在进行训练, 编码的方式如下所示, 数据的标注信息为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><msub><mi>b</mi><mi>x</mi></msub><mo separator="true">,</mo><msub><mi>b</mi><mi>y</mi></msub><mo separator="true">,</mo><msub><mi>b</mi><mi>w</mi></msub><mo separator="true">,</mo><msub><mi>b</mi><mi>h</mi></msub><mo>)</mo></mrow><annotation encoding="application/x-tex">(b_x,b_y,b_w,b_h)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>, 而我们的训练目标是$ (t_x,t_y,t_w,t_h)$, 这两组数据可以互相转换.</p><p><a href="https://wx1.sinaimg.cn/large/d7b90c85ly1fyrcrzvpfjj216g0izn52.jpg" target="_blank" rel="noopener"><img src="https://wx1.sinaimg.cn/large/d7b90c85ly1fyrcrzvpfjj216g0izn52.jpg" alt="img"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./utils/utils.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_targets</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    pred_boxes, pred_conf, pred_cls, target, anchors, num_anchors, num_classes, grid_size, ignore_thres, img_dim</span></span></span><br><span class="line"><span class="function"><span class="params">)</span>:</span></span><br><span class="line">    <span class="comment"># 参数:</span></span><br><span class="line">    <span class="comment"># pred_boxes: [1, 3, 13, 13, 4]</span></span><br><span class="line">    <span class="comment"># pred_conf: [1, 3, 13, 13]</span></span><br><span class="line">    <span class="comment"># pred_cls: [1, 3, 13, 13, 80]</span></span><br><span class="line">    <span class="comment"># target: [1, 50, 5]</span></span><br><span class="line">    <span class="comment"># anchors: [3, 2]</span></span><br><span class="line">    <span class="comment"># num_anchors: 3</span></span><br><span class="line">    <span class="comment"># num_classes: 80</span></span><br><span class="line">    <span class="comment"># grid_size: 13(特征图谱的尺寸)</span></span><br><span class="line">    <span class="comment"># ignore_thres: 0.5</span></span><br><span class="line">    <span class="comment"># img_dim: 图片尺寸</span></span><br><span class="line">    nB = target.size(<span class="number">0</span>) <span class="comment"># batch_size</span></span><br><span class="line">    nA = num_anchors <span class="comment"># 3</span></span><br><span class="line">    nC = num_classes <span class="comment"># 80</span></span><br><span class="line">    nG = grid_size <span class="comment"># 特征图谱的尺寸(eg: 13)</span></span><br><span class="line">    mask = torch.zeros(nB, nA, nG, nG) <span class="comment"># eg: [1, 3, 13, 13], 代表每个特征图谱上的 anchors 下标(每个 location 都有 3 个 anchors)</span></span><br><span class="line">    conf_mask = torch.ones(nB, nA, nG, nG) <span class="comment"># eg: [1, 3, 13, 13] 代表每个 anchor 的置信度.</span></span><br><span class="line">    tx = torch.zeros(nB, nA, nG, nG) <span class="comment"># 申请占位空间, 存放每个 anchor 的中心坐标</span></span><br><span class="line">    ty = torch.zeros(nB, nA, nG, nG) <span class="comment"># 申请占位空间, 存放每个 anchor 的中心坐标</span></span><br><span class="line">    tw = torch.zeros(nB, nA, nG, nG) <span class="comment"># 申请占位空间, 存放每个 anchor 的宽</span></span><br><span class="line">    th = torch.zeros(nB, nA, nG, nG) <span class="comment"># 申请占位空间, 存放每个 anchor 的高</span></span><br><span class="line">    tconf = torch.ByteTensor(nB, nA, nG, nG).fill_(<span class="number">0</span>) <span class="comment"># 占位空间, 存放置信度, eg: [1, 3, 13, 13]</span></span><br><span class="line">    tcls = torch.ByteTensor(nB, nA, nG, nG, nC).fill_(<span class="number">0</span>) <span class="comment"># 占位空间, 存放分类预测值, eg:[1, 3, 13, 13, 80]</span></span><br><span class="line"></span><br><span class="line">    nGT = <span class="number">0</span></span><br><span class="line">    nCorrect = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> range(nB):</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> range(target.shape[<span class="number">1</span>]):</span><br><span class="line">            <span class="keyword">if</span> target[b, t].sum() == <span class="number">0</span>: <span class="comment"># b指定的batch中的某图片, t指定了图片中的某 box(按顺序)</span></span><br><span class="line">                <span class="keyword">continue</span> <span class="comment"># 如果 box 的5个值(从标签到坐标)都为0, 那么就跳过当前的 box</span></span><br><span class="line">            nGT += <span class="number">1</span> <span class="comment"># 每找到一个非零的 box, 则真实box的数量就加一</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># Convert to position relative to box</span></span><br><span class="line">            <span class="comment"># 由于我们在存储box的坐标时, 就是按照其相对于图片的宽和高的比例存储的</span></span><br><span class="line">            <span class="comment"># 因此, 当想要获取特征图谱上的对应 box 的坐标时, 直接令其与特征图谱的尺寸相乘即可.</span></span><br><span class="line">            gx = target[b, t, <span class="number">1</span>] * nG</span><br><span class="line">            gy = target[b, t, <span class="number">2</span>] * nG</span><br><span class="line">            gw = target[b, t, <span class="number">3</span>] * nG</span><br><span class="line">            gh = target[b, t, <span class="number">4</span>] * nG</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Get grid box indices</span></span><br><span class="line">            <span class="comment"># 获取在特征图谱上的整数坐标</span></span><br><span class="line">            gi = int(gx)</span><br><span class="line">            gj = int(gy)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Get shape of gt box, 根据 box 的大小获取 shape: [1,4]</span></span><br><span class="line">            gt_box = torch.FloatTensor(np.array([<span class="number">0</span>, <span class="number">0</span>, gw, gh])).unsqueeze(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Get shape of anchor box</span></span><br><span class="line">            <span class="comment"># 相似的方法得到anchor的shape: [3, 4] , 3 代表3个anchor</span></span><br><span class="line">            anchor_shapes = torch.FloatTensor(np.concatenate((np.zeros((len(anchors), <span class="number">2</span>)), np.array(anchors)), <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 调用本文件的 bbox_iou 函数计算gt_box和anchors之间的交并比</span></span><br><span class="line">            <span class="comment"># 注意这里仅仅计算的是 shape 的交并比, 此处没有考虑位置关系.</span></span><br><span class="line">            <span class="comment"># gt_box 为 [1,4], anchors 为 [3, 4],</span></span><br><span class="line">            <span class="comment"># 最终返回的值为[3], 代表了 gt_box 与每个 anchor 的交并比大小</span></span><br><span class="line">            anch_ious = bbox_iou(gt_box, anchor_shapes)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 将交并比大于阈值的部分设置conf_mask的对应位为0(ignore)</span></span><br><span class="line">            conf_mask[b, anch_ious &gt; ignore_thres, gj, gi] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 找到匹配度最高的 anchor box, 返回下标: 0,1,2 中的一个</span></span><br><span class="line">            best_n = np.argmax(anch_ious)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 获取相应的 ground truth box, unsqueeze用于扩充维度, 使[4]变成[1,4], 以便后面的计算</span></span><br><span class="line">            gt_box = torch.FloatTensor(np.array([gx, gy, gw, gh])).unsqueeze(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 获取最佳的预测 box, pred_boxes的shape为: [1,3,13,13,4]</span></span><br><span class="line">            <span class="comment"># pred_box经过unsqueeze扩充后的shape为: [1,4]</span></span><br><span class="line">            pred_box = pred_boxes[b, best_n, gj, gi].unsqueeze(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 设置 mask 和 conf_mask</span></span><br><span class="line">            mask[b, best_n, gj, gi] = <span class="number">1</span></span><br><span class="line">            <span class="comment"># 注意, 刚刚将所有大于阈值的 conf_mask对应为都设置为了0,</span></span><br><span class="line">            <span class="comment"># 然后这里将具有最大交并比的anchor设置为1, 如此确保一个真实框只对应一个 anchor.</span></span><br><span class="line">            <span class="comment"># 由于 conf_mask 的默认值为1, 因此, 剩余的box可看做是负样本</span></span><br><span class="line">            conf_mask[b, best_n, gj, gi] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 设置中心坐标, 该坐标是相对于 cell的左上角而言的, 所以是一个小于1的数</span></span><br><span class="line">            tx[b, best_n, gj, gi] = gx - gi</span><br><span class="line">            ty[b, best_n, gj, gi] = gy - gj</span><br><span class="line">            <span class="comment"># 设置宽和高, 注意, 这里会转化成训练时使用的宽高值</span></span><br><span class="line">            tw[b, best_n, gj, gi] = math.log(gw / anchors[best_n][<span class="number">0</span>] + <span class="number">1e-16</span>)</span><br><span class="line">            th[b, best_n, gj, gi] = math.log(gh / anchors[best_n][<span class="number">1</span>] + <span class="number">1e-16</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 获取当前 box 的 标签</span></span><br><span class="line">            target_label = int(target[b, t, <span class="number">0</span>])</span><br><span class="line">            <span class="comment"># tcls: [1,3,13,13,80]</span></span><br><span class="line">            <span class="comment"># 将当前true box对应的 anchor 的正确类别设置为1</span></span><br><span class="line">            tcls[b, best_n, gj, gi, target_label] = <span class="number">1</span></span><br><span class="line">            <span class="comment"># 将置信度设置为 1</span></span><br><span class="line">            tconf[b, best_n, gj, gi] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 调用 bbox_iou 函数计算 ground truth 和最佳匹配的预测box之间的 iou</span></span><br><span class="line">            <span class="comment"># 注意, 此时的 gt_box为 [gx,gy,gw,gh], 不是 [tx,ty,tw,th]</span></span><br><span class="line">            <span class="comment"># gt_box的shape为[1,4], pred_box为最佳匹配的预测 box, 其shape也为[1,4]</span></span><br><span class="line">            iou = bbox_iou(gt_box, pred_box, x1y1x2y2=<span class="keyword">False</span>)</span><br><span class="line">            <span class="comment"># pred_cls的shape为[1,3,13,13,80], 获取最佳匹配anchor box的最大概率类别的下标</span></span><br><span class="line">            pred_label = torch.argmax(pred_cls[b, best_n, gj, gi])</span><br><span class="line">            <span class="comment"># pred_conf的shape为[1,3,13,13], 获取最佳匹配anchor box的置信度</span></span><br><span class="line">            score = pred_conf[b, best_n, gj, gi]</span><br><span class="line">            <span class="keyword">if</span> iou &gt; <span class="number">0.5</span> <span class="keyword">and</span> pred_label == target_label <span class="keyword">and</span> score &gt; <span class="number">0.5</span>:</span><br><span class="line">                nCorrect += <span class="number">1</span> <span class="comment"># 如果 iou 和 score 大于阈值, 并且标签预测正确, 则正确项增1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将所有需要的信息都返回, 从这里可以看出, 每一个 YOLO 层都会执行一次预测.</span></span><br><span class="line">    <span class="keyword">return</span> nGT, nCorrect, mask, conf_mask, tx, ty, tw, th, tconf, tcls</span><br></pre></td></tr></table></figure><h1 id="参考文献"><a class="markdownIt-Anchor" href="#参考文献"></a> 参考文献</h1><p><a href="https://github.com/eriklindernoren/PyTorch-YOLOv3#train" target="_blank" rel="noopener">https://github.com/eriklindernoren/PyTorch-YOLOv3#train</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在正式介绍 YOLOv3 之前, 我们先将其和 YOLO 的其他版本做一个简单的比较, 它们的网络结构对比如下所示:&lt;/p&gt;
&lt;p&gt;模型实现总共会分为以下六部分:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(一) 配置文件以及解析&lt;/li&gt;
&lt;li&gt;(二) 搭建YOLO模型框架&lt;/li&gt;

      
    
    </summary>
    
      <category term="Computer Vision" scheme="http://yoursite.com/categories/Computer-Vision/"/>
    
    
      <category term="yolo" scheme="http://yoursite.com/tags/yolo/"/>
    
  </entry>
  
  <entry>
    <title>YOLO Summary</title>
    <link href="http://yoursite.com/2019/07/14/YOLO/"/>
    <id>http://yoursite.com/2019/07/14/YOLO/</id>
    <published>2019-07-14T15:14:15.000Z</published>
    <updated>2019-08-03T15:32:48.520Z</updated>
    
    <content type="html"><![CDATA[<h1 id="yolo-笔记"><a class="markdownIt-Anchor" href="#yolo-笔记"></a> YOLO 笔记</h1><p>YOLOv3在预测每个bouding box的objectness score时，使用的是logistic regression。</p><p>与faster rcnn不同的是，我们的系统只会给每个gt object指派一个bounding box。如果没有指派的话，就说明没有对象的box坐标，只有objectness。</p><h2 id="feature-extractor"><a class="markdownIt-Anchor" href="#feature-extractor"></a> Feature Extractor</h2><p>作者使用了一个新的网络模型来提取特征，主要是在Darknet-19中引入了residual network stuff，最终模型的卷积层数达到53层，也就是Darknet-53。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;yolo-笔记&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#yolo-笔记&quot;&gt;&lt;/a&gt; YOLO 笔记&lt;/h1&gt;
&lt;p&gt;YOLOv3在预测每个bouding box的objectness score时，使用的是logistic reg
      
    
    </summary>
    
      <category term="Computer Vision" scheme="http://yoursite.com/categories/Computer-Vision/"/>
    
    
  </entry>
  
  <entry>
    <title>RefineDet Summary</title>
    <link href="http://yoursite.com/2019/07/10/RefineDet-Summary/"/>
    <id>http://yoursite.com/2019/07/10/RefineDet-Summary/</id>
    <published>2019-07-09T17:53:13.000Z</published>
    <updated>2019-07-09T17:58:38.958Z</updated>
    
    <content type="html"><![CDATA[<h1 id="refinedet总结"><a class="markdownIt-Anchor" href="#refinedet总结"></a> RefineDet总结</h1><h2 id="论文背景"><a class="markdownIt-Anchor" href="#论文背景"></a> 论文背景</h2><p>论文全称：Single-Shot Refinement Neural Network for Object Detection</p><p>论文链接：<a href="https://arxiv.org/abs/1711.06897" target="_blank" rel="noopener">https://arxiv.org/abs/1711.06897</a></p><p>论文日期：2018.1.3</p><p>论文代码：<a href="https://github.com/sfzhang15/RefineDet" target="_blank" rel="noopener">https://github.com/sfzhang15/RefineDet</a></p><p>本文提出了一个新型单一神经网络检测算法，既保证了准确率又保障了效率。</p><h2 id="算法简介"><a class="markdownIt-Anchor" href="#算法简介"></a> 算法简介</h2><p>RefineDet包含两个连接模型，命名为<strong>提炼锚模型（ARM）<strong>与</strong>目标检测模型（ODM）</strong>。<br>前者旨在滤除负样本锚以减少分类器的搜索空间，以及粗略调整锚的位置和大小，以便为后续的回归器提供更好的初始化。后者使用前者提炼的精确锚作为输入来进一步提高回归和对多类标签的预测。</p><p>其中，本文设计了一个<strong>转换连接块</strong>，<strong>使用了多任务联合损失函数</strong>,将前者的特征转化为后者中预测定位、尺寸、类别标签。使得整体算法是一个<strong>端到端的算法</strong>。</p><p>网络采用了类似FPN的思想, 通过 Transfer Connection Block 将特征图谱在两个模块之间传送, 不仅提升了的精度, 同时还在速度方面取得了与one-stage方案相媲美的表现</p><p>主流目标检测算法：</p><ul><li><p>两阶段的目标检测算法：先提取稀疏的候选区域，然后进行分类与回归。e.g:<code>fast R CNN</code>、 <code>faster R CNN</code></p></li><li><p>一阶段的目标检测算法：在整张图片中采用不同的尺寸与比例进行常规密集的采样。e.g:<code>ssd</code></p></li></ul><p>目前两阶段的算法在准确率是表现优于一阶段的算法，<strong>最主要的原因是样本不平衡的问题</strong>。</p><p><a href="https://imgchr.com/i/Z64Nlt" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/07/10/Z64Nlt.png" alt="Z64Nlt.png"></a></p><p>图片仅显示了用于检测的层，灰青色的平行四边形表示与不同特征层相关联的精炼的锚框，星星代表精炼的锚框的中心，这些锚框在图像上没有常规的铺设。</p><h3 id="实验结果"><a class="markdownIt-Anchor" href="#实验结果"></a> 实验结果</h3><p>准确率：<br>RefineDet算法使用VGG16神经网络在VOC2007与2012数据集上准确率分别达到了85.8%和86.8% mAPs。<br>效率：<br>在 NVIDIA Titan X GPU上使用320×320和512×512尺寸的输入，速度分别达到了40.2 FPS和24.1 FPS。</p><h2 id="算法细节"><a class="markdownIt-Anchor" href="#算法细节"></a> 算法细节</h2><h3 id="主要元素"><a class="markdownIt-Anchor" href="#主要元素"></a> 主要元素</h3><ol><li>使用TCB将ARM中的特征传递到ODM中；</li><li>使用两步的级联回归，对于不同位置尺寸的目标进行准确回归；</li><li>负样本锚过滤，删除良好分类的负样本锚来缓解不平衡样本问题。</li></ol><h3 id="tcbtransfer-connection-block"><a class="markdownIt-Anchor" href="#tcbtransfer-connection-block"></a> TCB(Transfer Connection Block)</h3><p>通过TCB，ARM与ODM可以共享特征；<br>通过添加高等级特征来传递特征使大规模的文本信息成为一个整体，从而提高检测精度。<br><img src="https://s2.ax1x.com/2019/07/10/Z6I8xI.png" alt="Z6I8xI.png"><br>为了匹配维度，论文使用逆卷积操作来使高层的特征图变大，然后使用像素级的方式相加， 然后，论文在求和之后添加卷积层以确保用于检测的特征的可辨别性。<br>ARM会精炼边界框，返回相对于对应单元格的四个偏移量和两个置信度分数。<br>浅层feature map（size较大的蓝色矩形块）融合了高层feature map的信息，然后预测bbox是基于每层feature map（每个蓝色矩形块）进行，最后将各层结果再整合到一起。而在SSD中浅层的feature map是直接拿来用的（并没有和高层的feature map融合），也就是对bbox的预测是在每一层上进行的，预测得到结果后再将各层结果整合在一起。</p><h3 id="负样本过滤"><a class="markdownIt-Anchor" href="#负样本过滤"></a> 负样本过滤</h3><p>在训练过程中，负样本中置信度大于0.99的丢弃，<br>在推测阶段，超过0.99的也有丢弃。</p><h2 id="训练"><a class="markdownIt-Anchor" href="#训练"></a> 训练</h2><h3 id="数据增强"><a class="markdownIt-Anchor" href="#数据增强"></a> 数据增强</h3><p>拉伸，裁剪，翻转。</p><h3 id="锚的设计与匹配"><a class="markdownIt-Anchor" href="#锚的设计与匹配"></a> 锚的设计与匹配</h3><p>为了处理不同大小的目标，论文选择了四个特征图层，对于VGG-16和ResNet1015，其总步幅大小为8,16,32和64像素，结合用于预测的几种不同尺度与比例的锚点。 每个特征层与一个特定尺度的锚（即，尺寸是相应层的总步幅尺寸的4倍）和三个纵横比（即，0.5,1.0和2.0）相关联。 论文按照[53]中不同层次的锚点尺度设计，确保不同尺度的锚点在图像上具有相同的平铺密度。 同时，在训练阶段，论文根据jaccard重叠确定锚点与地面实例框之间的对应关系，并据此对整个网络进行跟踪。 具体而言，论文首先将每个地面实况与具有最佳重叠分数的锚框匹配，然后将锚框与任何重叠高于0.5的地面实况相匹配。</p><h3 id="hard-negative-mining"><a class="markdownIt-Anchor" href="#hard-negative-mining"></a> Hard Negative Mining</h3><p>与SSD相同，论文选择一些具有最高损失值的负锚箱，使得负数和正数之间的比率低于3：1，而不是使用所有负数锚或在训练中随机选择负锚。</p><h3 id="损失函数"><a class="markdownIt-Anchor" href="#损失函数"></a> 损失函数</h3><p><img src="https://s2.ax1x.com/2019/07/10/Z6oKO0.png" alt="Z6oKO0.png"></p><p>在ARM部分包含binary classification损失Lb和回归损失Lr；</p><p>同理在ODM部分包含multi-class classification损失Lm和回归损失Lr。<br>Lb是交叉熵损失函数<br>Lm是softmax<br>Lr是L1损失函数<br>N是正样本的数量</p><h3 id="优化"><a class="markdownIt-Anchor" href="#优化"></a> 优化</h3><p>本文对基于ReﬁneDet的VGG-16的额外添加的两层卷积层（例如conv6 1 and conv6 2)利用xaVier方法进行了初始化；<br>然后对于基于ReﬁneDet的ResNet-101的额外的残差块（res6）进行归一化；<br>训练利用默认 batch size 设置为32；<br>微调使用0.9 momentum and 0.0005 weight decay的SGD；<br>初始化学习率为0.001.</p><h3 id="推断"><a class="markdownIt-Anchor" href="#推断"></a> 推断</h3><p>对于所有提炼的框，对于每张图片输出400个高置信度检测器，对于每个类别使用阈值为0.45的非极大值抑值，保留200个框。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;refinedet总结&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#refinedet总结&quot;&gt;&lt;/a&gt; RefineDet总结&lt;/h1&gt;
&lt;h2 id=&quot;论文背景&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=
      
    
    </summary>
    
      <category term="Computer Vision" scheme="http://yoursite.com/categories/Computer-Vision/"/>
    
    
      <category term="RefineDet" scheme="http://yoursite.com/tags/RefineDet/"/>
    
  </entry>
  
  <entry>
    <title>Automatic Indium Packaging Device and Its Control System</title>
    <link href="http://yoursite.com/2019/06/08/Automatic-Indium-Packaging-Device-and-Its-Control-System/"/>
    <id>http://yoursite.com/2019/06/08/Automatic-Indium-Packaging-Device-and-Its-Control-System/</id>
    <published>2019-06-08T12:41:17.000Z</published>
    <updated>2019-06-10T08:48:30.172Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自动铟封设备及其控制系统"><a class="markdownIt-Anchor" href="#自动铟封设备及其控制系统"></a> 自动铟封设备及其控制系统</h1><p>铟封是一种重要的软金属封接方法，陀螺的玻璃腔体和金属电极采用铟封，实现谐振腔的真空。目前铟封多采用手<br>工操作，较难实现铟环、电极和腔体孔的对准，且封接一致性差，因此本项目研制<strong>自动铟封设备</strong>，实现铟环和电极与腔体孔的自动对准放置，并施加温度和封接力。利用温度控制器、加热棒、Pt 电阻设计了<strong>温度闭环控制系统</strong>，采用位移－力控制策略，通过控制热压头的位移，结合系统刚度，实现了压封力的稳定控制。</p><p>实验表明，设备的温度控制最大偏差小于±0．3 ℃ ，压封力控制偏差小于 9 N。</p><h2 id="一-设备总体结构"><a class="markdownIt-Anchor" href="#一-设备总体结构"></a> 一、设备总体结构</h2><p>本设备的用途用来封接下图所示装置。</p><p><a href="https://imgchr.com/i/VyHZdI" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/10/VyHZdI.png" alt="VyHZdI.png"></a></p><p><strong>设备组成：</strong></p><ol><li>热压装置</li><li>作业机械手</li><li>上料装置</li><li>控制系统</li></ol><p><img src="https://s2.ax1x.com/2019/06/10/VyzeTe.png" alt="VyzeTe.png"></p><h2 id="二-热压模块"><a class="markdownIt-Anchor" href="#二-热压模块"></a> 二、热压模块</h2><p>热压装置用于实现电极的自动封接，主要由直线推杆、伺服电机、移动横梁、导向轴、直线轴承、光栅尺和压力传感器等组成，其结构如图所示。导向轴既用于构成装置的框架结构，又起导向作用，移动部分用直线轴承与导向轴配合，保证压封过程中带动电极加热装置沿直线运动。</p><p><img src="https://s2.ax1x.com/2019/06/10/V6SdED.jpg" alt="V6SdED.jpg"></p><ul><li><p>伺服电机为HF-KN43J-S100型伺服电机；</p></li><li><p>压力传感器为BK-4B型压力传感器，该传感器为轮辐式测力传感器</p></li><li><p>光栅尺选用KA-300型光栅尺，其量程为320mm，精度为±5μm</p></li></ul><p><strong>腔体移动平台</strong></p><p><img src="https://s2.ax1x.com/2019/06/10/V6i16s.png" alt="V6i16s.png"></p><h3 id="三-作业机械手"><a class="markdownIt-Anchor" href="#三-作业机械手"></a> 三、作业机械手</h3><h3 id="31-作业机械手"><a class="markdownIt-Anchor" href="#31-作业机械手"></a> 3.1 作业机械手</h3><p>作业机械手主要由三自由度运动平台和作业机械臂两部分组成。其中三自由度运动平台用于实现X、Y、Z三个方向的准确定位；作业机械臂用于实现电极的自动拾取和放置。</p><p><img src="https://s2.ax1x.com/2019/06/10/V6p6JJ.jpg" alt="V6p6JJ.jpg"></p><h3 id="32-电极的拾取"><a class="markdownIt-Anchor" href="#32-电极的拾取"></a> 3.2 电极的拾取</h3><p>作业机械臂用于实现电极的自动拾取与放置，其结构如图10所示，主要由机械手安装角座、侧板、对准检测镜、微动开关、弹簧片以及电极吸附装置等组成。加强筋用来提高安装角座的刚度。对准检测镜用于腔体与电极加热装置加中热体中间孔的对准，根据检测镜所采集的图像，调节腔体移动平台X、Y方向的位移使电极正对加热体的中间孔，保证压封位置的准确性并避免造成电极损坏。弹簧片作为柔顺机构，避免产生冲击，起到保护零件的作用。微动开关则用来防止弹簧片产生塑性变形，同时也防止拾取电极时发生碰撞，损坏位移台。</p><p><img src="https://s2.ax1x.com/2019/06/10/V699YQ.png" alt="V699YQ.png"></p><h2 id="四-电极上料装置"><a class="markdownIt-Anchor" href="#四-电极上料装置"></a> 四、电极上料装置</h2><p>电极的上料由操作人员将待压封电极放置于带有圆形凹台的上料座上，上料装置结构如图(a)所示。上料装置中的上料座为三合一上料座，如图(b)所示，D27尺寸上料座用于阴极上料， D14和D16尺寸的上料座用于阳极上料。</p><p><a href="https://imgchr.com/i/V693Ox" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/10/V693Ox.png" alt="V693Ox.png"></a></p><h2 id="五-控制系统设计"><a class="markdownIt-Anchor" href="#五-控制系统设计"></a> 五、控制系统设计</h2><h3 id="51-温度控制"><a class="markdownIt-Anchor" href="#51-温度控制"></a> 5.1 温度控制</h3><p>加热头中采用的加热元件为八光电热器件公司生产的加热棒（又称筒式加热器），如图所示，型号为HLJ2042。这种加热棒具有高效率（基本能无损耗传递热量），寿命长（发热线使用高镍合金），牢固性好（能够承受使用时机械振动及冲击），电气性能良好（具有优良的绝缘性能，特别是高温时能保持稳定的绝缘性能） ，可操作性强，结构紧凑，节省空间。</p><p><img src="https://s2.ax1x.com/2019/06/10/V6CwUU.png" alt="V6CwUU.png"></p><p>加热头中采用的温度传感器为德薄膜铂电阻温度传感器，相较于绕线式陶瓷温度传感器性价比更高，其测量范围为-70～300℃，精度1/3B级。</p><p><img src="https://s2.ax1x.com/2019/06/10/V6C05F.png" alt="V6C05F.png"></p><p>温度控制主要由温控器完成，计算机通过RS232与温控器通讯，读取温度实测值，写入温度设定值，温控器输出4-20mA标准电流信号到触发器输入端，触发器控制可控硅的通断实现加热器的工作功率，从而实现温度自动控制。</p><p>电极自动压封设备控制软件设计有温控器通讯模块，其作用是与温控器通讯，对温控器进行简单设定，读取温度实测值，写入温度设定值。其工作流程如图所示。欧姆龙温控器可以采用多种通讯方式实现与计算机的通讯，本设备采用CompoWay/F通讯方式。</p><p><img src="https://s2.ax1x.com/2019/06/10/V6P8IO.jpg" alt="V6P8IO.jpg"></p><p>温度控制软件界面如图所示：</p><p><a href="https://imgchr.com/i/V6PcWQ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/10/V6PcWQ.md.png" alt="V6PcWQ.md.png"></a></p><h3 id="52-压力控制"><a class="markdownIt-Anchor" href="#52-压力控制"></a> 5.2 压力控制</h3><p>计算机通过软件向运动控制卡发送命令，运动控制卡输出脉冲信号到步进电机驱动器，驱动器将脉冲信号放大驱动步进电机转动，直线推杆将旋转运动转换成直线运动带动热压头上下运动，而热压头会通过腔体、底板将压力施加给压力传感器，压力传感器输出电信号，并通过信号的放大、滤波，由数据采集卡采集输入到计算机，计算机控制软件将压力实测值与压力设定值对比输出控制信号，实现对压力的准确控制。</p><p><img src="https://s2.ax1x.com/2019/06/10/V6iFld.jpg" alt="V6iFld.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;自动铟封设备及其控制系统&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#自动铟封设备及其控制系统&quot;&gt;&lt;/a&gt; 自动铟封设备及其控制系统&lt;/h1&gt;
&lt;p&gt;铟封是一种重要的软金属封接方法，陀螺的玻璃腔体和金属电极采用铟封，实现谐振腔的真空。
      
    
    </summary>
    
      <category term="Projects" scheme="http://yoursite.com/categories/Projects/"/>
    
    
  </entry>
  
  <entry>
    <title>Fluent</title>
    <link href="http://yoursite.com/2019/06/08/Fluent/"/>
    <id>http://yoursite.com/2019/06/08/Fluent/</id>
    <published>2019-06-08T10:12:18.000Z</published>
    <updated>2019-06-08T11:25:09.975Z</updated>
    
    <content type="html"><![CDATA[<h1 id="流体通过多孔介质滑移特性的研究"><a class="markdownIt-Anchor" href="#流体通过多孔介质滑移特性的研究"></a> 流体通过多孔介质滑移特性的研究</h1><h2 id="概要"><a class="markdownIt-Anchor" href="#概要"></a> 概要</h2><p>多孔介质与流体的相互作用在燃料电池、太阳能集热管、核废弃物处理等流体力学的研究上占有相当重要的角色。多孔介质滑移及热传递具有广泛的应用背景。它的对流以及传热的原理繁杂，特别是在交界面区域，腔体内的流动以及传热传质机理都会受到滑移效的显著影响。</p><p><img src="https://s2.ax1x.com/2019/06/08/VDQXse.png" alt="VDQXse.png"></p><h2 id="研究内容"><a class="markdownIt-Anchor" href="#研究内容"></a> 研究内容</h2><ol><li><p>基于体平均质量方程、N-S方程以及能量方程，建立自由流与多孔介质混合区域控制方程和边界条件，为使方程闭合还需配合湍流模型；</p></li><li><p>本项目拟采用低雷诺数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi><mo>−</mo></mrow><annotation encoding="application/x-tex">k-</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">−</span></span></span></span><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ε</mi></mrow><annotation encoding="application/x-tex">ε</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">ε</span></span></span></span>湍流模型模拟自由流区域，应用多孔介质的双分离湍流模型模拟多孔介质区域，模型的转换采用控制源项的方法，即利用Fluent中的用户自定义函数(UDF)实现纯流体和多孔介质的区域转换，用同一方程描述耦合的双区域与边界情况；</p></li><li><p>用MATLAB模拟解析解对比交界面的滑移速度以及纯流体区域和多孔介质区域的流动特性，全面分析横掠流动；</p></li><li><p>通过不同的物理参数条件与物理模型的选择，对比分析纯流体与多孔介质滑移的特性，总结探讨速度滑移效应的机理为传热特性的研究奠定基础。</p></li></ol><p><img src="https://s2.ax1x.com/2019/06/08/VDQg2T.jpg" alt="VDQg2T.jpg"></p><h2 id="关于udf"><a class="markdownIt-Anchor" href="#关于udf"></a> 关于UDF</h2><p>UDF是用户自己定义编辑的函数程序，它能够动态地链接到Fluent求解器中来优化求解过程和求解性能。UDF运用DEFINE宏来自定义，C程序来编写。UDF涵盖的功能十分丰富，囊括控制进口速度(inlet-velocity)、边界条件(boundary conditions)、流体属性(property)、体积与表面反应率(reaction rate)、定义Fluent输运方程中的源项以及用户自定义标量输运方程(UDS)中的源项扩散率函数等。本文运用UDF中的定义入口速度函数以及输运方程的源项功能来实现多孔介质与流体介质的区分，进而用统一的方程即单域法描述整个模型。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"udf.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CK 0.28</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> C1 1.14</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> C2 1.92</span></span><br><span class="line">DEFINE_PROFILE(inlet_x_velocity,thread, index)<span class="comment">/* inlet_x_velocity 用来定义速度入口面板中的函数。*/</span></span><br><span class="line">&#123;</span><br><span class="line">real x[ND_ND]; <span class="comment">/* 定义位置坐标 */</span></span><br><span class="line">real y;    <span class="comment">/*声明变量y*/</span></span><br><span class="line"><span class="keyword">face_t</span> f;<span class="comment">/*定义识别面的数据类型*/</span></span><br><span class="line">begin_f_loop(f, thread)<span class="comment">/*被用来形成对边界区域上所有单元面的循环*/</span></span><br><span class="line">&#123;</span><br><span class="line">F_CENTROID(x,f,thread);<span class="comment">/*面的质心的坐标可由 F_CENTROID 宏来获得*/</span></span><br><span class="line">y = x[<span class="number">1</span>];</span><br><span class="line">F_PROFILE(f, thread, index) =<span class="number">-2.</span>*y*y+<span class="number">1</span>/<span class="number">5.</span>*y;</span><br><span class="line">&#125;</span><br><span class="line">end_f_loop(f, thread)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*****************定义动量方程的源项******************************/</span></span><br><span class="line"><span class="comment">/********************************************************************/</span></span><br><span class="line">DEFINE_SOURCE(xmom_source, c, t, dS, eqn)<span class="comment">/*动量方程的源项设置*/</span></span><br><span class="line">&#123;</span><br><span class="line">real x[ND_ND];</span><br><span class="line">real r,K,y,source;</span><br><span class="line">C_CENTROID(x, c, t);</span><br><span class="line">y=x[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(y&gt;=<span class="number">0</span>&amp;&amp;y&lt;=<span class="number">0.1</span>)</span><br><span class="line">&#123; </span><br><span class="line">   r=<span class="number">1</span>;</span><br><span class="line">  K=<span class="number">1e20</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(y&gt;=<span class="number">-0.1</span>&amp;&amp;y&lt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">     r=<span class="number">0.2</span>;</span><br><span class="line">     K=<span class="number">10e-12</span>;</span><br><span class="line">&#125;</span><br><span class="line">source=-C_MU_T(c,t)*r*C_U(c, t)/K<span class="number">-1.75</span>*r*C_R(c,t)*<span class="built_in">fabs</span>(C_U(c, t))*C_U(c, t)/<span class="built_in">sqrt</span>(<span class="number">150</span>*r*r*r*K);</span><br><span class="line">dS[eqn]=-C_MU_T(c,t)*r/K<span class="number">-2.</span>*<span class="number">1.75</span>*r*C_R(c,t)*<span class="built_in">fabs</span>(C_U(c, t))/<span class="built_in">sqrt</span>(<span class="number">150</span>*r*r*r*K);</span><br><span class="line"><span class="keyword">return</span> source;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*****************定义速度的二阶导数**********************************/</span></span><br><span class="line"><span class="comment">/********************************************************************/</span></span><br><span class="line">DEFINE_ADJUST(adjust_gradient, d)</span><br><span class="line">&#123;</span><br><span class="line">Thread *t;</span><br><span class="line"><span class="keyword">cell_t</span> c;</span><br><span class="line"><span class="keyword">face_t</span> f;</span><br><span class="line"><span class="comment">/* Fill UDS with the variable. */</span></span><br><span class="line">d = Get_Domain(<span class="number">1</span>);</span><br><span class="line">thread_loop_c (t,d)</span><br><span class="line">&#123;</span><br><span class="line">begin_c_loop (c,t)</span><br><span class="line">&#123;</span><br><span class="line">C_UDSI(c,t,<span class="number">0</span>) = C_DUDX(c,t); <span class="comment">/*这里是为了计算 d2u/dx2*/</span></span><br><span class="line">&#125;</span><br><span class="line">end_c_loop (c,t)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*****************定义湍流动能k的源项*********************************/</span></span><br><span class="line"><span class="comment">/********************************************************************/</span></span><br><span class="line">DEFINE_SOURCE(k_source, c, t, dS, eqn)<span class="comment">/*湍流动能k的源项设置*/</span></span><br><span class="line">&#123;</span><br><span class="line">real x[ND_ND];</span><br><span class="line">real r,K,y,source;</span><br><span class="line">C_CENTROID(x, c, t);</span><br><span class="line">y=x[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(y&gt;=<span class="number">0</span>&amp;&amp;y&lt;=<span class="number">0.1</span>)</span><br><span class="line">&#123; </span><br><span class="line">   r=<span class="number">1</span>;</span><br><span class="line">  K=<span class="number">1e20</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(y&gt;=<span class="number">-0.1</span>&amp;&amp;y&lt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">     r=<span class="number">0.2</span>;</span><br><span class="line">     K=<span class="number">10e-12</span>;</span><br><span class="line">&#125;</span><br><span class="line">source=CK*C_R(c,t)*r*C_K(c,t)*<span class="built_in">fabs</span>(C_U(c,t))/<span class="built_in">sqrt</span>(K)-C_R(c,t)</span><br><span class="line">*C_D(c,t)+<span class="number">2</span>*C_DUDX(c,t)*C_DUDX(c,t);</span><br><span class="line">dS[eqn]=CK*C_R(c,t)*r*C_K(c,t)*<span class="built_in">fabs</span>(C_U(c,t))/(C_U(c,t)*<span class="built_in">sqrt</span>(K))</span><br><span class="line">+<span class="number">4</span>*C_DUDX(c,t)+<span class="number">2</span>*C_UDSI_G(c,t,<span class="number">0</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">return</span> source;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*****************定义湍流耗散率d的源项*********************************/</span></span><br><span class="line"><span class="comment">/**********************************************************************/</span></span><br><span class="line">DEFINE_SOURCE(d_source, c, t, dS, eqn)<span class="comment">/*湍流能量耗散率d的源项设置*/</span></span><br><span class="line">&#123;</span><br><span class="line">real x[ND_ND];</span><br><span class="line">real r,K,y,source;</span><br><span class="line">C_CENTROID(x, c, t);</span><br><span class="line">y=x[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(y&gt;=<span class="number">0</span>&amp;&amp;y&lt;=<span class="number">0.1</span>)</span><br><span class="line">&#123; </span><br><span class="line">   r=<span class="number">1</span>;</span><br><span class="line">  K=<span class="number">1e20</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(y&gt;=<span class="number">-0.1</span>&amp;&amp;y&lt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">     r=<span class="number">0.2</span>;</span><br><span class="line">     K=<span class="number">10e-12</span>;</span><br><span class="line">&#125;</span><br><span class="line">source=C1*<span class="number">2</span>*C_DUDX(c,t)*C_DUDX(c,t)*C_D(c,t)/C_K(c,t)</span><br><span class="line">-C2*C_R(c,t)*C_D(c,t)*C_D(c,t)/C_K(c,t)+C2*C_R(c,t)*CK*r</span><br><span class="line">*C_D(c,t)*<span class="built_in">fabs</span>(C_U(c,t))/<span class="built_in">sqrt</span>(K);</span><br><span class="line">dS[eqn]=C2*C_R(c,t)*CK*r*C_D(c,t)*<span class="built_in">fabs</span>(C_U(c,t))/(C_U(c,t)*<span class="built_in">sqrt</span>(K))</span><br><span class="line">+<span class="number">4</span>*C1*C_D(c,t)*C_DUDX(c,t)/C_K(c,t)+<span class="number">2</span>*C1*C_D(c,t)*</span><br><span class="line">C_UDSI_G(c,t,<span class="number">0</span>)[<span class="number">0</span>]/C_K(c,t);</span><br><span class="line"><span class="keyword">return</span> source;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*******************************end***********************************/</span></span><br></pre></td></tr></table></figure><hr><p>论文百度网盘链接地址：</p><p>链接：<a href="https://pan.baidu.com/s/1H_e-D4O-xkxVdjM0ZzWULw" target="_blank" rel="noopener">https://pan.baidu.com/s/1H_e-D4O-xkxVdjM0ZzWULw</a><br>提取码：vcqv</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;流体通过多孔介质滑移特性的研究&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#流体通过多孔介质滑移特性的研究&quot;&gt;&lt;/a&gt; 流体通过多孔介质滑移特性的研究&lt;/h1&gt;
&lt;h2 id=&quot;概要&quot;&gt;&lt;a class=&quot;markdownIt-Anc
      
    
    </summary>
    
      <category term="Projects" scheme="http://yoursite.com/categories/Projects/"/>
    
    
  </entry>
  
  <entry>
    <title>陀螺组件机器视觉精密装配设备开发</title>
    <link href="http://yoursite.com/2019/06/08/%E8%96%84%E7%89%87%E7%BB%84%E4%BB%B6%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/06/08/薄片组件项目总结/</id>
    <published>2019-06-08T06:44:16.000Z</published>
    <updated>2019-06-08T08:37:58.261Z</updated>
    
    <content type="html"><![CDATA[<h1 id="陀螺组件机器视觉精密装配设备开发"><a class="markdownIt-Anchor" href="#陀螺组件机器视觉精密装配设备开发"></a> 陀螺组件机器视觉精密装配设备开发</h1><h2 id="1装配任务"><a class="markdownIt-Anchor" href="#1装配任务"></a> 1.装配任务</h2><p>本项目面向导航关键器件的自动装配，研制陀螺组件机器视觉精密装配设备。其装配流程如下图所示。待装配的组件有两组：薄片组件和金属支架。系统装配的两个零件为<strong>层叠式</strong>，先装配薄片组件，再装配金属支架，金属支架装配到薄片组件的上方，并保证其装配精度。</p><p><a href="https://imgchr.com/i/VBqeUK" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/08/VBqeUK.md.jpg" alt="VBqeUK.md.jpg"></a></p><h2 id="2硬件系统设计"><a class="markdownIt-Anchor" href="#2硬件系统设计"></a> 2.硬件系统设计</h2><p>通过对装配任务进行分析，将系统搭建的设备的硬件部分分为四个功能模块，分别为：</p><ul><li><p>装配作业模块</p></li><li><p>精密视觉测量模块</p></li><li><p>基座安装模块</p></li><li><p>上料模块</p></li></ul><p>系统需要实现以下功能：</p><ul><li>三自由度的运动控制</li><li>视觉的检测</li><li>压力控制</li><li>真空吸附</li><li>机械夹持</li></ul><p><a href="https://imgchr.com/i/VBLLT0" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/08/VBLLT0.md.jpg" alt="VBLLT0.md.jpg"></a></p><p><strong>硬件连接图为：</strong></p><p><a href="https://imgchr.com/i/VDp8qe" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/08/VDp8qe.md.png" alt="VDp8qe.md.png"></a></p><h3 id="21装配作业模块"><a class="markdownIt-Anchor" href="#21装配作业模块"></a> 2.1装配作业模块</h3><p>如图所示，为精密装配系统的装配作业模块。装配作业模块主要分为：</p><ul><li><p>三轴移动滑台</p></li><li><p>机械臂结构</p></li></ul><p>机械臂固定在三轴移动滑台上，通过X、Y、Z三轴移动平台的运动改变作业机械手的位置，完成零件的装配作业。</p><p><a href="https://imgchr.com/i/VBODA0" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/08/VBODA0.md.jpg" alt="VBODA0.md.jpg"></a></p><h4 id="211三轴移动滑台"><a class="markdownIt-Anchor" href="#211三轴移动滑台"></a> 2.1.1三轴移动滑台</h4><p>三轴移动滑台由三根同样性能的导轨X、Y与Z轴以及电机构成，如图3.3所示，从装配策略以及运动空间考虑，X轴选用了150mm的行程，Y轴与Z轴选用了75mm的行程，出于对装配在导轨A、B、C三点配备了限位开关，分别为正限位、原点与负限位，限位开关可以将导轨的移动位置转换为电信号，控制导轨的运动位置，还可以通过限位开关来限制导轨的行程，避免发生碰撞。</p><p><a href="https://imgchr.com/i/VBXADs" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/08/VBXADs.md.jpg" alt="VBXADs.md.jpg"></a></p><h4 id="212机械臂装置"><a class="markdownIt-Anchor" href="#212机械臂装置"></a> 2.1.2机械臂装置</h4><p>机械臂是实现待装配零件拾取、运输与放置功能的主要组件，也是保证装配精度的关键。如图所示，机械臂主要部件有柱塞、微动开关、吸附头、机械夹钳、力传感器、柔性结构及各部件的连接板。</p><p><a href="https://imgchr.com/i/VBX3r9" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/08/VBX3r9.md.jpg" alt="VBX3r9.md.jpg"></a></p><p><strong>薄片组件靠吸附头吸附；</strong></p><p><a href="https://imgchr.com/i/VBjRT1" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/08/VBjRT1.md.jpg" alt="VBjRT1.md.jpg"></a></p><p><strong>金属支架靠夹指夹持</strong></p><p><a href="https://imgchr.com/i/VBjpZR" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/08/VBjpZR.md.jpg" alt="VBjpZR.md.jpg"></a></p><h3 id="22视觉检测模块"><a class="markdownIt-Anchor" href="#22视觉检测模块"></a> 2.2视觉检测模块</h3><p>如图所示为精密装配系统的视觉检测模块，视觉检测模块主要有视觉检测装置和三轴移动滑台组成。视觉检测装置由工业相机、同轴光源、环形光源以及远心镜头组成。视觉检测模块通过相机连接板和加强筋固定在三轴移动滑台上，通过x、y、z三轴移动平台的运动改变视觉检测系统的位置，完成待装配零件的结构特征的识别。零件在装配前都需要通过视觉检测模块检测零件的位置坐标。金属支架在装配前需要进行零件的选配，视觉系统检测零件结构特征，判断零件是否合格。</p><p><a href="https://imgchr.com/i/VBvuX4" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/08/VBvuX4.md.jpg" alt="VBvuX4.md.jpg"></a></p><p>本系统的图像采集系统选型为：</p><ul><li>选用的工业相机为MER-630-60U3M-L型</li><li>MML1-HR65D型的远心镜头</li><li>LED同轴光和环形光</li></ul><h3 id="23基座模块"><a class="markdownIt-Anchor" href="#23基座模块"></a> 2.3基座模块</h3><p>基座的安装模块主要功能是保证基座在装配过程中的稳定性。为了实现系统的高精度装配，在保证基座装配过程不发生移动外，还要保持基座上表面的水平。</p><p><a href="https://imgchr.com/i/VBzsl8" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/08/VBzsl8.md.jpg" alt="VBzsl8.md.jpg"></a></p><h3 id="24上料模块"><a class="markdownIt-Anchor" href="#24上料模块"></a> 2.4上料模块</h3><p>待装配的零件在装配前需要涂胶后放在上料座中，系统设计的上料座如图3所示。薄片组件的中心和外圈需要涂胶，所以上料座该部分设置悬空，避免胶粘到上料座上。金属支架选配时是倒置在上料座上，所以在金属支架上料座的中心设计了一个圆孔，通过该圆孔与金属支架上的圆柱实现约束定位，再通过与开口槽对准，完成零件检测时位置的固定。金属支架在装配前的定位是通过金属支架上料座的凸台。</p><p><a href="https://imgchr.com/i/VBzq0J" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/06/08/VBzq0J.md.jpg" alt="VBzq0J.md.jpg"></a></p><h2 id="3软件设计"><a class="markdownIt-Anchor" href="#3软件设计"></a> 3.软件设计</h2><h4 id="31硬件调试软件"><a class="markdownIt-Anchor" href="#31硬件调试软件"></a> 3.1硬件调试软件</h4><p>利用MFC 调试软件,集成视觉检测、图像处理、数据采集、串口通信等模块。</p><p><img src="https://s2.ax1x.com/2019/06/08/VDpkKU.png" alt="VDpkKU.png"></p><h4 id="32生产线装配作业软件"><a class="markdownIt-Anchor" href="#32生产线装配作业软件"></a> 3.2生产线装配作业软件</h4><p>本软件采用模块化设计方法，单独编写、调试各个功能模块，最后再集成为一个完整的系统。用于将各个功能模块集成为一个完整系统的功能模块即为系统主控模块，其功能是人机交互，协调功能模块的运行，软件系统结构如图1所示。用户在软件界面上操作时，主控模块控制相应功能模块起停，并将执行情况在软件界面上显示，同时反馈给用户，关键装配参数和产品型号等自动记录，以备查询。</p><p><img src="https://s2.ax1x.com/2019/06/08/VD9Uw4.png" alt="VD9Uw4.png"></p><p><strong>技术特点：</strong></p><p><strong>(1)稳定高效的智能识别算法</strong></p><p>本软件通过对复杂的陀螺组件进行“八图拼接”并针对零件表面的各种可能出现的情况依次进行讨论，最终实现九成以上零件是否达标的筛选，效果明显，识别准确稳定，同时为同类别零件的筛选提供借鉴价值。</p><p><strong>(2)多线程设计</strong></p><p>本软件的装配过程单独开辟线程，与主界面操作线程分离，保证程序的快速响应，执行效率高，解决软件运算过程中由于抢占资源而卡死的情况。</p><p><strong>(3)模块化编程思想</strong></p><p>本软件采用的是模块化编程思想，让各个部分互不影响分别编写，方便多人合作，开发效率高，周期短。，软件中应用了STL标准数据类型、高质量的开源图像处理库OpenCV和数据驱动模式等降低软件的出错率，提高系统的鲁棒性和可复用性。</p><p><strong>(4)界面设计可操作性强</strong></p><p>界面设计简洁，关键键位绑定响应按钮，操作方便，生产高效。为防止用户误操作，在各种情况下，对不需要控制的按钮都设置了按钮禁用。人工只需操作控制按钮部分即可完成软件的操作，人机交互友好。</p><p><img src="https://s2.ax1x.com/2019/06/08/VD9htA.png" alt="VD9htA.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;陀螺组件机器视觉精密装配设备开发&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#陀螺组件机器视觉精密装配设备开发&quot;&gt;&lt;/a&gt; 陀螺组件机器视觉精密装配设备开发&lt;/h1&gt;
&lt;h2 id=&quot;1装配任务&quot;&gt;&lt;a class=&quot;markdown
      
    
    </summary>
    
      <category term="Projects" scheme="http://yoursite.com/categories/Projects/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL笔记</title>
    <link href="http://yoursite.com/2019/05/28/MySQL%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/05/28/MySQL笔记/</id>
    <published>2019-05-28T12:29:06.000Z</published>
    <updated>2019-05-31T05:27:00.142Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql笔记"><a class="markdownIt-Anchor" href="#mysql笔记"></a> MySQL笔记</h1><h2 id="目标"><a class="markdownIt-Anchor" href="#目标"></a> 目标</h2><p>一、为什么要学习数据库<br>二、数据库的相关概念<br>DBMS、DB、SQL<br>三、数据库存储数据的特点<br>四、初始MySQL<br>MySQL产品的介绍<br>MySQL产品的安装               ★<br>MySQL服务的启动和停止     ★<br>MySQL服务的登录和退出     ★<br>MySQL的常见命令和语法规范<br>五、DQL语言的学习   ★<br>基础查询             ★<br>条件查询     ★<br>排序查询     ★<br>常见函数             ★<br>分组函数             ★<br>分组查询             ★<br>连接查询     ★<br>子查询       √<br>分页查询       ★<br>union联合查询√<br>六、DML语言的学习    ★<br>插入语句<br>修改语句<br>删除语句<br>七、DDL语言的学习<br>库和表的管理 √<br>常见数据类型介绍  √<br>常见约束    √<br>八、TCL语言的学习<br>事务和事务处理<br>九、视图的讲解           √<br>十、变量<br>十一、存储过程和函数<br>十二、流程控制结构</p><h2 id="数据库的好处"><a class="markdownIt-Anchor" href="#数据库的好处"></a> 数据库的好处</h2><p>​1.持久化数据到本地<br>​2.可以实现结构化查询，方便管理<br>​</p><h2 id="数据库相关概念"><a class="markdownIt-Anchor" href="#数据库相关概念"></a> 数据库相关概念</h2><p>​1、DB：数据库，保存一组有组织的数据的容器<br>​2、DBMS：数据库管理系统，又称为数据库软件（产品），用于管理DB中的数据<br>​3、SQL: 结构化查询语言，用于和DBMS通信的语言</p><h2 id="数据库存储数据的特点"><a class="markdownIt-Anchor" href="#数据库存储数据的特点"></a> 数据库存储数据的特点</h2><p>​1、将数据放到表中，表再放到库中<br>​2、一个数据库中可以有多个表，每个表都有一个的名字，用来标识自己。表名具有唯一性。<br>​3、表具有一些特性，这些特性定义了数据在表中如何存储，类似java中 “类”的设计。<br>​4、表由列组成，我们也称为字段。所有表都是由一个或多个列组成的，每一列类似java 中的”属性”<br>​5、表中的数据是按行存储的，每一行类似于java中的“对象”。</p><h2 id="mysql产品的介绍和安装"><a class="markdownIt-Anchor" href="#mysql产品的介绍和安装"></a> MySQL产品的介绍和安装</h2><h3 id="mysql服务的启动和停止"><a class="markdownIt-Anchor" href="#mysql服务的启动和停止"></a> MySQL服务的启动和停止</h3><p>​方式一：计算机——右击管理——服务<br>​方式二：通过管理员身份运行<br>​net start 服务名（启动服务）<br>​net stop 服务名（停止服务）</p><h3 id="mysql服务的登录和退出"><a class="markdownIt-Anchor" href="#mysql服务的登录和退出"></a> MySQL服务的登录和退出</h3><p><strong>属于c/s架构的软件，一般来讲安装服务端</strong></p><p>​方式一：通过mysql自带的客户端<br>​只限于root用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式二：通过windows自带的客户端</span></span><br><span class="line"><span class="comment"># 登录：</span></span><br><span class="line">mysql [-h主机名 -P端口号 ]-u用户名 -p密码</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出：</span></span><br><span class="line">exit或ctrl+C</span><br></pre></td></tr></table></figure><p>​</p><h3 id="mysql的常见命令"><a class="markdownIt-Anchor" href="#mysql的常见命令"></a> MySQL的常见命令</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.查看当前所有的数据库</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br><span class="line"><span class="comment"># 2.打开指定的库</span></span><br><span class="line"><span class="keyword">use</span> 库名</span><br><span class="line"><span class="comment"># 3.查看当前库的所有表</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br><span class="line"><span class="comment"># 4.查看其它库的所有表</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span> <span class="keyword">from</span> 库名;</span><br><span class="line"><span class="comment"># 5.创建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">列名 列类型,</span><br><span class="line">列名 列类型，</span><br><span class="line">。。。</span><br><span class="line">);</span><br><span class="line"><span class="comment"># 6.查看表结构</span></span><br><span class="line">desc 表名;</span><br><span class="line"><span class="comment"># 7.查看服务器的版本</span></span><br><span class="line"><span class="comment"># 方式一：登录到mysql服务端</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">version</span>();</span><br><span class="line"><span class="comment"># 方式二：没有登录到mysql服务端</span></span><br><span class="line">mysql <span class="comment">--version</span></span><br><span class="line">mysql <span class="comment">--V</span></span><br></pre></td></tr></table></figure><h3 id="mysql的语法规范"><a class="markdownIt-Anchor" href="#mysql的语法规范"></a> MySQL的语法规范</h3><p>​1.不区分大小写,但建议关键字大写，表名、列名小写<br>​2.每条命令最好用分号结尾<br>​3.每条命令根据需要，可以进行缩进 或换行<br>​4.注释<br>​单行注释：#注释文字<br>​单行注释：-- 注释文字<br>​多行注释：/* 注释文字  */</p><h3 id="sql的语言分类"><a class="markdownIt-Anchor" href="#sql的语言分类"></a> SQL的语言分类</h3><ul><li><code>DQL（Data Query Language）</code>：数据查询语言<br>select</li><li><code>DML(Data Manipulate Language)</code>:数据操作语言<br>insert 、update、delete   增删改</li><li><code>DDL（Data Define Languge）</code>：数据定义语言<br>create、drop、alter</li><li><code>TCL（Transaction Control Language）</code>：事务控制语言<br>commit、rollback</li></ul><h2 id="dql语言"><a class="markdownIt-Anchor" href="#dql语言"></a> DQL语言</h2><h3 id="进阶1基础查询"><a class="markdownIt-Anchor" href="#进阶1基础查询"></a> 进阶1：基础查询</h3><p>​语法：<br>​SELECT 要查询的东西<br>​【FROM 表名】;</p><p>特点：<br>① 通过select查询完的结果 ，是一个虚拟的表格<br>② 要查询的东西 可以是常量值、表达式、字段、函数</p><p>常用：</p><ul><li><p><code>distinct</code>——去重</p></li><li><p><code>as</code>——起别名</p></li><li><p><code>ifnull()</code>——判断某字段或表达式是否为null，如果为null 返回指定的值，否则返回原本的值</p></li><li><p><code>isnull()</code>——判断某字段或表达式是否为null，如果是，则返回1，否则返回0</p></li><li><p>加法操作</p><ul><li>select 数值+数值：直接运算</li><li>select 字符+数值：先试图将字符转换成数值，如果转换成功，则继续运算；否则转换成0，再做运算</li><li>select null+值：结果都为null</li></ul></li></ul><h3 id="进阶2条件查询"><a class="markdownIt-Anchor" href="#进阶2条件查询"></a> 进阶2：条件查询</h3><p>​条件查询：根据条件过滤原始表的数据，查询到想要的数据</p><p>​语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">要查询的字段|表达式|常量值|函数</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">表</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">条件 ;</span><br></pre></td></tr></table></figure><p>分类：<br>一、条件表达式</p><pre><code>&gt; &lt; &gt;= &lt;= = != &lt;&gt;</code></pre><p>二、逻辑表达式</p><p>逻辑运算符：</p><ul><li><p><code>and（&amp;&amp;）</code></p></li><li><p><code>or(||)</code></p></li><li><p><code>not(!)</code></p></li></ul><p>三、模糊查询</p><ul><li>like:一般搭配通配符使用，可以判断字符型或数值型</li><li>通配符：%任意多个字符，_任意单个字符,例如：<code>last_name like 'a%'</code></li><li><code>between</code>、 <code>and</code> 、<code>in</code>、 <code>is null</code>、 <code>is not null</code></li></ul><h3 id="进阶3排序查询"><a class="markdownIt-Anchor" href="#进阶3排序查询"></a> 进阶3：排序查询</h3><p><code>order by的位置一般放在查询语句的最后（除limit语句之外）</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">要查询的东西</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">表</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">条件</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> 排序的字段|表达式|函数|别名 【<span class="keyword">asc</span>|<span class="keyword">desc</span>】</span><br></pre></td></tr></table></figure><p>​</p><h3 id="进阶4常见函数"><a class="markdownIt-Anchor" href="#进阶4常见函数"></a> 进阶4：常见函数</h3><p>一、单行函数</p><p><strong>1、字符函数</strong></p><ul><li>concat——拼接</li><li>substr——截取子串</li><li>upper——转换成大写</li><li>lower——转换成小写</li><li>trim——去前后指定的空格和字符</li><li>ltrim——去左边空格</li><li>rtrim——去右边空格</li><li>replace——替换</li><li>lpad——左填充</li><li>rpad——右填充</li><li>instr——返回子串第一次出现的索引</li><li>length—— 获取字节个数<br>​</li></ul><p><strong>2、数学函数</strong></p><ul><li><p>round ——四舍五入</p></li><li><p>rand ——随机数</p></li><li><p>floor——向下取整</p></li><li><p>ceil——向上取整</p></li><li><p>mod——取余</p></li><li><p>truncate——截断</p></li></ul><p>3、日期函数</p><ul><li>now——当前系统日期+时间</li><li>curdate——当前系统日期</li><li>curtime——当前系统时间</li><li>str_to_date——将字符转换成日期</li><li>date_format——将日期转换成字符</li></ul><p>4、流程控制函数</p><ul><li><p>if(条件表达式，表达式1，表达式2)：如果条件表达式成立，返回表达式1，否则返回表达式2</p></li><li><p>case语句 处理多分支</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 情况1</span></span><br><span class="line">case 变量或表达式或字段</span><br><span class="line">when 常量1 then 值1</span><br><span class="line">when 常量2 then 值2</span><br><span class="line">...</span><br><span class="line">else 值n</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 情况2</span></span><br><span class="line"><span class="keyword">case</span> </span><br><span class="line"><span class="keyword">when</span> 条件<span class="number">1</span> <span class="keyword">then</span> 值<span class="number">1</span></span><br><span class="line"><span class="keyword">when</span> 条件<span class="number">2</span> <span class="keyword">then</span> 值<span class="number">2</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span> 值n</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li></ul><p>5、其他函数<br>version版本<br>database当前库<br>user当前连接用户</p><h4 id="二-分组函数"><a class="markdownIt-Anchor" href="#二-分组函数"></a> 二、分组函数</h4><pre><code>sum 求和max 最大值min 最小值avg 平均值count 计数特点：1、以上五个分组函数都忽略null值，除了count(*)2、sum和avg一般用于处理数值型，max、min、count可以处理任何数据类型3、都可以搭配distinct使用，用于统计去重后的结果4、count的参数可以支持：字段、*、常量值，一般放1   建议使用 count(*)</code></pre><h3 id="进阶5分组查询"><a class="markdownIt-Anchor" href="#进阶5分组查询"></a> 进阶5：分组查询</h3><p>​语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 查询的字段，分组函数</span><br><span class="line"><span class="keyword">from</span> 表</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> 分组的字段</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">特点：</span><br><span class="line">1、可以按单个字段分组</span><br><span class="line">2、和分组函数一同查询的字段最好是分组后的字段</span><br><span class="line">3、分组筛选</span><br><span class="line">    针对的表     位置    关键字</span><br><span class="line">分组前筛选：原始表     <span class="built_in"> group </span>by的前面where</span><br><span class="line">分组后筛选：分组后的结果集  <span class="built_in"> group </span>by的后面 having</span><br><span class="line"></span><br><span class="line">4、可以按多个字段分组，字段之间用逗号隔开</span><br><span class="line">5、可以支持排序</span><br><span class="line">6、having后可以支持别名</span><br></pre></td></tr></table></figure><h3 id="进阶6多表连接查询"><a class="markdownIt-Anchor" href="#进阶6多表连接查询"></a> 进阶6：多表连接查询</h3><p>笛卡尔乘积：如果连接条件省略或无效则会出现<br>解决办法：添加有效的<strong>连接条件</strong></p><p>一、传统模式下的连接 ：等值连接——非等值连接</p><ol><li>等值连接的结果 = 多个表的交集</li><li>n表连接，至少需要n-1个连接条件</li><li>多个表不分主次，没有顺序要求</li><li>一般为表起别名，提高阅读性和性能</li></ol><p>二、sql99语法：通过join关键字实现连接</p><p>支持：</p><p>等值连接、非等值连接 （内连接）<br>外连接<br>交叉连接</p><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段，...</span><br><span class="line"><span class="keyword">from</span> 表<span class="number">1</span></span><br><span class="line">【<span class="keyword">inner</span>|<span class="keyword">left</span> <span class="keyword">outer</span>|<span class="keyword">right</span> <span class="keyword">outer</span>|<span class="keyword">cross</span>】<span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span>  连接条件</span><br><span class="line">【<span class="keyword">inner</span>|<span class="keyword">left</span> <span class="keyword">outer</span>|<span class="keyword">right</span> <span class="keyword">outer</span>|<span class="keyword">cross</span>】<span class="keyword">join</span> 表<span class="number">3</span> <span class="keyword">on</span>  连接条件</span><br><span class="line">【<span class="keyword">where</span> 筛选条件】</span><br><span class="line">【<span class="keyword">group</span> <span class="keyword">by</span> 分组字段】</span><br><span class="line">【<span class="keyword">having</span> 分组后的筛选条件】</span><br><span class="line">【<span class="keyword">order</span> <span class="keyword">by</span> 排序的字段或表达式】</span><br></pre></td></tr></table></figure><p>好处：连接条件和筛选条件实现了分离，简洁明了！<br>三、自连接</p><p>案例：查询员工名和直接上级的名称</p><p>sql99</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.last_name,m.last_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">JOIN</span> employees m </span><br><span class="line"><span class="keyword">ON</span> e.<span class="string">`manager_id`</span>=m.<span class="string">`employee_id`</span>;</span><br></pre></td></tr></table></figure><h3 id="进阶7子查询"><a class="markdownIt-Anchor" href="#进阶7子查询"></a> 进阶7：子查询</h3><h3 id="含义"><a class="markdownIt-Anchor" href="#含义"></a> 含义：</h3><p>一条查询语句中又嵌套了另一条完整的select语句，其中被嵌套的select语句，称为子查询或内查询<br>在外面的查询语句，称为主查询或外查询</p><p>特点：</p><ol><li><p>子查询都放在小括号内</p></li><li><p><strong>重点掌握where或having后面</strong>：<code>标量子查询</code>和<code>列子查询</code>。</p></li><li><p><strong>子查询优先于主查询执行，主查询使用了子查询的执行结果</strong></p></li><li><p>子查询根据查询结果的行数不同分为以下两类：<br>① 单行子查询<br>结果集只有一行<br>一般搭配单行操作符使用：&gt; &lt; = &lt;&gt; &gt;= &lt;=<br>非法使用子查询的情况：<br>a、子查询的结果为一组值<br>b、子查询的结果为空</p><p>② 多行子查询<br>结果集有多行<br>一般搭配多行操作符使用：any、all、in、not in<br>in： 属于子查询结果中的任意一个就行<br>any和all往往可以用其他查询代替</p></li></ol><p>例子</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 标量子查询</span></span><br><span class="line"><span class="keyword">select</span> last_name,salary</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> salary=(</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">min</span>(salary) <span class="keyword">from</span> employees</span><br><span class="line">);</span><br><span class="line"><span class="comment"># 列子查询</span></span><br><span class="line"><span class="keyword">select</span> last_name</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> employee_id <span class="keyword">in</span>(</span><br><span class="line"><span class="keyword">select</span> manager_id</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="进阶8分页查询"><a class="markdownIt-Anchor" href="#进阶8分页查询"></a> 进阶8：分页查询</h3><p>应用场景：</p><p>实际的web项目中需要根据用户的需求提交对应的分页查询的sql语句</p><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段|表达式,...</span><br><span class="line"><span class="keyword">from</span> 表</span><br><span class="line">【<span class="keyword">where</span> 条件】</span><br><span class="line">【<span class="keyword">group</span> <span class="keyword">by</span> 分组字段】</span><br><span class="line">【<span class="keyword">having</span> 条件】</span><br><span class="line">【<span class="keyword">order</span> <span class="keyword">by</span> 排序的字段】</span><br><span class="line"><span class="keyword">limit</span> 【起始的条目索引，】条目数;</span><br></pre></td></tr></table></figure><p>特点：</p><p>1.起始条目索引从0开始</p><p>2.<strong>limit子句放在查询语句的最后</strong></p><p>3.重要公式：</p><p>假如:每页显示条目数size，要显示的页数 page</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * </span><br><span class="line"><span class="keyword">from</span>  表 </span><br><span class="line"><span class="keyword">limit</span> （page<span class="number">-1</span>）*<span class="keyword">size</span>,<span class="keyword">size</span>;</span><br></pre></td></tr></table></figure><h3 id="进阶9联合查询"><a class="markdownIt-Anchor" href="#进阶9联合查询"></a> 进阶9：联合查询</h3><p>union：合并、联合，将多次查询结果合并成一个结果</p><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段|常量|表达式|函数 【<span class="keyword">from</span> 表】 【<span class="keyword">where</span> 条件】 </span><br><span class="line"><span class="keyword">union</span> 【all】</span><br><span class="line"><span class="keyword">select</span> 字段|常量|表达式|函数 【<span class="keyword">from</span> 表】 【<span class="keyword">where</span> 条件】 </span><br><span class="line"><span class="keyword">union</span> 【all】</span><br><span class="line"><span class="keyword">select</span> 字段|常量|表达式|函数 【<span class="keyword">from</span> 表】 【<span class="keyword">where</span> 条件】 </span><br><span class="line">.....</span><br></pre></td></tr></table></figure><p>特点：</p><ol><li>多条查询语句的查询的列数必须是一致的</li><li>多条查询语句的查询的列的类型几乎相同</li><li>union代表去重，union all代表不去重</li></ol><p><strong>总结各条查询语句的执行顺序</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 查询列表    <span class="comment"># 7</span></span><br><span class="line"><span class="keyword">from</span> 表<span class="number">1</span> 别名      <span class="comment"># 1</span></span><br><span class="line">连接类型 <span class="keyword">join</span> 表<span class="number">2</span>   <span class="comment"># 2</span></span><br><span class="line"><span class="keyword">on</span> 连接条件        <span class="comment"># 3</span></span><br><span class="line"><span class="keyword">where</span> 筛选         <span class="comment"># 4</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> 分组列表  <span class="comment"># 5</span></span><br><span class="line"><span class="keyword">having</span> 筛选        <span class="comment"># 6</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span>排序列表    <span class="comment"># 8</span></span><br><span class="line"><span class="keyword">limit</span> 起始条目索引，条目数;  <span class="comment"># 9</span></span><br></pre></td></tr></table></figure><h2 id="dml语言"><a class="markdownIt-Anchor" href="#dml语言"></a> DML语言</h2><h4 id="插入"><a class="markdownIt-Anchor" href="#插入"></a> 插入</h4><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(字段名，...)</span><br><span class="line"><span class="keyword">values</span>(值<span class="number">1</span>，...);</span><br></pre></td></tr></table></figure><p>特点：</p><ol><li>字段类型和值类型一致或兼容，而且一一对应</li><li>可以为空的字段，可以不用插入值，或用null填充</li><li>不可以为空的字段，必须插入值</li><li>字段个数和值的个数必须一致</li><li>字段可以省略，但默认所有字段，并且顺序和表中的存储顺序一致</li><li><strong>支持查询语句</strong></li></ol><h4 id="修改"><a class="markdownIt-Anchor" href="#修改"></a> 修改</h4><p>修改单表语法：★</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 字段=新值,字段=新值</span><br><span class="line">【<span class="keyword">where</span> 条件】</span><br></pre></td></tr></table></figure><p>修改多表语法：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">update 表<span class="number">1</span> 别名<span class="number">1</span>,表<span class="number">2</span> 别名<span class="number">2</span></span><br><span class="line"><span class="keyword">set</span> 字段=新值，字段=新值</span><br><span class="line">where 连接条件</span><br><span class="line"><span class="keyword">and</span> 筛选条件</span><br></pre></td></tr></table></figure><h4 id="删除"><a class="markdownIt-Anchor" href="#删除"></a> 删除</h4><p>方式1：delete语句</p><p><strong>单表删除： ★</strong><br>delete from 表名 【where 筛选条件】</p><p>级联删除：<br>delete 别名1，别名2<br>from 表1 别名1，表2 别名2<br>where 连接条件<br>and 筛选条件;</p><p>方式2：truncate语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> 表名</span><br></pre></td></tr></table></figure><p><strong>两种方式的区别【面试题】</strong></p><p>1.truncate不能加where条件，而delete可以加where条件</p><p>2.truncate的效率高一丢丢</p><p>3.truncate 删除带自增长的列的表后，如果再插入数据，数据从1开始<br>delete 删除带自增长列的表后，如果再插入数据，数据从上一次的断点处开始</p><p>4.truncate删除不能回滚，delete删除可以回滚</p><h2 id="ddl语句"><a class="markdownIt-Anchor" href="#ddl语句"></a> DDL语句</h2><h3 id="库和表的管理"><a class="markdownIt-Anchor" href="#库和表的管理"></a> 库和表的管理</h3><p>库的管理：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一、创建库</span></span><br><span class="line"><span class="keyword">create</span> [<span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span>] <span class="keyword">database</span> 库名</span><br><span class="line"><span class="comment"># 二、删除库</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> 库名</span><br><span class="line"><span class="comment"># 三、修改库</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span>  [<span class="keyword">if</span> <span class="keyword">exists</span>] 库名 [<span class="built_in">character</span> <span class="keyword">set</span> 字符集名];</span><br></pre></td></tr></table></figure><p>表的管理：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.创建表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> stuinfo(</span><br><span class="line">stuId <span class="built_in">INT</span> [约束],</span><br><span class="line">stuName <span class="built_in">VARCHAR</span>(<span class="number">20</span>) [约束],</span><br><span class="line">gender <span class="built_in">CHAR</span> [约束],</span><br><span class="line">bornDate DATETIE [约束]</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">DESC studentinfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.修改表 alter</span></span><br><span class="line"><span class="comment"># 格式</span></span><br><span class="line">1.添加列</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">column</span> 列名 类型 【<span class="keyword">first</span>|<span class="keyword">after</span> 字段名】;</span><br><span class="line">2.修改列的类型或约束</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">modify</span> <span class="keyword">column</span> 列名 新类型 【新约束】;</span><br><span class="line">3.修改列名</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">change</span> <span class="keyword">column</span> 旧列名 新列名 类型;</span><br><span class="line">4 .删除列</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> <span class="keyword">column</span> 列名;</span><br><span class="line">5.修改表名</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">rename</span> 【<span class="keyword">to</span>】 新表名;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例子：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#①修改字段名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> studentinfo <span class="keyword">CHANGE</span>  <span class="keyword">COLUMN</span> sex gender <span class="built_in">CHAR</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#②修改表名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> stuinfo <span class="keyword">RENAME</span> [<span class="keyword">TO</span>]  studentinfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">#③修改字段类型和列级约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> studentinfo <span class="keyword">MODIFY</span> <span class="keyword">COLUMN</span> borndate <span class="built_in">DATE</span> ;</span><br><span class="line"></span><br><span class="line"><span class="comment">#④添加字段</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> studentinfo <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> email <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">first</span>;</span><br><span class="line"><span class="comment">#⑤删除字段</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> studentinfo <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> email;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.删除表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">EXISTS</span>] studentinfo;</span><br></pre></td></tr></table></figure><p>表的复制</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> author <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">'村上春树'</span>,<span class="string">'日本'</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">'莫言'</span>,<span class="string">'中国'</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">'冯唐'</span>,<span class="string">'中国'</span>),</span><br><span class="line">(<span class="number">4</span>,<span class="string">'金庸'</span>,<span class="string">'中国'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#1.仅仅复制表的结构</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> copy <span class="keyword">LIKE</span> author;</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.复制表的结构+数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> copy2 </span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> author;</span><br><span class="line"></span><br><span class="line"><span class="comment">#只复制部分数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> copy3</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,au_name</span><br><span class="line"><span class="keyword">FROM</span> author </span><br><span class="line"><span class="keyword">WHERE</span> nation=<span class="string">'中国'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#仅仅复制某些字段</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> copy4 </span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,au_name</span><br><span class="line"><span class="keyword">FROM</span> author</span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="常见类型"><a class="markdownIt-Anchor" href="#常见类型"></a> 常见类型</h3><p>对于一个关系表，除了定义每一列的名称外，还需要定义每一列的数据类型。关系数据库支持的标准数据类型包括数值、字符串、时间等：</p><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">类型</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center">INT</td><td style="text-align:center">整型</td><td>默认是有符号型，无符号添加unsigned关键字或者zerofill</td></tr><tr><td style="text-align:center">BIGINT</td><td style="text-align:center">长整型</td><td>8字节整数类型，范围约+/-922亿亿</td></tr><tr><td style="text-align:center">REAL</td><td style="text-align:center">浮点型</td><td>4字节浮点数，范围约+/-1038</td></tr><tr><td style="text-align:center">DOUBLE</td><td style="text-align:center">浮点型</td><td>8字节浮点数，范围约+/-10308</td></tr><tr><td style="text-align:center">DECIMAL(M,N)</td><td style="text-align:center">高精度小数</td><td>由用户指定精度的小数，例如，DECIMAL(20,10)表示一共20位，其中小数10位，通常用于财务计算</td></tr><tr><td style="text-align:center">CHAR(N)</td><td style="text-align:center">定长字符串</td><td>存储指定长度的字符串，例如，CHAR(100)总是存储100个字符的字符串</td></tr><tr><td style="text-align:center">VARCHAR(N)</td><td style="text-align:center">变长字符串</td><td>存储可变长度的字符串，例如，VARCHAR(100)可以存储0~100个字符的字符串</td></tr><tr><td style="text-align:center">BOOLEAN</td><td style="text-align:center">布尔类型</td><td>存储True或者False</td></tr><tr><td style="text-align:center">DATE</td><td style="text-align:center">日期类型</td><td>存储日期，例如，2018-06-22</td></tr><tr><td style="text-align:center">TIME</td><td style="text-align:center">时间类型</td><td>存储时间，例如，12:20:59</td></tr><tr><td style="text-align:center">DATETIME</td><td style="text-align:center">日期和时间类型</td><td>存储日期+时间，例如，2018-06-22 12:20:59</td></tr></tbody></table><p><strong>一、数值型</strong><br><strong>1、整型</strong><br>tinyint（1）、smallint（2）、mediumint（3）、int/integer（4）、bigint（5）</p><p>特点：<br>①都可以设置无符号和有符号，默认有符号，通过unsigned设置无符号<br>②如果超出了范围，会报out or range异常，插入临界值<br>③长度可以不指定，默认会有一个长度<br>长度代表显示的最大宽度，如果不够则左边用0填充，但需要搭配zerofill，并且默认变为无符号整型</p><p><strong>2、浮点型</strong><br>定点数：decimal(M,D)<br>浮点数:<br>float(M,D)   4<br>double(M,D)  8</p><p>特点：<br>①M代表整数部位+小数部位的个数，D代表小数部位<br>②如果超出范围，则报out or range异常，并且插入临界值<br>③M和D都可以省略，但对于定点数，M默认为10，D默认为0<br>④如果精度要求较高，则优先考虑使用定点数</p><p><strong>二、字符型</strong><br>char、varchar、binary、varbinary、enum、set、text、blob</p><p>char：固定长度的字符，写法为char(M)，最大长度不能超过M，其中M可以省略，默认为1<br>varchar：可变长度的字符，写法为varchar(M)，最大长度不能超过M，其中M不可以省略</p><p><strong>三、日期型</strong><br>year年<br>date日期<br>time时间<br>datetime 日期+时间          8<br>timestamp 日期+时间      4   比较容易受时区、语法模式、版本的影响，更能反映当前时区的真实时间</p><h3 id="常见约束"><a class="markdownIt-Anchor" href="#常见约束"></a> 常见约束</h3><ul><li>NOT NULL</li><li>DEFAULT</li><li>UNIQUE</li><li>CHECK（MySQL不支持）</li><li>PRIMARY KEY</li><li>FOREIGN KEY</li></ul><p><strong>通用写法：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> stuinfo(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>,  <span class="comment"># 列级约束</span></span><br><span class="line">stuname <span class="built_in">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">sex <span class="built_in">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">age <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">18</span>,</span><br><span class="line">seat <span class="built_in">INT</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">majorid <span class="built_in">INT</span>,</span><br><span class="line"><span class="keyword">CONSTRAINT</span> fk_stuinfo_major <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span>(majorid) <span class="keyword">REFERENCES</span> major(<span class="keyword">id</span>) <span class="comment"># 表级约束</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>主键和唯一的对比：</strong></p><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">唯一性</th><th style="text-align:center">是否能为空</th><th style="text-align:center">table中个数</th><th style="text-align:center">是否允许组合</th></tr></thead><tbody><tr><td style="text-align:center">primary key</td><td style="text-align:center">√</td><td style="text-align:center">×</td><td style="text-align:center">至多1个</td><td style="text-align:center">√：不推荐</td></tr><tr><td style="text-align:center">unique</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">可以有多个</td><td style="text-align:center">√：不推荐</td></tr></tbody></table><p><strong>外键：</strong></p><p>​    1、要求在从表设置外键关系</p><p>​    2、从表的外键列的类型和主表的关联列的类型要求一致或兼容，名称无要求</p><p>​    3、主表的关联列必须是一个key（一般是主键或唯一）</p><p>​    4、插入数据时，先插入主表，再插入从表</p><p>​          删除数据时，先删除从表，再删除主表</p><h2 id="数据库事务tcl"><a class="markdownIt-Anchor" href="#数据库事务tcl"></a> 数据库事务TCL</h2><p><em><code>Transaction Control Language 事务控制语言</code></em></p><p>通过一组逻辑操作单元（一组DML——sql语句），将数据从一种状态切换到另外一种状态</p><h3 id="特点acid面试重点"><a class="markdownIt-Anchor" href="#特点acid面试重点"></a> 特点:（ACID）[面试重点]</h3><ul><li>原子性：要么都执行，要么都回滚</li><li>一致性：保证数据的状态操作前和操作后保持一致</li><li>隔离性：多个事务同时操作相同数据库的同一个数据时，一个事务的执行不受另外一个事务的干扰</li><li>持久性：一个事务一旦提交，则数据将持久化到本地，除非其他事务对其进行修改</li></ul><p>相关步骤：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、开启事务</span></span><br><span class="line"><span class="keyword">set</span> autocommit=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span>;</span><br><span class="line"><span class="comment"># 2、编写事务的一组逻辑操作单元（多条sql语句）</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">insert</span> <span class="keyword">update</span> <span class="keyword">delete</span></span><br><span class="line"><span class="comment"># 3、提交事务或回滚事务</span></span><br><span class="line"><span class="keyword">rollback</span>; <span class="comment"># 回滚</span></span><br><span class="line"><span class="keyword">commit</span>; <span class="comment"># 提交</span></span><br></pre></td></tr></table></figure><h3 id="事务的分类"><a class="markdownIt-Anchor" href="#事务的分类"></a> 事务的分类</h3><ul><li><p>隐式事务，没有明显的开启和结束事务的标志<br>比如insert、update、delete语句本身就是一个事务</p></li><li><p>显式事务，具有明显的开启和结束事务的标志<br>1、开启事务——取消自动提交事务的功能<br>2、编写事务的——组逻辑操作单元（多条sql语句）<br>3、提交事务或回滚事务</p></li></ul><h3 id="事务的隔离级别"><a class="markdownIt-Anchor" href="#事务的隔离级别"></a> 事务的隔离级别:</h3><p>事务并发问题如何发生？</p><blockquote><p>当多个事务同时操作同一个数据库的相同数据时</p></blockquote><p>事务的并发问题有哪些？</p><ul><li>脏读：一个事务读取到了另外一个事务未提交的数据</li><li>不可重复读：同一个事务中，多次读取到的数据不一致</li><li>幻读：一个事务读取数据时，另外一个事务进行更新，导致第一个事务读取到了没有更新的数据</li></ul><p>事务的隔离级别</p><table><thead><tr><th style="text-align:center">级别</th><th style="text-align:center">脏读</th><th style="text-align:center">不可重复读</th><th style="text-align:center">幻读</th></tr></thead><tbody><tr><td style="text-align:center">read uncommitted</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">read committed</td><td style="text-align:center">×</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">repeatable read</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">serializable</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">×</td></tr></tbody></table><p><em><code>脏读针对更新，幻读针对插入</code></em></p><p>设置隔离级别：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">session</span>|<span class="keyword">global</span>  <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> 隔离级别名;</span><br></pre></td></tr></table></figure><p>查看隔离级别：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> @@tx_isolation;</span><br></pre></td></tr></table></figure><p>设置保存点 setpoint</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> autocommit=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">START</span> <span class="keyword">TRANSACTION</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">account</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="number">25</span>;</span><br><span class="line"><span class="keyword">SAVEPOINT</span> a;<span class="comment">#设置保存点</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">account</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="number">28</span>;</span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> a;<span class="comment">#回滚到保存点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">account</span>;</span><br></pre></td></tr></table></figure><h2 id="视图一张虚拟的表"><a class="markdownIt-Anchor" href="#视图一张虚拟的表"></a> 视图:一张虚拟的表</h2><p>视图和表的区别：</p><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">关键字</th><th style="text-align:center">是否占用物理空间</th><th style="text-align:center">使用</th></tr></thead><tbody><tr><td style="text-align:center">视图</td><td style="text-align:center">create view</td><td style="text-align:center">只是保存了sql逻辑</td><td style="text-align:center">一般是只查看</td></tr><tr><td style="text-align:center">表</td><td style="text-align:center">create table</td><td style="text-align:center">保存了数据</td><td style="text-align:center">增删改查</td></tr></tbody></table><p><strong>应用场景：</strong></p><ol><li>多个地方用到同样的查询结果</li><li>该查询结果使用的SQL语句较复杂</li></ol><p><strong>视图的好处：</strong></p><ol><li>sql语句提高重用性，效率高</li><li>和表实现了分离，提高了安全性</li></ol><h3 id="视图的创建"><a class="markdownIt-Anchor" href="#视图的创建"></a> 视图的创建</h3><p>​语法：<br>​CREATE VIEW  视图名<br>​AS<br>​查询语句;</p><h3 id="视图的增删改查"><a class="markdownIt-Anchor" href="#视图的增删改查"></a> 视图的增删改查</h3><p>增删改影响原始表的结构，所以下面的语句几乎不用！</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、查看视图的数据 ★</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> my_v4;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> my_v1 <span class="keyword">WHERE</span> last_name=<span class="string">'Partners'</span>;</span><br><span class="line"></span><br><span class="line">2、插入视图的数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> my_v4(last_name,department_id) <span class="keyword">VALUES</span>(<span class="string">'虚竹'</span>,<span class="number">90</span>);</span><br><span class="line"></span><br><span class="line">3、修改视图的数据</span><br><span class="line"><span class="keyword">UPDATE</span> my_v4 <span class="keyword">SET</span> last_name =<span class="string">'梦姑'</span> <span class="keyword">WHERE</span> last_name=<span class="string">'虚竹'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、删除视图的数据</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> my_v4;</span><br></pre></td></tr></table></figure><h3 id="某些视图不能更新"><a class="markdownIt-Anchor" href="#某些视图不能更新"></a> 某些视图不能更新</h3><ul><li>分组函数、distinct、group  by、having、union或者union all</li><li>常量视图</li><li>Select中包含子查询</li><li>join</li><li>from一个不能更新的视图</li><li>where子句的子查询引用了from子句中的表</li></ul><h3 id="视图逻辑的更新"><a class="markdownIt-Anchor" href="#视图逻辑的更新"></a> 视图逻辑的更新</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式一：</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">VIEW</span> test_v7</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name <span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> employee_id&gt;<span class="number">100</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式二:</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">VIEW</span> test_v7</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> employee_id <span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><h3 id="视图的删除"><a class="markdownIt-Anchor" href="#视图的删除"></a> 视图的删除</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以同时删除多个</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> test_v1,test_v2,test_v3;</span><br></pre></td></tr></table></figure><h3 id="视图结构的查看"><a class="markdownIt-Anchor" href="#视图结构的查看"></a> 视图结构的查看</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DESC test;</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> <span class="keyword">test</span>;</span><br></pre></td></tr></table></figure><h2 id="变量"><a class="markdownIt-Anchor" href="#变量"></a> 变量</h2><ol><li>系统变量<ul><li>全局变量</li><li>会话变量</li></ul></li><li>自定义变量<ul><li>用户变量</li><li>局部变量</li></ul></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1全局变量</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作用域：针对于所有会话（连接）有效，但不能跨重启</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">#①查看所有全局变量</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> <span class="keyword">VARIABLES</span>;</span><br><span class="line"><span class="comment">#②查看满足条件的部分系统变量</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">'%char%'</span>;</span><br><span class="line"><span class="comment">#③查看指定的系统变量的值</span></span><br><span class="line"><span class="keyword">SELECT</span> @@global.autocommit;</span><br><span class="line"><span class="keyword">SELECT</span> @@tx_isolation;</span><br><span class="line"><span class="comment">#④为某个系统变量赋值</span></span><br><span class="line"><span class="keyword">SET</span> @@global.autocommit=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> autocommit=<span class="number">0</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#2会话变量</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作用域：针对于当前会话（连接）有效</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">#①查看所有会话变量</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">SESSION</span> <span class="keyword">VARIABLES</span>;</span><br><span class="line"><span class="comment">#②查看满足条件的部分会话变量</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">SESSION</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">'%char%'</span>;</span><br><span class="line"><span class="comment">#③查看指定的会话变量的值</span></span><br><span class="line"><span class="keyword">SELECT</span> @@autocommit;</span><br><span class="line"><span class="keyword">SELECT</span> @@session.tx_isolation;</span><br><span class="line"><span class="comment">#④为某个会话变量赋值</span></span><br><span class="line"><span class="keyword">SET</span> @@session.tx_isolation=<span class="string">'read-uncommitted'</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">SESSION</span> tx_isolation=<span class="string">'read-committed'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用户变量 和 局部变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#案例：声明两个变量，求和并打印</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#用户变量</span></span><br><span class="line"><span class="keyword">SET</span> @m=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">SET</span> @n=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="keyword">sum</span>=@m+@n;</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="keyword">sum</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#局部变量</span></span><br><span class="line"><span class="keyword">DECLARE</span> m <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> n <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> <span class="keyword">SUM</span> <span class="built_in">INT</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">SUM</span>=m+n;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>;</span><br></pre></td></tr></table></figure><p><strong>用户变量和局部变量的对比</strong></p><table><thead><tr><th></th><th>作用域</th><th>定义位置</th><th>语法</th></tr></thead><tbody><tr><td>用户变量</td><td>当前会话</td><td>会话的任何地方</td><td>加@符号，不用指定类型</td></tr><tr><td>局部变量</td><td>定义它的BEGIN END中</td><td>BEGIN END的第一句话</td><td>一般不用加@,需要指定类型</td></tr></tbody></table><h2 id="存储过程"><a class="markdownIt-Anchor" href="#存储过程"></a> 存储过程</h2><blockquote><p>一组经过预先编译的<code>sql</code>语句的集合，理解成<strong>批处理语句</strong></p></blockquote><p><strong>好处：</strong></p><ol><li>提高了sql语句的重用性，减少了开发程序员的压力</li><li>提高了效率</li><li>减少了传输次数</li></ol><p><strong>分类：</strong></p><ol><li>无返回无参</li><li>仅带in类型，无返回有参</li><li>仅带out类型，有返回无参</li><li>既带in又带out，有返回有参</li><li>带inout，有返回有参<br>注意：in、out、inout都可以在一个存储过程中带多个</li></ol><p>参数列表包含三部分：<code>参数模式、参数名、参数类型</code>，例子——<code>in stuname varchar(20)</code></p><h3 id="创建存储过程"><a class="markdownIt-Anchor" href="#创建存储过程"></a> 创建存储过程</h3><p><strong>语法：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> 存储过程名(<span class="keyword">in</span>|<span class="keyword">out</span>|inout 参数名  参数类型,...)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">存储过程体</span><br><span class="line"><span class="keyword">end</span> $</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、需要设置新的结束标记</span><br><span class="line"><span class="number">2</span>、存储过程体中可以有多条sql语句，如果仅仅一条sql语句，则可以省略begin end</span><br><span class="line"><span class="number">3</span>、参数前面的符号的意思</span><br><span class="line"><span class="keyword">in</span>:该参数只能作为输入 （该参数不能做返回值）</span><br><span class="line"><span class="keyword">out</span>：该参数只能作为输出（该参数只能做返回值）</span><br><span class="line"><span class="keyword">inout</span>：既能做输入又能做输出</span><br></pre></td></tr></table></figure><p><strong>调用存储过程</strong><br>call 存储过程名(实参列表)<br>##函数</p><p>###创建函数</p><p>学过的函数：LENGTH、SUBSTR、CONCAT等<br>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> 函数名(参数名 参数类型,...) <span class="keyword">RETURNS</span> 返回类型</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">函数体</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><p>###调用函数<br>SELECT 函数名（实参列表）</p><p>###函数和存储过程的区别</p><figure class="highlight cal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">关键字调用语法返回值应用场景</span><br><span class="line">函数FUNCTIONSELECT 函数()只能是一个一般用于查询结果为一个值并返回时，当有返回值而且仅仅一个</span><br><span class="line">存储过程<span class="function"><span class="keyword">PROCEDURE</span><span class="title">CALL</span> 存储过程<span class="params">()</span>可以有0个或多个一般用于更新</span></span><br></pre></td></tr></table></figure><p>##流程控制结构</p><p>###分支<br>一、if函数<br>语法：if(条件，值1，值2)<br>特点：可以用在任何位置</p><p>二、case语句</p><p>语法：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">情况一：类似于switch</span><br><span class="line"><span class="keyword">case</span> 表达式</span><br><span class="line"><span class="keyword">when</span> 值<span class="number">1</span> <span class="keyword">then</span> 结果<span class="number">1</span>或语句<span class="number">1</span>(如果是语句，需要加分号) </span><br><span class="line"><span class="keyword">when</span> 值<span class="number">2</span> <span class="keyword">then</span> 结果<span class="number">2</span>或语句<span class="number">2</span>(如果是语句，需要加分号)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span> 结果n或语句n(如果是语句，需要加分号)</span><br><span class="line"><span class="keyword">end</span> 【<span class="keyword">case</span>】（如果是放在<span class="keyword">begin</span> <span class="keyword">end</span>中需要加上<span class="keyword">case</span>，如果放在<span class="keyword">select</span>后面不需要）</span><br><span class="line"></span><br><span class="line">情况二：类似于多重<span class="keyword">if</span></span><br><span class="line"><span class="keyword">case</span> </span><br><span class="line"><span class="keyword">when</span> 条件<span class="number">1</span> <span class="keyword">then</span> 结果<span class="number">1</span>或语句<span class="number">1</span>(如果是语句，需要加分号) </span><br><span class="line"><span class="keyword">when</span> 条件<span class="number">2</span> <span class="keyword">then</span> 结果<span class="number">2</span>或语句<span class="number">2</span>(如果是语句，需要加分号)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span> 结果n或语句n(如果是语句，需要加分号)</span><br><span class="line"><span class="keyword">end</span> 【<span class="keyword">case</span>】（如果是放在<span class="keyword">begin</span> <span class="keyword">end</span>中需要加上<span class="keyword">case</span>，如果放在<span class="keyword">select</span>后面不需要）</span><br></pre></td></tr></table></figure><p>特点：<br>可以用在任何位置</p><p>三、if elseif语句</p><p>语法：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 情况<span class="number">1</span> then 语句<span class="number">1</span>;</span><br><span class="line">elseif 情况<span class="number">2</span> then 语句<span class="number">2</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span> 语句n;</span><br><span class="line">end <span class="keyword">if</span>;</span><br></pre></td></tr></table></figure><p>特点：<br>只能用在begin end中！！！！！！！！！！！！！！！</p><p>三者比较：<br>应用场合<br>if函数简单双分支<br>case结构等值判断 的多分支<br>if结构区间判断 的多分支</p><p>###循环</p><p>语法：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">【标签：】<span class="keyword">WHILE</span> 循环条件  <span class="keyword">DO</span></span><br><span class="line">循环体</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">WHILE</span> 【标签】;</span><br></pre></td></tr></table></figure><p>特点：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">只能放在<span class="keyword">BEGIN</span> <span class="keyword">END</span>里面</span><br><span class="line"></span><br><span class="line">如果要搭配leave跳转语句，需要使用标签，否则可以不用标签</span><br><span class="line"></span><br><span class="line">leave类似于java中的<span class="keyword">break</span>语句，跳出所在循环！！！</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;mysql笔记&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#mysql笔记&quot;&gt;&lt;/a&gt; MySQL笔记&lt;/h1&gt;
&lt;h2 id=&quot;目标&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#目标&quot;&gt;&lt;/a&gt; 目标&lt;
      
    
    </summary>
    
      <category term="MySQL" scheme="http://yoursite.com/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>图像分类2</title>
    <link href="http://yoursite.com/2019/03/15/%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB2/"/>
    <id>http://yoursite.com/2019/03/15/图像分类2/</id>
    <published>2019-03-15T00:30:05.000Z</published>
    <updated>2019-03-15T00:31:44.623Z</updated>
    
    <content type="html"><![CDATA[<p>交叉验证:适用于小数据集,深度学习不适用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;交叉验证:适用于小数据集,深度学习不适用&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>图像分类1</title>
    <link href="http://yoursite.com/2019/03/13/%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB1/"/>
    <id>http://yoursite.com/2019/03/13/图像分类1/</id>
    <published>2019-03-13T13:08:39.000Z</published>
    <updated>2019-03-14T06:23:45.612Z</updated>
    
    <content type="html"><![CDATA[<p><strong>内容列表</strong>：</p><ul><li>图像分类、数据驱动方法和流程</li><li>Nearest Neighbor分类器</li><li><ul><li>k-Nearest Neighbor</li></ul></li><li>验证集、交叉验证集和超参数调参</li><li>Nearest Neighbor的优劣</li><li>小结</li><li>小结：应用kNN实践</li><li>拓展阅读</li></ul><h2 id="图像分类"><a class="markdownIt-Anchor" href="#图像分类"></a> 图像分类</h2><p><strong>目标</strong>：这一节我们将介绍图像分类问题。所谓图像分类问题，就是已有固定的分类标签集合，然后对于输入的图像，从分类标签集合中找出一个分类标签，最后把分类标签分配给该输入图像。虽然看起来挺简单的，但这可是计算机视觉领域的核心问题之一，并且有着各种各样的实际应用。在后面的课程中，我们可以看到计算机视觉领域中很多看似不同的问题（比如物体检测和分割），都可以被归结为图像分类问题。</p><p><strong>例子</strong>：以下图为例，图像分类模型读取该图片，并生成该图片属于集合 {cat, dog, hat, mug}中各个标签的概率。需要注意的是，对于计算机来说，图像是一个由数字组成的巨大的3维数组。在这个例子中，猫的图像大小是宽248像素，高400像素，有3个颜色通道，分别是红、绿和蓝（简称RGB）。如此，该图像就包含了248X400X3=297600个数字，每个数字都是在范围0-255之间的整型，其中0表示全黑，255表示全白。我们的任务就是把这些上百万的数字变成一个简单的标签，比如“猫”。</p><p><img src="https://s2.ax1x.com/2019/03/13/AksW4g.png" alt="AksW4g.png"></p><p>图像分类的任务，就是对于一个给定的图像，预测它属于的那个分类标签（或者给出属于一系列不同标签的可能性）。图像是3维数组，数组元素是取值范围从0到255的整数。数组的尺寸是宽度x高度x3，其中这个3代表的是红、绿和蓝3个颜色通道。</p><p><strong>困难和挑战</strong>：对于人来说，识别出一个像“猫”一样视觉概念是简单至极的，然而从计算机视觉算法的角度来看就值得深思了。我们在下面列举了计算机视觉算法在图像识别方面遇到的一些困难，要记住图像是以3维数组来表示的，数组中的元素是亮度值。</p><ul><li><strong>视角变化（Viewpoint variation）</strong>：同一个物体，摄像机可以从多个角度来展现。</li><li><strong>大小变化（Scale variation）</strong>：物体可视的大小通常是会变化的（不仅是在图片中，在真实世界中大小也是变化的）。</li><li><strong>形变（Deformation）</strong>：很多东西的形状并非一成不变，会有很大变化。</li><li><strong>遮挡（Occlusion）</strong>：目标物体可能被挡住。有时候只有物体的一小部分（可以小到几个像素）是可见的。</li><li><strong>光照条件（Illumination conditions）</strong>：在像素层面上，光照的影响非常大。</li><li><strong>背景干扰（Background clutter）</strong>：物体可能混入背景之中，使之难以被辨认。</li><li><strong>类内差异（Intra-class variation）</strong>：一类物体的个体之间的外形差异很大，比如椅子。这一类物体有许多不同的对象，每个都有自己的外形。</li></ul><p>面对以上所有变化及其组合，好的图像分类模型能够在维持分类结论稳定的同时，保持对类间差异足够敏感。</p><p><strong>数据驱动方法</strong>：如何写一个图像分类的算法呢？这和写个排序算法可是大不一样。怎么写一个从图像中认出猫的算法？搞不清楚。因此，与其在代码中直接写明各类物体到底看起来是什么样的，倒不如说我们采取的方法和教小孩儿看图识物类似：给计算机很多数据，然后实现学习算法，让计算机学习到每个类的外形。这种方法，就是<em>数据驱动方法</em>。既然该方法的第一步就是收集已经做好分类标注的图片来作为训练集，那么下面就看看数据库到底长什么样：</p><p>一个有4个视觉分类的训练集。在实际中，我们可能有上千的分类，每个分类都有成千上万的图像。</p><p><strong>图像分类流程</strong>。在课程视频中已经学习过，<strong>图像分类</strong>就是输入一个元素为像素值的数组，然后给它分配一个分类标签。完整流程如下：</p><ul><li><strong>输入</strong>：输入是包含N个图像的集合，每个图像的标签是K种分类标签中的一种。这个集合称为<em>训练集。</em></li><li><strong>学习</strong>：这一步的任务是使用训练集来学习每个类到底长什么样。一般该步骤叫做<em>训练分类器</em>或者<em>学习一个模型</em>。</li><li><strong>评价</strong>：让分类器来预测它未曾见过的图像的分类标签，并以此来评价分类器的质量。我们会把分类器预测的标签和图像真正的分类标签对比。毫无疑问，分类器预测的分类标签和图像真正的分类标签如果一致，那就是好事，这样的情况越多越好。</li></ul><h2 id="nearest-neighbor分类器"><a class="markdownIt-Anchor" href="#nearest-neighbor分类器"></a> Nearest Neighbor分类器</h2><p>作为课程介绍的第一个方法，我们来实现一个<strong>Nearest Neighbor分类器</strong>。虽然这个分类器和卷积神经网络没有任何关系，实际中也极少使用，但通过实现它，可以让读者对于解决图像分类问题的方法有个基本的认识。</p><p>**图像分类数据集：CIFAR-10。**一个非常流行的图像分类数据集是<a href="http://www.cs.toronto.edu/~kriz/cifar.html" target="_blank" rel="noopener">CIFAR-10</a>。这个数据集包含了60000张32X32的小图像。每张图像都有10种分类标签中的一种。这60000张图像被分为包含50000张图像的训练集和包含10000张图像的测试集。</p><p><img src="https://s2.ax1x.com/2019/03/14/AA3CCT.png" alt="AA3CCT.png"></p><p><strong>左边</strong>：从<a href="http://www.cs.toronto.edu/~kriz/cifar.html" target="_blank" rel="noopener">CIFAR-10</a>数据库来的样本图像。</p><p><strong>右边</strong>：第一列是测试图像，然后第一列的每个测试图像右边是使用Nearest Neighbor算法，根据像素差异，从训练集中选出的10张最类似的图片。</p><p>假设现在我们有CIFAR-10的50000张图片（每种分类5000张）作为训练集，我们希望将余下的10000作为测试集并给他们打上标签。Nearest Neighbor算法将会拿着测试图片和训练集中每一张图片去比较，然后将它认为最相似的那个训练集图片的标签赋给这张测试图片。上面右边的图片就展示了这样的结果。请注意上面10个分类中，只有3个是准确的。比如第8行中，马头被分类为一个红色的跑车，原因在于红色跑车的黑色背景非常强烈，所以这匹马就被错误分类为跑车了。</p><p>那么具体如何比较两张图片呢？在本例中，就是比较32x32x3的像素块。最简单的方法就是逐个像素比较，最后将差异值全部加起来。换句话说，就是将两张图片先转化为两个向量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">I_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">I_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,然后计算他们的<strong>L1距离：</strong></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mn>1</mn></msub><mo>(</mo><msub><mi>I</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>I</mi><mn>2</mn></msub><mo>)</mo><mo>=</mo><munder><mo>∑</mo><mi>p</mi></munder><mi mathvariant="normal">∣</mi><msubsup><mi>I</mi><mn>1</mn><mi>p</mi></msubsup><mo>−</mo><msubsup><mi>I</mi><mn>2</mn><mi>p</mi></msubsup><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">d_1(I_1,I_2) = \sum_{p}|I_1^p-I_2^p|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.4361180000000004em;vertical-align:-1.386113em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0500050000000003em;"><span style="top:-1.8999949999999999em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.386113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7822999999999999em;"><span style="top:-2.433692em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.180908em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0486079999999998em;vertical-align:-0.266308em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7822999999999999em;"><span style="top:-2.433692em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.180908em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span><span class="mord">∣</span></span></span></span></span></p><p>这里的求和是针对所有的像素。下面是整个比较流程的图例：</p><p><img src="https://s2.ax1x.com/2019/03/14/AA38rd.png" alt="AA38rd.png"></p><p>以图片中的一个颜色通道为例来进行说明。两张图片使用L1距离来进行比较。逐个像素求差值，然后将所有差值加起来得到一个数值。如果两张图片一模一样，那么L1距离为0，但是如果两张图片很是不同，那L1值将会非常大。</p><h3 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h3><p>下面，让我们看看如何用代码来实现这个分类器。首先，我们将CIFAR-10的数据加载到内存中，并分成4个数组：训练数据和标签，测试数据和标签。在下面的代码中，<strong>Xtr</strong>（大小是50000x32x32x3）存有训练集中所有的图像，<strong>Ytr</strong>是对应的长度为50000的1维数组，存有图像对应的分类标签（从0到9）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Xtr, Ytr, Xte, Yte = load_CIFAR10(<span class="string">'data/cifar10/'</span>) <span class="comment"># a magic function we provide</span></span><br><span class="line"><span class="comment"># flatten out all images to be one-dimensional</span></span><br><span class="line">Xtr_rows = Xtr.reshape(Xtr.shape[<span class="number">0</span>], <span class="number">32</span> * <span class="number">32</span> * <span class="number">3</span>) <span class="comment"># Xtr_rows becomes 50000 x 3072</span></span><br><span class="line">Xte_rows = Xte.reshape(Xte.shape[<span class="number">0</span>], <span class="number">32</span> * <span class="number">32</span> * <span class="number">3</span>) <span class="comment"># Xte_rows becomes 10000 x 3072</span></span><br></pre></td></tr></table></figure><p>现在我们得到所有的图像数据，并且把他们拉长成为行向量了。接下来展示如何训练并评价一个分类器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nn = NearestNeighbor() <span class="comment"># create a Nearest Neighbor classifier class</span></span><br><span class="line">nn.train(Xtr_rows, Ytr) <span class="comment"># train the classifier on the training images and labels</span></span><br><span class="line">Yte_predict = nn.predict(Xte_rows) <span class="comment"># predict labels on the test images</span></span><br><span class="line"><span class="comment"># and now print the classification accuracy, which is the average number</span></span><br><span class="line"><span class="comment"># of examples that are correctly predicted (i.e. label matches)</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'accuracy: %f'</span> % ( np.mean(Yte_predict == Yte) ))</span><br></pre></td></tr></table></figure><p>作为评价标准，我们常常使用<strong>准确率</strong>，它描述了我们预测正确的得分。请注意以后我们实现的所有分类器都需要有这个API：**train(X, y)<strong>函数。该函数使用训练集的数据和标签来进行训练。从其内部来看，类应该实现一些关于标签和标签如何被预测的模型。这里还有个</strong>predict(X)**函数，它的作用是预测输入的新数据的分类标签。现在还没介绍分类器的实现，下面就是使用L1距离的Nearest Neighbor分类器的实现套路：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NearestNeighbor</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(self, X, y)</span>:</span></span><br><span class="line">    <span class="string">""" X is N x D where each row is an example. Y is 1-dimension of size N """</span></span><br><span class="line">    <span class="comment"># the nearest neighbor classifier simply remembers all the training data</span></span><br><span class="line">    self.Xtr = X</span><br><span class="line">    self.ytr = y</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self, X)</span>:</span></span><br><span class="line">    <span class="string">""" X is N x D where each row is an example we wish to predict label for """</span></span><br><span class="line">num_test = X.shape[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># lets make sure that the output type matches the input type</span></span><br><span class="line">Ypred = np.zeros(num_test, dtype = self.ytr.dtype)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># loop over all test rows</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(num_test):</span><br><span class="line">      <span class="comment"># find the nearest training image to the i'th test image</span></span><br><span class="line">      <span class="comment"># using the L1 distance (sum of absolute value differences)</span></span><br><span class="line">distances = np.sum(np.abs(self.Xtr - X[i,:]), axis = <span class="number">1</span>)</span><br><span class="line">min_index = np.argmin(distances) <span class="comment"># get the index with smallest distance</span></span><br><span class="line">Ypred[i] = self.ytr[min_index] <span class="comment"># predict the label of the nearest example</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Ypred</span><br></pre></td></tr></table></figure><p>如果你用这段代码跑CIFAR-10，你会发现准确率能达到<strong>38.6%</strong>。这比随机猜测的10%要好，但是比人类识别的水平（<a href="http://karpathy.github.io/2011/04/27/manually-classifying-cifar10/" target="_blank" rel="noopener">据研究推测是94%</a>）和卷积神经网络能达到的95%还是差多了。点击查看基于CIFAR-10数据的<a href="http://www.kaggle.com/c/cifar-10/leaderboard" target="_blank" rel="noopener">Kaggle算法竞赛排行榜</a>。</p><p><strong>距离选择</strong>：计算向量间的距离有很多种方法，另一个常用的方法是<strong>L2距离</strong>，从几何学的角度，可以理解为它在计算两个向量间的欧式距离。L2距离的公式如下：</p><p>​                                               <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mn>2</mn></msub><mo>(</mo><msub><mi>I</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>I</mi><mn>2</mn></msub><mo>)</mo><mo>=</mo><msqrt><mrow><msub><mo>∑</mo><mi>p</mi></msub><mo>(</mo><msubsup><mi>I</mi><mn>1</mn><mi>p</mi></msubsup><mo>−</mo><msubsup><mi>I</mi><mn>2</mn><mi>p</mi></msubsup><msup><mo>)</mo><mn>2</mn></msup></mrow></msqrt></mrow><annotation encoding="application/x-tex">d_2(I_1,I_2) = \sqrt{\sum_p(I_1^p-I_2^p)^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.84em;vertical-align:-0.681759em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.158241em;"><span class="svg-align" style="top:-3.8em;"><span class="pstrut" style="height:3.8em;"></span><span class="mord" style="padding-left:1em;"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.0016819999999999613em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7823em;"><span style="top:-2.433692em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.1809080000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7823em;"><span style="top:-2.433692em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.1809080000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.266308em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.118241em;"><span class="pstrut" style="height:3.8em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.8800000000000001em;"><svg width="400em" height="1.8800000000000001em" viewbox="0 0 400000 1944" preserveaspectratio="xMinYMin slice"><path d="M1001,80H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5c4,-6.7,10,-10,18,-10zM1001 80H400000v40H1013z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.681759em;"><span></span></span></span></span></span></span></span></span></p><p>换句话说，我们依旧是在计算像素间的差值，只是先求其平方，然后把这些平方全部加起来，最后对这个和开方。在Numpy中，我们只需要替换上面代码中的1行代码就行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">distances = np.sqrt(np.sum(np.square(self.Xtr - X[i,:]), axis = <span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>注意在这里使用了<strong>np.sqrt</strong>，但是在实际中可能不用。因为求平方根函数是一个<em>单调函数</em>，它对不同距离的绝对值求平方根虽然改变了数值大小，但依然保持了不同距离大小的顺序。所以用不用它，都能够对像素差异的大小进行正确比较。如果你在CIFAR-10上面跑这个模型，正确率是<strong>35.4%</strong>，比刚才低了一点。</p><p><strong>L1和L2比较</strong>。比较这两个度量方式是挺有意思的。在面对两个向量之间的差异时，L2比L1更加不能容忍这些差异。也就是说，相对于1个巨大的差异，L2距离更倾向于接受多个中等程度的差异。L1和L2都是在<a href="http://planetmath.org/vectorpnorm" target="_blank" rel="noopener">p-norm</a>常用的特殊形式。</p><h2 id="k-nearest-neighbor分类器"><a class="markdownIt-Anchor" href="#k-nearest-neighbor分类器"></a> k-Nearest Neighbor分类器</h2><p>你可能注意到了，为什么只用最相似的1张图片的标签来作为测试图像的标签呢？这不是很奇怪吗！是的，使用<strong>k-Nearest Neighbor分类器</strong>就能做得更好。它的思想很简单：与其只找最相近的那1个图片的标签，我们找最相似的k个图片的标签，然后让他们针对测试图片进行投票，最后把票数最高的标签作为对测试图片的预测。所以当k=1的时候，k-Nearest Neighbor分类器就是Nearest Neighbor分类器。从直观感受上就可以看到，更高的k值可以让分类的效果更平滑，使得分类器对于异常值更有抵抗力。</p><p><img src="https://s2.ax1x.com/2019/03/14/AA3wRS.png" alt="AA3wRS.png"></p><p>上面示例展示了Nearest Neighbor分类器和5-Nearest Neighbor分类器的区别。例子使用了2维的点来表示，分成3类（红、蓝和绿）。不同颜色区域代表的是使用L2距离的分类器的<strong>决策边界</strong>。白色的区域是分类模糊的例子（即图像与两个以上的分类标签绑定）。需要注意的是，在NN分类器中，异常的数据点（比如：在蓝色区域中的绿点）制造出一个不正确预测的孤岛。5-NN分类器将这些不规则都平滑了，使得它针对测试数据的<strong>泛化</strong>（<strong>generalization</strong>）能力更好（例子中未展示）。注意，5-NN中也存在一些灰色区域，这些区域是因为近邻标签的最高票数相同导致的（比如：2个邻居是红色，2个邻居是蓝色，还有1个是绿色）。</p><p>由于最近邻算法训练快,而测试较慢,所以几乎不会用到这种算法,因为我们接受的是训练可以慢一点,但是测试要快.</p><p>在实际中，大多使用k-NN分类器。但是k值如何确定呢？接下来就讨论这个问题.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;内容列表&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;图像分类、数据驱动方法和流程&lt;/li&gt;
&lt;li&gt;Nearest Neighbor分类器&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;k-Nearest Neighbor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="Computer Vision" scheme="http://yoursite.com/categories/Computer-Vision/"/>
    
    
      <category term="cs231n" scheme="http://yoursite.com/tags/cs231n/"/>
    
      <category term="图像分类" scheme="http://yoursite.com/tags/%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>C-Standard-Library-architecure &amp; sources2</title>
    <link href="http://yoursite.com/2019/03/13/C-Standard-Library-architecure-sources2/"/>
    <id>http://yoursite.com/2019/03/13/C-Standard-Library-architecure-sources2/</id>
    <published>2019-03-13T11:27:45.000Z</published>
    <updated>2019-03-14T06:33:02.840Z</updated>
    
    <content type="html"><![CDATA[<h3 id="list容器链表"><a class="markdownIt-Anchor" href="#list容器链表"></a> list容器（链表）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt; //abort()</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;  //snprintf()</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; //find()</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt; </span></span></span><br><span class="line"><span class="keyword">namespace</span> jj03</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_list</span><span class="params">(<span class="keyword">long</span>&amp; value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\ntest_list().......... \n"</span>;</span><br><span class="line">     </span><br><span class="line"><span class="built_in">list</span>&lt;<span class="built_in">string</span>&gt; c;  </span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">clock_t</span> timeStart = clock();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">long</span> i=<span class="number">0</span>; i&lt; value; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">snprintf</span>(buf, <span class="number">10</span>, <span class="string">"%d"</span>, rand());</span><br><span class="line">        c.push_back(<span class="built_in">string</span>(buf));    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(exception&amp; p) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"i="</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span> &lt;&lt; p.what() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">abort</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"list.size()= "</span> &lt;&lt; c.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"list.max_size()= "</span> &lt;&lt; c.max_size() &lt;&lt; <span class="built_in">endl</span>;    <span class="comment">//357913941</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"list.front()= "</span> &lt;&lt; c.front() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"list.back()= "</span> &lt;&lt; c.back() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> target = get_a_target_string();</span><br><span class="line"><span class="comment">//-----------find----------------------</span></span><br><span class="line">    timeStart = clock();</span><br><span class="line"><span class="keyword">auto</span> pItem = find(c.begin(), c.end(), target);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"std::find(), milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (pItem != c.end())</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"found, "</span> &lt;&lt; *pItem &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"not found! "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//-----------sort----------------------    </span></span><br><span class="line">    timeStart = clock();</span><br><span class="line">c.sort();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"c.sort(), milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>;    </span><br><span class="line">    </span><br><span class="line">c.clear();</span><br><span class="line">test_moveable(<span class="built_in">list</span>&lt;MyString&gt;(),<span class="built_in">list</span>&lt;MyStrNoMove&gt;(), value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>一个萝卜一个坑</li><li>标准库有<kbd>sort</kbd>，容器自己也有一个<kbd>sort</kbd>,容器查找自然要用自己的sort</li></ul><h3 id="forward_list容器单向链表c11"><a class="markdownIt-Anchor" href="#forward_list容器单向链表c11"></a> forward_list容器——单向链表（c++11）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt; //abort()</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;  //snprintf()</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt; </span></span></span><br><span class="line"><span class="keyword">namespace</span> jj04</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_forward_list</span><span class="params">(<span class="keyword">long</span>&amp; value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\ntest_forward_list().......... \n"</span>;</span><br><span class="line">     </span><br><span class="line">forward_list&lt;<span class="built_in">string</span>&gt; c;  </span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">clock_t</span> timeStart = clock();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">long</span> i=<span class="number">0</span>; i&lt; value; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">snprintf</span>(buf, <span class="number">10</span>, <span class="string">"%d"</span>, rand());</span><br><span class="line">        c.push_front(<span class="built_in">string</span>(buf));     </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(exception&amp; p) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"i="</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span> &lt;&lt; p.what() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">abort</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"forward_list.max_size()= "</span> &lt;&lt; c.max_size() &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//536870911</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"forward_list.front()= "</span> &lt;&lt; c.front() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 找到最后一个元素非常慢</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> target = get_a_target_string();</span><br><span class="line">    timeStart = clock();</span><br><span class="line"><span class="keyword">auto</span> pItem = find(c.begin(), c.end(), target);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"std::find(), milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pItem != c.end())</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"found, "</span> &lt;&lt; *pItem &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"not found! "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    timeStart = clock();</span><br><span class="line">c.sort();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"c.sort(), milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">c.clear(); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>只有put_front( ) 没有put_back( )</li><li>单向链表找到最后一个元素非常慢</li><li>.size( )和.back( )都是不存在的</li></ul><h3 id="slist容器gnu非标准等价于forward_list"><a class="markdownIt-Anchor" href="#slist容器gnu非标准等价于forward_list"></a> slist容器（GNU，非标准）等价于forward_list</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ext\slist&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#inlcude <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> jj10</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test_slist</span><span class="params">(<span class="keyword">long</span>&amp; value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        __gnu_cxx::slist&lt;<span class="built_in">string</span>&gt; c;</span><br><span class="line">        <span class="keyword">char</span> buf[<span class="number">10</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">clock_t</span> timeStart = clock();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>;i&lt; value; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">snprintf</span>(buf, <span class="number">10</span>, <span class="string">"%d"</span>, rand());</span><br><span class="line">                c.put_front(<span class="built_in">string</span>(buf));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span>(exception&amp; p)</span><br><span class="line">            &#123;</span><br><span class="line">               <span class="built_in">cout</span> &lt;&lt; <span class="string">"i="</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span> &lt;&lt; p.what() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   <span class="built_in">abort</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="deque容器双端队列双向进出"><a class="markdownIt-Anchor" href="#deque容器双端队列双向进出"></a> deque容器——双端队列:双向进出</h3><p><img src="https://s2.ax1x.com/2019/03/13/AkBPh9.png" alt="AkBPh9.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt; //abort()</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;  //snprintf()</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt; </span></span></span><br><span class="line"><span class="keyword">namespace</span> jj05</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_deque</span><span class="params">(<span class="keyword">long</span>&amp; value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\ntest_deque().......... \n"</span>;</span><br><span class="line">     </span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="built_in">string</span>&gt; c;  </span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">clock_t</span> timeStart = clock();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">long</span> i=<span class="number">0</span>; i&lt; value; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">snprintf</span>(buf, <span class="number">10</span>, <span class="string">"%d"</span>, rand());</span><br><span class="line">        c.push_back(<span class="built_in">string</span>(buf));     </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(exception&amp; p) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"i="</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span> &lt;&lt; p.what() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">abort</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"deque.size()= "</span> &lt;&lt; c.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"deque.front()= "</span> &lt;&lt; c.front() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"deque.back()= "</span> &lt;&lt; c.back() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"deque.max_size()= "</span> &lt;&lt; c.max_size() &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//1073741821</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> target = get_a_target_string();</span><br><span class="line">    timeStart = clock();</span><br><span class="line"><span class="keyword">auto</span> pItem = find(c.begin(), c.end(), target);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"std::find(), milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pItem != c.end())</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"found, "</span> &lt;&lt; *pItem &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"not found! "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    timeStart = clock();</span><br><span class="line">sort(c.begin(), c.end());</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"sort(), milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">c.clear();</span><br><span class="line">test_moveable(<span class="built_in">deque</span>&lt;MyString&gt;(),<span class="built_in">deque</span>&lt;MyStrNoMove&gt;(), value); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关于stack和queue</strong></p><ul><li>stack栈（先进后出）和queue队列（先进先出）其实是deque的容器适配器，但是也可以称之为容器</li><li>都是<kbd>.push()</kbd></li><li>不提供iterator的操作，没有find算法，会破坏二者的特性</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;list容器链表&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#list容器链表&quot;&gt;&lt;/a&gt; list容器（链表）&lt;/h3&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="C++" scheme="http://yoursite.com/categories/C/"/>
    
    
      <category term="deque" scheme="http://yoursite.com/tags/deque/"/>
    
      <category term="list" scheme="http://yoursite.com/tags/list/"/>
    
      <category term="stack" scheme="http://yoursite.com/tags/stack/"/>
    
      <category term="forward_list" scheme="http://yoursite.com/tags/forward-list/"/>
    
  </entry>
  
  <entry>
    <title>C++ Standard Library--architecure &amp; sources1</title>
    <link href="http://yoursite.com/2019/03/12/C-Standard-Library-architecure-sources1/"/>
    <id>http://yoursite.com/2019/03/12/C-Standard-Library-architecure-sources1/</id>
    <published>2019-03-12T14:25:22.000Z</published>
    <updated>2019-03-15T01:02:50.193Z</updated>
    
    <content type="html"><![CDATA[<p>三月份开始复习<strong>泛型编程</strong>和<strong>STL</strong>的体系结构和内核分析,记录今天学的东西。</p><h3 id="1-c-standard-library-vs-standard-template-library"><a class="markdownIt-Anchor" href="#1-c-standard-library-vs-standard-template-library"></a> 1. C++ Standard Library VS Standard Template Library</h3><ul><li><p>标准库是以head files的形式呈现的</p></li><li><p>C++的标准模板库 &gt;= STL</p></li></ul><h3 id="2-stl六大部件"><a class="markdownIt-Anchor" href="#2-stl六大部件"></a> 2. STL六大部件</h3><ol><li>容器（Containers）</li><li>分配器（Allocators）</li><li>迭代器（Iterators）</li><li>适配器（Adapters）_变压器</li><li>算法（Algorithms）</li><li>仿函式（Functors）</li></ol><p><a href="https://imgchr.com/i/AFDFTe" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/03/13/AFDFTe.png" alt="AFDFTe.png"></a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ia[<span class="number">6</span>] = &#123;<span class="number">27</span>, <span class="number">48</span>, <span class="number">166</span>, <span class="number">78</span>, <span class="number">14</span>, <span class="number">227</span>&#125;;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>, allocator&lt;<span class="keyword">int</span>&gt;&gt; vi(ia, ia+<span class="number">6</span>);</span><br><span class="line">    <span class="comment">// predicate：判断式</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; count_if(vi.begin(), vi.end(), not1(bind2nd(less&lt;<span class="keyword">int</span>&gt;(), <span class="number">40</span>)));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：</p><ul><li>count_if：algorithm</li><li>not1:function adapter(negator)</li><li>bind2nd:function adapter(binder)</li><li>less:function object</li></ul><h3 id="3-container前闭后开区间-kbd-kbd"><a class="markdownIt-Anchor" href="#3-container前闭后开区间-kbd-kbd"></a> 3. Container——前闭后开区间 <kbd>[ )</kbd></h3><p><img src="https://s2.ax1x.com/2019/03/13/AFDXB8.png" alt="AFDXB8.png"></p><h3 id="4-range-based-for-loopsince-c11"><a class="markdownIt-Anchor" href="#4-range-based-for-loopsince-c11"></a> 4. range-based for loop(since C++11)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式</span></span><br><span class="line"><span class="keyword">for</span> (decl : coll)&#123;</span><br><span class="line">    statement</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//demo1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i: &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;)&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//demo2</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; vec;</span><br><span class="line">...</span><br><span class="line">    <span class="comment">// 按值传递</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> elem : vec)&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; elem &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 按引用传递</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; elem : vec)&#123;</span><br><span class="line">    elem *=<span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-auto-keyword-since-c-11"><a class="markdownIt-Anchor" href="#5-auto-keyword-since-c-11"></a> 5. auto keyword (since C++ 11)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>&lt;<span class="built_in">string</span>&gt; c;</span><br><span class="line">...</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="built_in">string</span>&gt;::iterator ite;</span><br><span class="line">ite = ::find(c.begin(), c.end(), target);</span><br><span class="line"><span class="comment">//-------------等价于---------------//</span></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="built_in">string</span>&gt; c;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">auto</span> ite = ::find(c.begin(), c.end(), target);</span><br></pre></td></tr></table></figure><h3 id="6容器的结构与分类"><a class="markdownIt-Anchor" href="#6容器的结构与分类"></a> 6.容器的结构与分类</h3><p><a href="https://imgchr.com/i/AFrUCd" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/03/13/AFrUCd.md.png" alt="AFrUCd.md.png"></a></p><ul><li><p>不定序容器是红黑树</p></li><li><p>Set、Map中的key——不可重复</p></li><li><p>Multiset、Multimap中的key——不可重复</p></li></ul><p><strong>辅助函数</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">array</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> ASIZE  =   <span class="number">500000L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">get_a_target_long</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> target = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"target (0~"</span> &lt;&lt; RAND_MAX &lt;&lt; <span class="string">"): "</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; target;</span><br><span class="line"><span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">get_a_target_string</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> target = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"target (0~"</span> &lt;&lt; RAND_MAX &lt;&lt; <span class="string">"): "</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; target;</span><br><span class="line"><span class="built_in">snprintf</span>(buf, <span class="number">10</span>, <span class="string">"%d"</span>, target); <span class="comment">// 作用：模拟object的感觉，不能总传value</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">string</span>(buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  下面两个配合qsort使用 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compareLongs</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* a, <span class="keyword">const</span> <span class="keyword">void</span>* b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (*(<span class="keyword">long</span>*)a - *(<span class="keyword">long</span>*)b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compareStrings</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* a, <span class="keyword">const</span> <span class="keyword">void</span>* b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (*(<span class="built_in">string</span>*)a &gt; *(<span class="built_in">string</span>*)b)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (*(<span class="built_in">string</span>*)a &lt; *(<span class="built_in">string</span>*)b)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="array容器"><a class="markdownIt-Anchor" href="#array容器"></a> Array容器</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt; //qsort, bsearch, NULL</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> jj01</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_array</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\ntest_array().......... \n"</span>;</span><br><span class="line">     </span><br><span class="line"><span class="built_in">array</span>&lt;<span class="keyword">long</span>,ASIZE&gt; c;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">clock_t</span> timeStart = clock();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">long</span> i=<span class="number">0</span>; i&lt; ASIZE; ++i) &#123;</span><br><span class="line">        c[i] = rand(); </span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"array.size()= "</span> &lt;&lt; c.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"array.front()= "</span> &lt;&lt; c.front() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"array.back()= "</span> &lt;&lt; c.back() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"array.data()= "</span> &lt;&lt; c.data() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> target = get_a_target_long();</span><br><span class="line"></span><br><span class="line">timeStart = clock();</span><br><span class="line">    ::qsort(c.data(), ASIZE, <span class="keyword">sizeof</span>(<span class="keyword">long</span>), compareLongs);</span><br><span class="line"><span class="keyword">long</span>* pItem = (<span class="keyword">long</span>*)::bsearch(&amp;target, (c.data()), ASIZE, <span class="keyword">sizeof</span>(<span class="keyword">long</span>), compareLongs); <span class="comment">// 二分查找</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"qsort()+bsearch(), milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//    </span></span><br><span class="line">  <span class="keyword">if</span> (pItem != <span class="literal">NULL</span>)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"found, "</span> &lt;&lt; *pItem &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"not found! "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>技巧：</p><ul><li>测试代码最好也要封装成函数；</li><li>用namespace可以避免变量冲突</li><li><strong>变量随用随定义是最好顶格写</strong>，这样方便查找！</li></ul><h3 id="vector容器"><a class="markdownIt-Anchor" href="#vector容器"></a> vector容器</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt; //abort()</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;  //snprintf()</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; //sort()</span></span></span><br><span class="line"><span class="keyword">namespace</span> jj02</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_vector</span><span class="params">(<span class="keyword">long</span>&amp; value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\ntest_vector().......... \n"</span>;</span><br><span class="line">     </span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; c;  </span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">clock_t</span> timeStart = clock();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">long</span> i=<span class="number">0</span>; i&lt; value; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">snprintf</span>(buf, <span class="number">10</span>, <span class="string">"%d"</span>, rand());</span><br><span class="line">        c.push_back(<span class="built_in">string</span>(buf));     </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(exception&amp; p) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"i="</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span> &lt;&lt; p.what() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">     <span class="comment">//曾經最高 i=58389486 then std::bad_alloc</span></span><br><span class="line"><span class="built_in">abort</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"vector.max_size()= "</span> &lt;&lt; c.max_size() &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//1073747823</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"vector.size()= "</span> &lt;&lt; c.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"vector.front()= "</span> &lt;&lt; c.front() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"vector.back()= "</span> &lt;&lt; c.back() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"vector.data()= "</span> &lt;&lt; c.data() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"vector.capacity()= "</span> &lt;&lt; c.capacity() &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对比不同的查找方式</span></span><br><span class="line"><span class="built_in">string</span> target = get_a_target_string();</span><br><span class="line"><span class="comment">//-------------find: 循序查找, 看运气------------</span></span><br><span class="line">    &#123;</span><br><span class="line">timeStart = clock();</span><br><span class="line"><span class="keyword">auto</span> pItem = ::find(c.begin(), c.end(), target); <span class="comment">//模板函数就是全局函数</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"std::find(), milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> (pItem != c.end())</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"found, "</span> &lt;&lt; *pItem &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"not found! "</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//-----------sort后bresearch：二分查找-----------------   </span></span><br><span class="line">&#123;</span><br><span class="line">timeStart = clock();</span><br><span class="line">    sort(c.begin(), c.end());</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"sort(), milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line"></span><br><span class="line">timeStart = clock();    </span><br><span class="line"><span class="built_in">string</span>* pItem = (<span class="built_in">string</span>*)::bsearch(&amp;target, (c.data()), </span><br><span class="line">                                   c.size(), <span class="keyword">sizeof</span>(<span class="built_in">string</span>), compareStrings); </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"bsearch(), milli-seconds : "</span> &lt;&lt; (clock()-timeStart) &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line">   </span><br><span class="line">  <span class="keyword">if</span> (pItem != <span class="literal">NULL</span>)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"found, "</span> &lt;&lt; *pItem &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"not found! "</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.clear();</span><br><span class="line">test_moveable(<span class="built_in">vector</span>&lt;MyString&gt;(),<span class="built_in">vector</span>&lt;MyStrNoMove&gt;(), value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>容器的<kbd>capacity</kbd>的是成倍数增长的，在另外的地方开辟内存然后再将原来的复制到新的，过程比较慢</li><li>循序查找不一定比sort后bresearch慢，由此思考时间复杂度</li><li>所有的算法都是全局函数</li><li>容器的定义都有第二参数分配器，一般用默认</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;三月份开始复习&lt;strong&gt;泛型编程&lt;/strong&gt;和&lt;strong&gt;STL&lt;/strong&gt;的体系结构和内核分析,记录今天学的东西。&lt;/p&gt;
&lt;h3 id=&quot;1-c-standard-library-vs-standard-template-library&quot;&gt;&lt;a c
      
    
    </summary>
    
      <category term="C++" scheme="http://yoursite.com/categories/C/"/>
    
    
      <category term="array" scheme="http://yoursite.com/tags/array/"/>
    
      <category term="vector" scheme="http://yoursite.com/tags/vector/"/>
    
  </entry>
  
  <entry>
    <title>智能寻迹爬楼载重清洁装置</title>
    <link href="http://yoursite.com/2019/03/10/%E7%88%AC%E6%A5%BC%E5%B0%8F%E8%BD%A6/"/>
    <id>http://yoursite.com/2019/03/10/爬楼小车/</id>
    <published>2019-03-10T14:09:18.000Z</published>
    <updated>2019-07-23T13:06:33.304Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>就像叶子从痛苦的蜷缩中要用力舒展一样，人也要从不假思索的蒙昧里挣脱，这才是活着。</p><p>​——柴静《看见》</p></blockquote><h2 id="演示视频见b站"><a class="markdownIt-Anchor" href="#演示视频见b站"></a> <a href="https://www.bilibili.com/video/av55167725" target="_blank" rel="noopener">演示视频见B站</a></h2><p>这是我大学作为项目负责人的封山之作，完成了毕业前要做一件真正的实物产品的心愿。这件作品耗费了我巨大的心血，最终的实现效果也没有达到我理想的状态。实践本就没有完美的事情，永远都在探索完美的路上。下文是我在毕业后总结归纳的一些细枝末节，搭建博客之后开学的第二周，作为一个会议记录于此，并时刻提醒自己，接受自己的不完美，但是持续不断的努力。</p><p><a href="https://imgchr.com/i/A9d4I0" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/03/10/A9d4I0.md.png" alt="A9d4I0.md.png"></a></p><h2 id="技术领域"><a class="markdownIt-Anchor" href="#技术领域"></a> <strong>技术领域</strong></h2><p>本发明涉及智能寻迹爬楼载重清洁装置，属于服务类机器人技术领域，其主要功能是实现上下楼负重搬运以及楼梯清洁，可以在没有电梯的建筑楼层使用。</p><h2 id="背景技术"><a class="markdownIt-Anchor" href="#背景技术"></a> 背景技术</h2><p>本发明的最初目的是解决搬运诸如水桶等重物时人工上楼搬运费时费力的问题。同时考虑到楼梯各时间段使用频繁，楼梯层数较多，人力清洁工作繁重，故在尾部加装清洁装置。两者结合通过电机带传动组成搬运清洁两用型的智能装置。国内多数爬楼载重机器人，采用升降式、腿式结构，上楼缓慢效率不高且爬楼机械装置大多不适用于平地，平地使用时所受阻力较大，行动缓慢，转弯不便。基于上述背景我们设计了独特的变形前轮，实现在平路和上下楼的智能切换，以及转向装置能自动调整前轮的角度实现快速转弯。该小车前轮采用变形轮机构，可平地导向也可上下楼梯，控制方式灵活。可适用于各种工厂、住宅楼的货物搬运。同时对车尾稍加人性化设计，便可实现清洁功能，具有较大的社会价值和经济价值。</p><h2 id="发明内容"><a class="markdownIt-Anchor" href="#发明内容"></a> <strong>发明内容</strong></h2><p><img src="https://s2.ax1x.com/2019/03/10/A9KdMT.png" alt="A9KdMT.png"></p><p>本发明的技术方案：</p><p>一种智能寻迹爬楼载重清洁装置，包括电气部分和机械部分；</p><p>所述的电气部分4包括电源4-1和电气模块4-2，以控制超声波导距、单片机、舵机以及电机；</p><p>所述的机械部分包括变形轮机构1、转向机构2、清洁机构3和机身5；</p><p>所述的机身5包括行星轮5-1和机身车座5-2，所述的机身车座5-2为长方形的面板，所述的行星轮5-1有两个，通过轴对称固定在机身车座5-2尾部的两端；</p><p>所述的变形轮机构1有两个，包括变形轮支架1-4、变形轮分支1-1、三爪卡销1-3、变形舵机1-2、圆盘支架1-6和舵盘1-5；</p><p>所述的变形轮分支1-1共三个，依次连接组成轮子的外轮廓；所述的变形轮分支1-1是由三根带有弧度的杆组成的三杆机构，一根外侧杆、一根滑动杆和一根支撑杆；外侧杆构成轮子的外轮廓，其一端设有滑槽，变形轮变形时，相邻的变形轮分支1-1的滑动杆滑入滑槽中；滑动杆和支撑杆的一端均固定在外侧杆上，支撑杆的另一端固定在滑动杆上，滑动杆的另一端铰接于变形轮支架1-4上；所述的滑动杆的下端、内侧设有滑轨，三爪卡销1-3在滑轨中滑动；所述的圆盘支架1-6为中心开有圆孔的圆盘；所述的变形轮支架1-4为中空的圆柱体，圆盘支架1-6中心圆孔的直径与变形轮支架1-4的直径相同，变形轮支架1-4穿过外侧的圆盘支架1-6中心开口，并固定在外侧的圆盘支架1-6上；所述的三爪卡销1-3为一端均匀分布有三个爪的圆柱体，三爪卡销1-3的圆柱体嵌套在变形轮支架1-4的内部，三爪卡销1-3的爪插在三杆机构的滑轨内，三爪卡销1-3的圆柱体设有五个通孔；所述的变形轮分支1-1的滑动杆下部有一个通孔，通过销键和铰环将三个三杆机构均匀固定在变形轮支架1-4上；所述的变形轮支架1-4、三爪卡销1-3和外侧的圆盘支架1-6，共同固定在内侧的圆盘支架1-6上，内侧和外侧的圆盘支架1-6配合，以固定三爪卡销1-3并保证三杆机构在一个平面内移动；所述的变形舵机1-2一端带有五个插杆，通过内侧的圆盘支架1-6的中心圆孔插入三爪卡销1-3的通孔内，使变形舵机1-2与三爪卡销1-3连接；所述的变形舵机1-2，另一端安装有舵盘1-5，变形舵机1-2提供转矩，通过正反转实现变形轮整体和变型的切换；</p><p><img src="https://s2.ax1x.com/2019/03/10/A9wMQg.png" alt="A9wMQg.png"></p><p><img src="https://s2.ax1x.com/2019/03/10/A9KDZ4.png" alt="A9KDZ4.png"></p><p><img src="https://s2.ax1x.com/2019/03/10/A9K5ee.png" alt="A9K5ee.png"></p><p>所述的转向机构2包括轴承座2-1、转动连接装置2-2、转向机构电机2-3、轴2-4、转动舵机2-5、联轴器2-6、皮带2-7、球头拉杆2-8和万向节2-9；所述的轴承座2-1共两个，对称固定在机身车座5-2前部的两端；所述的轴2-4的两端固定在轴承座2-1上，轴2-4的两端安装有万向节2-9，轴2-4通过万向节2-9与舵盘1-5相连接，使变形轮机构1与转向机构2相连接；所述的转向舵机2-5固定在机身车座5-2前部，转向舵机2-5的一侧安装有转动连接装置2-2，转动连接装置2-2的两个插孔分别用于连接球头拉杆2-8，球头拉杆2-8的另一端与万向节2-9外侧连接，使得转向舵机2-5与舵盘1-5相连接；所述的联轴器2-6套装在轴2-4上，所述的转向机构电机2-3固定机身车座5-2上；所述的皮带2-7，一端套装在联轴器2-6上，另一端套装在转向机构电机2-3的输出端；所述的转向机构电机2-3通过皮带2-7和联轴器2-6带动轴2-4旋转，轴2-4来传递动力，带动变形轮机构1运转；所述的转动舵机2-5工作时会左右摆动，球头拉杆2-8将转动舵机2-5的摆动转换为角度变化传递给万向节2-9，接着将该变化传递给与万向节2-9连接的变形轮舵机1-2，从而完成转向工作；</p><p><img src="https://s2.ax1x.com/2019/03/10/A9Kood.png" alt="A9Kood.png"></p><p>所述的清洁机构3位于装置的尾部，包括齿条3-1、刷子3-2、清洁机构电机3-3和齿轮3-4；所述的齿条3-1固定在机身车座5-2的尾部，所述的清洁机构电机3-3固定在机身车座5-2上，所述的齿轮3-4固定在清洁机构电机3-3的输出端，齿轮3-4与齿条3-1相互咬合；所述的刷子3-2位于机身车座5-2的尾部的底表面，通过螺栓活动连接，与齿条3-1固定连接；所述的清洁机构电机3-3的转动带动齿轮3-4转动，进而使齿条3-1横向往复运动，带动刷子3-2的往复运动，实现楼梯的清洁功能；</p><p><img src="https://s2.ax1x.com/2019/03/10/A9Muk9.png" alt="A9Muk9.png"></p><p>所述的电气部分4由电源4-1和电气模块4-2组成；所述的电源4-1和电气模块4-2并排固定在机身车座5-2中间位置；所述的电气模块4-2包括单片机模块和超声波模块。</p><p><img src="https://s2.ax1x.com/2019/03/10/A9MRts.png" alt="A9MRts.png"></p><p><img src="https://s2.ax1x.com/2019/03/10/A9QV3t.png" alt="A9QV3t.png"></p><p>所述的机身车座5-2为亚克力板材质。</p><p>所述的清洁机构电机3-3为37型减速电机。</p><p>所述的变形舵机1-2为RDS3109双轴舵机。</p><p>所述的轴2-4的直径为6mm。</p><p>本发明的有益效果：车采用变形轮结构：平地导向时为圆形，上下楼梯时一分为三，控制方式灵活；该车克服了现有爬楼装置只用于爬楼且平地转向、前行困难的缺点，通过变形轮实现平地上楼自由转换。变形轮简化了传统的铰链机构改用销传动在导轨中移动实现变形，结构简单且不失牢固与严密性，极具创造价值；上下四个超声波模块检测距离差判断墙、楼梯从而绕行和变形；车尾安装清洁装置，可自动清洁楼梯。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;就像叶子从痛苦的蜷缩中要用力舒展一样，人也要从不假思索的蒙昧里挣脱，这才是活着。&lt;/p&gt;
&lt;p&gt;​																		——柴静《看见》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;演示视频见b站&quot;&gt;&lt;a class=&quot;mar
      
    
    </summary>
    
      <category term="Projects" scheme="http://yoursite.com/categories/Projects/"/>
    
    
      <category term="避障" scheme="http://yoursite.com/tags/%E9%81%BF%E9%9A%9C/"/>
    
      <category term="超声波检测" scheme="http://yoursite.com/tags/%E8%B6%85%E5%A3%B0%E6%B3%A2%E6%A3%80%E6%B5%8B/"/>
    
      <category term="爬楼装置" scheme="http://yoursite.com/tags/%E7%88%AC%E6%A5%BC%E8%A3%85%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>小型鱼丸生产加工流水线设计</title>
    <link href="http://yoursite.com/2019/03/10/%E9%B1%BC%E4%B8%B8%E6%9C%BA/"/>
    <id>http://yoursite.com/2019/03/10/鱼丸机/</id>
    <published>2019-03-10T06:29:44.000Z</published>
    <updated>2019-07-23T13:07:40.176Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>工作马马虎虎，只想在兴趣和游戏中寻觅快活，充其量只能获得一时的快感，绝不能尝到从心底涌出的惊喜和快乐，但来自工作的喜悦并不像糖果那样——放进嘴里就甜味十足，而是需要从苦劳与艰辛中渗出，因此当我们聚精会神，孜孜不倦，克服艰辛后的成就感，世上没有哪种喜悦可以类比.</p><p>​——稻盛和夫《活法》</p></blockquote><h2 id="视频链接"><a class="markdownIt-Anchor" href="#视频链接"></a> <a href="https://www.bilibili.com/video/av55167221" target="_blank" rel="noopener">视频链接</a></h2><p>大二的时候，出于对工业设计和机械结构的兴趣，自学了SolidWorks，拉上几个朋友一起做了这个项目。来到威海，我们饱含着对大海的一种情怀和向往，致使我们想到了海产品的加工。鱼丸加工整个流水线很是庞大，剖割、清洗、杀菌、擂溃、调料、成型、蒸煮、冷冻到包装。我们着重从拥有较多机械结构的<strong>剖割</strong>、<strong>鱼丸成型</strong>和<strong>包装</strong>三部分建模——自动杀鱼系统、鱼丸成型系统和包装机系统。此套系统运用于鱼的前期处理包括去鳞，去内脏，去头尾，清洗等，以及鱼丸的成型和包装一体化的生产。</p><p>主要是用<strong>SolidWorks</strong>进行设计，<strong>keyshot</strong>进行渲染，<strong>Solid-Composer</strong>结合<strong>AE</strong>进行视频制作。整个项目的工程量相当大，从目标敲定到最后的完工花了将近四个月的时间。由于之间机器人比赛的经验，作为队长我很好的进行了分工和计划推进，最终的结果还是挺让人激动的。</p><h3 id="总设计图"><a class="markdownIt-Anchor" href="#总设计图"></a> 总设计图</h3><p><img src="https://s2.ax1x.com/2019/03/09/ASHY7t.jpg" alt="ASHY7t.jpg"></p><p><img src="https://s2.ax1x.com/2019/03/10/A9pHGd.png" alt="A9pHGd.png"></p><p><img src="https://s2.ax1x.com/2019/03/10/A9EaH1.png" alt="A9EaH1.png"></p><p><img src="https://s2.ax1x.com/2019/03/10/A9EuBn.png" alt="A9EuBn.png"></p><h3 id="杀鱼机部分"><a class="markdownIt-Anchor" href="#杀鱼机部分"></a> 杀鱼机部分</h3><p><img src="https://s2.ax1x.com/2019/03/09/ASHJ0I.jpg" alt="ASHJ0I.jpg"></p><p><img src="https://s2.ax1x.com/2019/03/10/A9pWKx.png" alt="A9pWKx.png"></p><p>机器主要传动方式为齿轮传动和皮带传动，将鱼平放在传送带上，前后的夹持装置把鱼尾和鱼头夹住；水平方向的刀片将鱼腹剖开，带有软毛刷的小滚筒将内脏清除，同时毛刷中的空心管冲水清洗鱼腹，内脏落至下方垃圾箱内；之后竖直方向的刀片将鱼头鱼尾切掉，鱼腹由出口处传送带运出，鱼头鱼尾回到垃圾箱上方，夹持装置上的顶杆使其落至垃圾箱中。</p><h3 id="鱼丸成型机部分"><a class="markdownIt-Anchor" href="#鱼丸成型机部分"></a> 鱼丸成型机部分</h3><p><img src="https://s2.ax1x.com/2019/03/09/ASHUtf.jpg" alt="ASHUtf.jpg"></p><p><img src="https://s2.ax1x.com/2019/03/10/A9p2x1.png" alt="A9p2x1.png"></p><p>鱼丸的成型方面运用了行星齿轮机构并综合了能量守恒及流体力学等方面要求设计了变速管以实现鱼丸成型，防止阻塞现象的发生。</p><h3 id="包装机部分"><a class="markdownIt-Anchor" href="#包装机部分"></a> 包装机部分</h3><p><img src="https://s2.ax1x.com/2019/03/09/ASHNAP.jpg" alt="ASHNAP.jpg"></p><p><img src="https://s2.ax1x.com/2019/03/10/A9poIe.png" alt="A9poIe.png"></p><p>包装机则通过两侧传送装置同时送纸袋，创新地运用到三边封口装置，其中用四个锥齿轮和连杆组成传动机构同时封左右和下口，上口鱼丸掉落后，通过两个机械臂的配合使包装袋转过90度后，另一个连杆机构再封装上口，而后掉落至传送带完成包装。</p><p>这些东西相当于对之前有个交代吧，知识都是相通的，要不断得在成功的地方吸取养分，然后迁移到其他地方。正如前文的摘录，孜孜以求才能活得更大的幸福，加油！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;工作马马虎虎，只想在兴趣和游戏中寻觅快活，充其量只能获得一时的快感，绝不能尝到从心底涌出的惊喜和快乐，但来自工作的喜悦并不像糖果那样——放进嘴里就甜味十足，而是需要从苦劳与艰辛中渗出，因此当我们聚精会神，孜孜不倦，克服艰辛后的成就感，世上没有哪种喜
      
    
    </summary>
    
      <category term="Projects" scheme="http://yoursite.com/categories/Projects/"/>
    
    
      <category term="SolidWorks" scheme="http://yoursite.com/tags/SolidWorks/"/>
    
      <category term="keyshot" scheme="http://yoursite.com/tags/keyshot/"/>
    
      <category term="机械设计" scheme="http://yoursite.com/tags/%E6%9C%BA%E6%A2%B0%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>2019年，未来的你怎么样了</title>
    <link href="http://yoursite.com/2019/02/08/%E4%BB%8A%E5%A4%A9%E8%81%8A%E8%81%8A%E6%A2%A6%E6%83%B3/"/>
    <id>http://yoursite.com/2019/02/08/今天聊聊梦想/</id>
    <published>2019-02-08T14:11:38.000Z</published>
    <updated>2019-03-05T07:49:29.616Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>平淡的生活里，最怕不是没有斗志，而是像《无问西东》里说得那样，把自己置身于忙碌当中，有一种麻木的踏实，但丧失了真实……</p></blockquote><p><img src="https://s2.ax1x.com/2019/03/05/kXvYY8.png" alt="kXvYY8.png"></p><p>很久没有通过文字和自己对话了，而时间不知不觉却已来到了2019年。无论内心汹涌澎湃还是波澜不惊，都抵不住日历一页页得翩跹而逝。在时间面前，众生平等，而任何微小的差异经过时间的放大，每个人的人生各自划过不同的轨迹，律动不同的音符。每当独处时，当音乐停止，我对眼前是世界依然是一无所知。</p><p>2018从某种意义上是改变和收获的一年。开始看电子书，开始打字写文章，开始不断学习编程，开始健身，开始重新热爱足球。这些之前我都不曾做过的事情，在2018年变得稀松平常了。我曾固执的认为电子书永远没有纸质书籍让我读起来有感觉，我曾因为机械专业的禁锢对编程拒之门外，我也曾因为喜欢跑步尤其是徜徉在威海的环海路跑步无数次拒绝去健身房撸铁，而改变都在悄然发生着。我通过电子书籍更快的获取营养，借助博客更好的练习表达能力，而健身让我的瘦弱的身体渐渐变得强壮，俄罗斯世界杯让我重燃对足球的热爱。有时我不禁问自己，改变好像也不难，但是你能坚持多久呢？</p><p>成功也不难，高中化学老师说过，不过“专注”二字。何其难，何其难，对于我这个对所有事物保持好奇而只有三分钟热度的人来说，成功还有我的一席之地吗？高考的失败在于没有持续努力，保研的苦果在于固执和缺乏沟通，每当在人生的转折点，我都会突然迷失，而今年我又面临着似乎更重要的抉择——就业。</p><p>乱花渐欲迷人眼，周遭的太多新奇和诱惑，我总是在一些事物中来回切换，而没有一直专注于一件事，这样导致了大量时间在重复曾经熟悉的东西而没有更深入地学习，吉他，编程，cv，dota等等都是如此，我希望自己能专注于一个点深入下去一探究竟，而不是大包大揽得学习很多表层的东西。表层的东西只要付出少量的时间成本就能够获得，深层的东西才是值得去挖掘的，而深层的获得需要日积月累得表层知识的铺垫，让理性逐渐渗透进感性，感觉就来了。能够有C罗的自律可能是一种奢望，但是我希望自己在没有很高天赋的情况下，能够自律得去面对生活，每当生活的很舒服的时候，我却常常惴惴不安，似乎只有辛勤的开垦才能让一天充满幸福，我不知道这是不是穷人的思维。然而麻木的踏实也是自我欺骗，这样并不能收获真实的快乐。</p><p>现在先坚持学习编程，吉他和健身，至于时间会将我带向哪里，在浪潮中去翻涌吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;平淡的生活里，最怕不是没有斗志，而是像《无问西东》里说得那样，把自己置身于忙碌当中，有一种麻木的踏实，但丧失了真实……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/03/05/kX
      
    
    </summary>
    
      <category term="杂记" scheme="http://yoursite.com/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="杂记" scheme="http://yoursite.com/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>操作像素的14中方法</title>
    <link href="http://yoursite.com/2019/02/02/%E6%93%8D%E4%BD%9C%E5%83%8F%E7%B4%A0%E7%9A%8414%E4%B8%AD%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/02/02/操作像素的14中方法/</id>
    <published>2019-02-02T14:00:24.000Z</published>
    <updated>2019-02-02T14:17:48.392Z</updated>
    
    <content type="html"><![CDATA[<p>​OpenCV是我研途中重点打交道的工具库。教研室流传下来的图像处理程序都是基于OpenCV1的code，那更底层，更多指针与结构体。而如今OpenCV4都已经更新了，C++强调接口的实用是大势所趋，用到什么去看相关的函数即可。这半年的学习让我深刻体会到线性学习的弊端和不足，这也是研究生主要看论文而本科生主要以课本为主的原因，链式学习更能快速打通各个学科之间的交叉与联系，保证学习的效率。</p><p>今天记录一下操作元素的思路。课题中的图像处理往往是通过各种方法提取到边缘后扫点，将点储存在容器中再拟合圆或者直线。如何快速扫描像素呢，国外的一本书中给出了14中不同的方式。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------------------【宏定义部分】---------------------------------------------</span></span><br><span class="line"><span class="comment">//        描述：包含程序所使用宏定义</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NTESTS 14</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NITERATIONS 20</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------------------- 【方法一】-------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用.ptr 和 []</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce0</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> nl= image.rows; <span class="comment">//行数</span></span><br><span class="line">      <span class="keyword">int</span> nc= image.cols * image.channels(); <span class="comment">//每行元素的总元素数量</span></span><br><span class="line">              </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nl; j++)</span><br><span class="line">      &#123;</span><br><span class="line"></span><br><span class="line">          uchar* data= image.ptr&lt;uchar&gt;(j);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nc; i++)</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line">                 </span><br><span class="line">                  data[i]= data[i]/div*div + div/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">            &#125; <span class="comment">//单行处理结束                  </span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------------------------【方法二】-------------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用 .ptr 和 * ++</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce1</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> nl= image.rows; <span class="comment">//行数</span></span><br><span class="line">      <span class="keyword">int</span> nc= image.cols * image.channels(); <span class="comment">//每行元素的总元素数量</span></span><br><span class="line">              </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nl; j++)</span><br><span class="line">      &#123;</span><br><span class="line"></span><br><span class="line">          uchar* data= image.ptr&lt;uchar&gt;(j);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nc; i++)</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line">                 </span><br><span class="line">                 *data++= *data/div*div + div/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">            &#125; <span class="comment">//单行处理结束              </span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------------------------------【方法三】-------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用.ptr 和 * ++ 以及模操作</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce2</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> nl= image.rows; <span class="comment">//行数</span></span><br><span class="line">      <span class="keyword">int</span> nc= image.cols * image.channels(); <span class="comment">//每行元素的总元素数量</span></span><br><span class="line">              </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nl; j++)</span><br><span class="line">      &#123;</span><br><span class="line"></span><br><span class="line">          uchar* data= image.ptr&lt;uchar&gt;(j);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nc; i++)</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line">       </span><br><span class="line">                  <span class="keyword">int</span> v= *data;</span><br><span class="line">                  *data++= v - v%div + div/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">            &#125; <span class="comment">//单行处理结束                   </span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------------------【方法四】---------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用.ptr 和 * ++ 以及位操作</span></span><br><span class="line"><span class="comment">//----------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce3</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> nl= image.rows; <span class="comment">//行数</span></span><br><span class="line">      <span class="keyword">int</span> nc= image.cols * image.channels(); <span class="comment">//每行元素的总元素数量</span></span><br><span class="line">      <span class="keyword">int</span> n= <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="built_in">log</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(div))/<span class="built_in">log</span>(<span class="number">2.0</span>));</span><br><span class="line">      <span class="comment">//掩码值</span></span><br><span class="line">      uchar mask= <span class="number">0xFF</span>&lt;&lt;n; <span class="comment">// e.g. 对于 div=16, mask= 0xF0</span></span><br><span class="line">              </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nl; j++) &#123;</span><br><span class="line"></span><br><span class="line">          uchar* data= image.ptr&lt;uchar&gt;(j);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nc; i++) &#123;</span><br><span class="line">            <span class="comment">//------------开始处理每个像素-------------------</span></span><br><span class="line">                 </span><br><span class="line">            *data++= *data&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">            &#125;  <span class="comment">//单行处理结束            </span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------------------【方法五】----------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用指针算术运算</span></span><br><span class="line"><span class="comment">//---------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce4</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> nl= image.rows; <span class="comment">//行数</span></span><br><span class="line">      <span class="keyword">int</span> nc= image.cols * image.channels(); <span class="comment">//每行元素的总元素数量</span></span><br><span class="line">      <span class="keyword">int</span> n= <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="built_in">log</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(div))/<span class="built_in">log</span>(<span class="number">2.0</span>));</span><br><span class="line">      <span class="keyword">int</span> step= image.step; <span class="comment">//有效宽度</span></span><br><span class="line">      <span class="comment">//掩码值</span></span><br><span class="line">      uchar mask= <span class="number">0xFF</span>&lt;&lt;n; <span class="comment">// e.g. 对于 div=16, mask= 0xF0</span></span><br><span class="line">              </span><br><span class="line">      <span class="comment">//获取指向图像缓冲区的指针</span></span><br><span class="line">      uchar *data= image.data;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nl; j++)</span><br><span class="line">      &#123;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nc; i++)</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line">                 </span><br><span class="line">            *(data+i)= *data&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">            &#125; <span class="comment">//单行处理结束              </span></span><br><span class="line"></span><br><span class="line">            data+= step;  <span class="comment">// next line</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------------------------【方法六】----------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用 .ptr 和 * ++以及位运算、image.cols * image.channels()</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce5</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> nl= image.rows; <span class="comment">//行数</span></span><br><span class="line">      <span class="keyword">int</span> n= <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="built_in">log</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(div))/<span class="built_in">log</span>(<span class="number">2.0</span>));</span><br><span class="line">      <span class="comment">//掩码值</span></span><br><span class="line">      uchar mask= <span class="number">0xFF</span>&lt;&lt;n; <span class="comment">// e.g. 例如div=16, mask= 0xF0</span></span><br><span class="line">              </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nl; j++)</span><br><span class="line">      &#123;</span><br><span class="line"></span><br><span class="line">          uchar* data= image.ptr&lt;uchar&gt;(j);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;image.cols * image.channels(); i++)</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line">                 </span><br><span class="line">            *data++= *data&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">            &#125; <span class="comment">//单行处理结束            </span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// -------------------------------------【方法七】----------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用.ptr 和 * ++ 以及位运算(continuous)</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce6</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> nl= image.rows; <span class="comment">//行数</span></span><br><span class="line">      <span class="keyword">int</span> nc= image.cols * image.channels(); <span class="comment">//每行元素的总元素数量</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (image.isContinuous())  </span><br><span class="line">      &#123;</span><br><span class="line">          <span class="comment">//无填充像素</span></span><br><span class="line">          nc= nc*nl;</span><br><span class="line">          nl= <span class="number">1</span>;  <span class="comment">// 为一维数列</span></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> n= <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="built_in">log</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(div))/<span class="built_in">log</span>(<span class="number">2.0</span>));</span><br><span class="line">      <span class="comment">//掩码值</span></span><br><span class="line">      uchar mask= <span class="number">0xFF</span>&lt;&lt;n; <span class="comment">// e.g. 比如div=16, mask= 0xF0</span></span><br><span class="line">              </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nl; j++) &#123;</span><br><span class="line"></span><br><span class="line">          uchar* data= image.ptr&lt;uchar&gt;(j);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nc; i++) &#123;</span><br><span class="line">            <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line">                 </span><br><span class="line">            *data++= *data&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">            &#125; <span class="comment">//单行处理结束                   </span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------【方法八】------------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用 .ptr 和 * ++ 以及位运算 (continuous+channels)</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce7</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> nl= image.rows; <span class="comment">//行数</span></span><br><span class="line">      <span class="keyword">int</span> nc= image.cols ; <span class="comment">//列数</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (image.isContinuous())  </span><br><span class="line">      &#123;</span><br><span class="line">          <span class="comment">//无填充像素</span></span><br><span class="line">          nc= nc*nl;</span><br><span class="line">          nl= <span class="number">1</span>;  <span class="comment">// 为一维数组</span></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> n= <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="built_in">log</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(div))/<span class="built_in">log</span>(<span class="number">2.0</span>));</span><br><span class="line">      <span class="comment">//掩码值</span></span><br><span class="line">      uchar mask= <span class="number">0xFF</span>&lt;&lt;n; <span class="comment">// e.g. 比如div=16, mask= 0xF0</span></span><br><span class="line">              </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nl; j++) &#123;</span><br><span class="line"></span><br><span class="line">          uchar* data= image.ptr&lt;uchar&gt;(j);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nc; i++) &#123;</span><br><span class="line">            <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line">                 </span><br><span class="line">            *data++= *data&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">            *data++= *data&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">            *data++= *data&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">            &#125; <span class="comment">//单行处理结束                    </span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// -----------------------------------【方法九】 ------------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用Mat_ iterator</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce8</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//获取迭代器</span></span><br><span class="line">      Mat_&lt;Vec3b&gt;::iterator it= image.begin&lt;Vec3b&gt;();</span><br><span class="line">      Mat_&lt;Vec3b&gt;::iterator itend= image.end&lt;Vec3b&gt;();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> ( ; it!= itend; ++it) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line"></span><br><span class="line">        (*it)[<span class="number">0</span>]= (*it)[<span class="number">0</span>]/div*div + div/<span class="number">2</span>;</span><br><span class="line">        (*it)[<span class="number">1</span>]= (*it)[<span class="number">1</span>]/div*div + div/<span class="number">2</span>;</span><br><span class="line">        (*it)[<span class="number">2</span>]= (*it)[<span class="number">2</span>]/div*div + div/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">      &#125;<span class="comment">//单行处理结束  </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------------【方法十】-----------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用Mat_ iterator以及位运算</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce9</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// div必须是2的幂</span></span><br><span class="line">      <span class="keyword">int</span> n= <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="built_in">log</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(div))/<span class="built_in">log</span>(<span class="number">2.0</span>));</span><br><span class="line">      <span class="comment">//掩码值</span></span><br><span class="line">      uchar mask= <span class="number">0xFF</span>&lt;&lt;n; <span class="comment">// e.g. 比如 div=16, mask= 0xF0</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 获取迭代器</span></span><br><span class="line">      Mat_&lt;Vec3b&gt;::iterator it= image.begin&lt;Vec3b&gt;();</span><br><span class="line">      Mat_&lt;Vec3b&gt;::iterator itend= image.end&lt;Vec3b&gt;();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//扫描所有元素</span></span><br><span class="line">      <span class="keyword">for</span> ( ; it!= itend; ++it)</span><br><span class="line">      &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line"></span><br><span class="line">        (*it)[<span class="number">0</span>]= (*it)[<span class="number">0</span>]&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">        (*it)[<span class="number">1</span>]= (*it)[<span class="number">1</span>]&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">        (*it)[<span class="number">2</span>]= (*it)[<span class="number">2</span>]&amp;mask + div/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">      &#125;<span class="comment">//单行处理结束  </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------【方法十一】---------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用Mat Iterator_</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce10</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//获取迭代器</span></span><br><span class="line">      Mat_&lt;Vec3b&gt; cimage= image;</span><br><span class="line">      Mat_&lt;Vec3b&gt;::iterator it=cimage.begin();</span><br><span class="line">      Mat_&lt;Vec3b&gt;::iterator itend=cimage.end();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> ( ; it!= itend; it++) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line"></span><br><span class="line">        (*it)[<span class="number">0</span>]= (*it)[<span class="number">0</span>]/div*div + div/<span class="number">2</span>;</span><br><span class="line">        (*it)[<span class="number">1</span>]= (*it)[<span class="number">1</span>]/div*div + div/<span class="number">2</span>;</span><br><span class="line">        (*it)[<span class="number">2</span>]= (*it)[<span class="number">2</span>]/div*div + div/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------------------【方法十二】--------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用动态地址计算配合at</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce11</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> nl= image.rows; <span class="comment">//行数</span></span><br><span class="line">      <span class="keyword">int</span> nc= image.cols; <span class="comment">//列数</span></span><br><span class="line">              </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nl; j++)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nc; i++)</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line">                 </span><br><span class="line">                  image.at&lt;Vec3b&gt;(j,i)[<span class="number">0</span>]=     image.at&lt;Vec3b&gt;(j,i)[<span class="number">0</span>]/div*div + div/<span class="number">2</span>;</span><br><span class="line">                  image.at&lt;Vec3b&gt;(j,i)[<span class="number">1</span>]=     image.at&lt;Vec3b&gt;(j,i)[<span class="number">1</span>]/div*div + div/<span class="number">2</span>;</span><br><span class="line">                  image.at&lt;Vec3b&gt;(j,i)[<span class="number">2</span>]=     image.at&lt;Vec3b&gt;(j,i)[<span class="number">2</span>]/div*div + div/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">            &#125; <span class="comment">//单行处理结束                 </span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------------【方法十三】-----------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用图像的输入与输出</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce12</span><span class="params">(<span class="keyword">const</span> Mat &amp;image, <span class="comment">//输入图像</span></span></span></span><br><span class="line"><span class="function"><span class="params">                 Mat &amp;result,      <span class="comment">// 输出图像</span></span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> nl= image.rows; <span class="comment">//行数</span></span><br><span class="line">      <span class="keyword">int</span> nc= image.cols ; <span class="comment">//列数</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//准备好初始化后的Mat给输出图像</span></span><br><span class="line">      result.create(image.rows,image.cols,image.type());</span><br><span class="line"></span><br><span class="line">      <span class="comment">//创建无像素填充的图像</span></span><br><span class="line">      nc= nc*nl;</span><br><span class="line">      nl= <span class="number">1</span>;  <span class="comment">//单维数组</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> n= <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="built_in">log</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(div))/<span class="built_in">log</span>(<span class="number">2.0</span>));</span><br><span class="line">      <span class="comment">//掩码值</span></span><br><span class="line">      uchar mask= <span class="number">0xFF</span>&lt;&lt;n; <span class="comment">// e.g.比如div=16, mask= 0xF0</span></span><br><span class="line">              </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nl; j++) &#123;</span><br><span class="line"></span><br><span class="line">          uchar* data= result.ptr&lt;uchar&gt;(j);</span><br><span class="line">          <span class="keyword">const</span> uchar* idata= image.ptr&lt;uchar&gt;(j);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nc; i++) &#123;</span><br><span class="line">            <span class="comment">//-------------开始处理每个像素-------------------</span></span><br><span class="line">                 </span><br><span class="line">            *data++= (*idata++)&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">            *data++= (*idata++)&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">            *data++= (*idata++)&amp;mask + div/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//-------------结束像素处理------------------------</span></span><br><span class="line">          &#125; <span class="comment">//单行处理结束                   </span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------------------【方法十四】-------------------------------------------</span></span><br><span class="line"><span class="comment">//        说明：利用操作符重载</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">colorReduce13</span><span class="params">(Mat &amp;image, <span class="keyword">int</span> div=<span class="number">64</span>)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">int</span> n= <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="built_in">log</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(div))/<span class="built_in">log</span>(<span class="number">2.0</span>));</span><br><span class="line">      <span class="comment">//掩码值</span></span><br><span class="line">      uchar mask= <span class="number">0xFF</span>&lt;&lt;n; <span class="comment">// e.g. 比如div=16, mask= 0xF0</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//进行色彩还原</span></span><br><span class="line">      image=(image&amp;Scalar(mask,mask,mask))+Scalar(div/<span class="number">2</span>,div/<span class="number">2</span>,div/<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------------------------【main( )函数】--------------------------------------------</span></span><br><span class="line"><span class="comment">//        描述：控制台应用程序的入口函数，我们的程序从这里开始</span></span><br><span class="line"><span class="comment">//-------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    int64 t[NTESTS],tinit;</span><br><span class="line">    Mat image0;</span><br><span class="line">    Mat image1;</span><br><span class="line">    Mat image2;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">"color 4F"</span>);</span><br><span class="line"></span><br><span class="line">    image0= imread(<span class="string">"1.png"</span>);</span><br><span class="line">    <span class="keyword">if</span> (!image0.data)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//时间值设为0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;NTESTS; i++)</span><br><span class="line">        t[i]= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 多次重复测试</span></span><br><span class="line">    <span class="keyword">int</span> n=NITERATIONS;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;n; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; k &lt;&lt; <span class="string">" of "</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        <span class="comment">//【方法一】利用.ptr 和 []</span></span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce0(image1);</span><br><span class="line">        t[<span class="number">0</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法二】利用 .ptr 和 * ++</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce1(image1);</span><br><span class="line">        t[<span class="number">1</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法三】利用.ptr 和 * ++ 以及模操作</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce2(image1);</span><br><span class="line">        t[<span class="number">2</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法四】 利用.ptr 和 * ++ 以及位操作</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce3(image1);</span><br><span class="line">        t[<span class="number">3</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法五】 利用指针的算术运算</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce4(image1);</span><br><span class="line">        t[<span class="number">4</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法六】利用 .ptr 和 * ++以及位运算、image.cols * image.channels()</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce5(image1);</span><br><span class="line">        t[<span class="number">5</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法七】利用.ptr 和 * ++ 以及位运算(continuous)</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce6(image1);</span><br><span class="line">        t[<span class="number">6</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法八】利用 .ptr 和 * ++ 以及位运算 (continuous+channels)</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce7(image1);</span><br><span class="line">        t[<span class="number">7</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法九】 利用Mat_ iterator</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce8(image1);</span><br><span class="line">        t[<span class="number">8</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法十】 利用Mat_ iterator以及位运算</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce9(image1);</span><br><span class="line">        t[<span class="number">9</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法十一】利用Mat Iterator_</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce10(image1);</span><br><span class="line">        t[<span class="number">10</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法十二】 利用动态地址计算配合at</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce11(image1);</span><br><span class="line">        t[<span class="number">11</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//【方法十三】 利用图像的输入与输出</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        Mat result;</span><br><span class="line">        colorReduce12(image1, result);</span><br><span class="line">        t[<span class="number">12</span>]+= getTickCount()-tinit;</span><br><span class="line">        image2= result;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//【方法十四】 利用操作符重载</span></span><br><span class="line">        image1= imread(<span class="string">"1.png"</span>);</span><br><span class="line">        tinit= getTickCount();</span><br><span class="line">        colorReduce13(image1);</span><br><span class="line">        t[<span class="number">13</span>]+= getTickCount()-tinit;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//------------------------------</span></span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">//输出图像   </span></span><br><span class="line">    imshow(<span class="string">"原始图像"</span>,image0);</span><br><span class="line">    imshow(<span class="string">"结果"</span>,image2);</span><br><span class="line">    imshow(<span class="string">"图像结果"</span>,image1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出平均执行时间</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"-------------------------------------------"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法一】利用.ptr 和 []的方法所用时间为 "</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">0</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法二】利用 .ptr 和 * ++ 的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">1</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法三】利用.ptr 和 * ++ 以及模操作的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">2</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法四】利用.ptr 和 * ++ 以及位操作的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">3</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法五】利用指针算术运算的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">4</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法六】利用 .ptr 和 * ++以及位运算、channels()的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">5</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法七】利用.ptr 和 * ++ 以及位运算(continuous)的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">6</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法八】利用 .ptr 和 * ++ 以及位运算 (continuous+channels)的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">7</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法九】利用Mat_ iterator 的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">8</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法十】利用Mat_ iterator以及位运算的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">9</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法十一】利用Mat Iterator_的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">10</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法十二】利用动态地址计算配合at 的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">11</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法十三】利用图像的输入与输出的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">12</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n【方法十四】利用操作符重载的方法所用时间为"</span> &lt;&lt; <span class="number">1000.</span>*t[<span class="number">13</span>]/getTickFrequency()/n &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">endl</span>;    </span><br><span class="line">    </span><br><span class="line">    waitKey();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​	OpenCV是我研途中重点打交道的工具库。教研室流传下来的图像处理程序都是基于OpenCV1的code，那更底层，更多指针与结构体。而如今OpenCV4都已经更新了，C++强调接口的实用是大势所趋，用到什么去看相关的函数即可。这半年的学习让我深刻体会到线性学习的弊端和不
      
    
    </summary>
    
      <category term="OpenCV" scheme="http://yoursite.com/categories/OpenCV/"/>
    
    
      <category term="OpenCV" scheme="http://yoursite.com/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>机器视觉在晶振外壳缺陷检测中的应用</title>
    <link href="http://yoursite.com/2019/02/01/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89%E5%9C%A8%E6%99%B6%E6%8C%AF%E5%A4%96%E5%A3%B3%E7%BC%BA%E9%99%B7%E6%A3%80%E6%B5%8B%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2019/02/01/机器视觉在晶振外壳缺陷检测中的应用/</id>
    <published>2019-02-01T08:28:09.000Z</published>
    <updated>2019-02-01T08:55:28.242Z</updated>
    
    <content type="html"><![CDATA[<p><strong>参考文献：</strong></p><p><code>庞章炯,张 鹰,谢佩军,计时鸣. 机器视觉在晶振外壳缺陷检测中的应用</code></p><ul><li><p>晶振外壳：微型冲压件，内底 侧面 缺陷较大</p></li><li><p><strong>图像处理</strong>：边缘检测、数学形态学、拓扑描述</p></li></ul><p><strong>机器视觉在制造业上分为：</strong></p><ol><li>基于产品特征的检测：空间特征、表面品质特征、结构特征</li><li>机器人</li></ol><p><mark>对于大曲率的金属物件表面检测，最理想的方案是 使用同轴照明</mark></p><p><strong>重要公式</strong>：</p><p><img src="http://i1.bvimg.com/675947/5a07ba4319f4beaa.png" alt="RGB到HSV转换公式"></p><p>高亮反射区产生的光斑常与其他高亮区域相连，因此需利用数学形态学的相关操作</p><p>形态学可以用来简化图像数据，保持图像的基本形状特性，同时去掉图像中与研究目的无关的部分</p><p>数学形态学：集合论</p><p>膨胀  腐蚀  开启   闭合</p><p>通常给出一个图像集合和一个结构元素集合，利用结构元素对图像进行操作</p><p>拓扑学(topology)</p><p>研究 图形不受畸变变形影响的性质 。</p><p>对于一个 给定平面区域来说 ，区域内的孔数H和区域内的连通组元个数 c 都是常用的拓扑性质</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;参考文献：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;庞章炯,张 鹰,谢佩军,计时鸣. 机器视觉在晶振外壳缺陷检测中的应用&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;晶振外壳：微型冲压件，内底 侧面 缺陷较大&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;s
      
    
    </summary>
    
      <category term="Paper Summary" scheme="http://yoursite.com/categories/Paper-Summary/"/>
    
    
      <category term="机器视觉" scheme="http://yoursite.com/tags/%E6%9C%BA%E5%99%A8%E8%A7%86%E8%A7%89/"/>
    
      <category term="晶振" scheme="http://yoursite.com/tags/%E6%99%B6%E6%8C%AF/"/>
    
      <category term="图像处理" scheme="http://yoursite.com/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>误差补偿模型</title>
    <link href="http://yoursite.com/2019/01/28/%E8%AF%AF%E5%B7%AE%E8%A1%A5%E5%81%BF%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2019/01/28/误差补偿模型/</id>
    <published>2019-01-28T08:41:17.000Z</published>
    <updated>2019-02-01T09:29:00.462Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>就像来自遥远宇宙的一束光，不知道它从哪里来，也不知道它到哪里去，从我们头上掠过，波澜不惊。</p></blockquote><h3 id="误差来源"><a class="markdownIt-Anchor" href="#误差来源"></a> 误差来源</h3><p>视觉测量误差主要来源有：图像采集误差，相机安装误差，运动平台误差。其中高精度的CCD传感器与图像采集卡的误差微乎其微可以忽略；相机坐标系如果与水平面不共面或共面但是存在夹角都会引入误差；三维运动平台的几何误差的垂直度问题将导致图像处理中的圆心提取和图像拼接，误差需要补偿。</p><h3 id="坐标系转换"><a class="markdownIt-Anchor" href="#坐标系转换"></a> 坐标系转换</h3><p><img src="https://img-blog.csdnimg.cn/20181122134704175.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZseV93dA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol><li>图像坐标系<br><img src="https://img-blog.csdnimg.cn/20181122141206254.png" alt="在这里插入图片描述"><br>图像坐标系建立在CCD传感器的面上如上图。</li><li>视觉坐标系<br><img src="https://img-blog.csdnimg.cn/20181122141220479.png" alt="在这里插入图片描述"></li><li>装配作业坐标系<br>与视觉坐标系建系相同<br><img src="https://img-blog.csdnimg.cn/20181122141449212.png" alt="在这里插入图片描述"></li><li>世界坐标系<br>世界坐标系是空间绝对坐标系，选取视觉坐标为世界坐标系即可</li></ol><h3 id="转换"><a class="markdownIt-Anchor" href="#转换"></a> 转换</h3><p>各坐标系的空间位置如图所示，三维运动平台中X轴和Y轴滑台不垂直，YV0和YC0为实际的Y轴滑台运动方向。图像坐标系UOV与世界坐标系XWOYW之间的夹角为θ，以世界坐标系XW轴为基准，图像U轴向世界坐标系Y轴正方向偏转为正，反之为负。视觉测量模块三维运动平台X轴与YV0轴滑台之间的夹角为α。世界坐标系和装配作业坐标系XCOYC之间的夹角为φ，以世界坐标系X轴为基准，装配作业坐标系X轴向世界坐标系Y轴正方向偏转为正，反之为负。装配作业模块三维运动平台X轴与YC0轴滑台之间夹角为β。<br><img src="https://img-blog.csdnimg.cn/20190113194541759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZseV93dA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>根据坐标系之间的坐标转换关系建立误差补偿模型，以图像中一点为例，分别将其从图像坐标系装换到世界坐标系和装配作业坐标系中。<br>首先完成由图像坐标系向世界坐标系的转换，设图像中一点（u，v），其在世界坐标系中的坐标为（x，y），由于图像坐标系单位为像素，世界坐标系单位为微米，单位转换关系为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable side="right"><mlabeledtr><mtd><mtext>(1)</mtext></mtd><mtd><mrow><mi>P</mi><mo>=</mo><mrow><mo fence="true">{</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">​</mi><msub><mi>u</mi><mn>0</mn></msub><mo>=</mo><mi>u</mi><mo>×</mo><msub><mi>S</mi><mi>x</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">​</mi><msub><mi>v</mi><mn>0</mn></msub><mo>=</mo><mi>v</mi><mo>×</mo><msub><mi>S</mi><mi>y</mi></msub><mi mathvariant="normal">​</mi></mrow></mstyle></mtd></mtr></mtable></mrow><mi mathvariant="normal">​</mi></mrow></mtd></mlabeledtr></mtable><annotation encoding="application/x-tex">P=\begin{cases} ​u_0=u \times S_x\\ ​v_0=v \times S_y​\end{cases} \tag{1}​</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">​</span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">​</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord">​</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">​</span></span><span class="tag"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">1</span></span><span class="mord">)</span></span></span></span></span></span></p><p>相应的矩阵形式<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>M</mi><mi>s</mi></msub></mrow><annotation encoding="application/x-tex">M_s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable side="right"><mlabeledtr><mtd><mtext>(2)</mtext></mtd><mtd><mrow><msub><mi>M</mi><mi>s</mi></msub><mo>=</mo><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>S</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>S</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow></mtd></mlabeledtr></mtable><annotation encoding="application/x-tex">M_s= \begin{bmatrix}   S_x &amp; 0 &amp; 0 \\   0&amp; S_y &amp; 0 \\  0 &amp; 0 &amp; 1  \end{bmatrix} \tag{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span><span class="tag"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">2</span></span><span class="mord">)</span></span></span></span></span></span></p><p>图像坐标系和世界坐标系坐标轴之间存在夹角θ，需对图像坐标系进行旋转，旋转矩阵<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>M</mi><mi>R</mi></msub></mrow><annotation encoding="application/x-tex">M_R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable side="right"><mlabeledtr><mtd><mtext>(3)</mtext></mtd><mtd><mrow><msub><mi>M</mi><mi>R</mi></msub><mo>=</mo><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow></mtd></mlabeledtr></mtable><annotation encoding="application/x-tex">M_R= \begin{bmatrix}  cos\theta &amp; -sin\theta &amp; 0 \\  sin\theta&amp; cos\theta&amp; 0 \\  0 &amp; 0 &amp; 1  \end{bmatrix} \tag{3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span><span class="tag"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">3</span></span><span class="mord">)</span></span></span></span></span></span></p><p>采集过程中相机会变换采集位置，应该对图像坐标系原点和世界坐标系原点之间的距离进行补偿，需要进行平移变换，相应的平移变换矩阵<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>M</mi><mi>T</mi></msub></mrow><annotation encoding="application/x-tex">M_T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable side="right"><mlabeledtr><mtd><mtext>(4)</mtext></mtd><mtd><mrow><msub><mi>M</mi><mi>T</mi></msub><mo>=</mo><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>D</mi><mi>x</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>D</mi><mi>y</mi></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow></mtd></mlabeledtr></mtable><annotation encoding="application/x-tex">M_T= \begin{bmatrix}  1 &amp; 0 &amp; D_x \\ 0&amp; 1&amp; D_y\\  0 &amp; 0 &amp; 1  \end{bmatrix} \tag{4}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span><span class="tag"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">4</span></span><span class="mord">)</span></span></span></span></span></span></p><p>图像坐标系原点在世界坐标系中的坐标值（Dx，Dy）无法直接获取，从图5.4可知，相机在三维运动平台中XY向滑台位移分别为dx和dy，经计算得出此时相机在世界坐标系的坐标（Dx，Dy），计算公式为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable side="right"><mlabeledtr><mtd><mtext>(5)</mtext></mtd><mtd><mrow><mo fence="true">{</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>D</mi><mi>x</mi></msub><mo>=</mo><msub><mi>d</mi><mi>x</mi></msub><mo>−</mo><msub><mi>d</mi><mi>y</mi></msub><mo>×</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo>(</mo><mi>α</mi><mo>−</mo><mn>9</mn><msup><mn>0</mn><mi>o</mi></msup><mo>)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>D</mi><mi>y</mi></msub><mo>=</mo><msub><mi>d</mi><mi>y</mi></msub><mo>×</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo>(</mo><mi>α</mi><mo>−</mo><mn>9</mn><msup><mn>0</mn><mi>o</mi></msup><mo>)</mo></mrow></mstyle></mtd></mtr></mtable></mrow></mtd></mlabeledtr></mtable><annotation encoding="application/x-tex">\begin{cases} D_x=d_x-d_y \times sin(\alpha-90^o)\\ D_y=d_y \times cos(\alpha-90^o)\end{cases} \tag{5}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">9</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">9</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="tag"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">5</span></span><span class="mord">)</span></span></span></span></span></span></p><p>图像中一点（u，v）转换为世界坐标系一点（x，y）的误差补偿模型表达式为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable side="right"><mlabeledtr><mtd><mtext>(6)</mtext></mtd><mtd><mrow><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>d</mi><mi>x</mi></msub><mo>−</mo><msub><mi>d</mi><mi>y</mi></msub><mo>×</mo><mi>s</mi><mi>i</mi><mi>n</mi><mo>(</mo><mi>α</mi><mo>−</mo><mn>9</mn><msup><mn>0</mn><mi>o</mi></msup><mo>)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>d</mi><mi>y</mi></msub><mo>×</mo><mi>c</mi><mi>o</mi><mi>s</mi><mo>(</mo><mi>α</mi><mo>−</mo><mn>9</mn><msup><mn>0</mn><mi>o</mi></msup><mo>)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>θ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>S</mi><mi>x</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>S</mi><mi>y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>u</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>v</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow></mtd></mlabeledtr></mtable><annotation encoding="application/x-tex"> \begin{bmatrix}  x \\ y\\  1  \end{bmatrix} =   \begin{bmatrix}  1&amp;0&amp;d_x-d_y \times sin(\alpha-90^o)\\ 0&amp; 1&amp; d_y \times cos(\alpha-90^o)\\  0&amp;0&amp;1  \end{bmatrix}    \begin{bmatrix}  cos\theta &amp; -sin\theta &amp; 0 \\  sin\theta&amp; cos\theta&amp; 0 \\  0 &amp; 0 &amp; 1  \end{bmatrix}   \begin{bmatrix}   S_x &amp; 0 &amp; 0 \\   0&amp; S_y &amp; 0 \\  0 &amp; 0 &amp; 1  \end{bmatrix}    \begin{bmatrix}  u\\v\\  1  \end{bmatrix} \tag{6}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">9</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">9</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">u</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span><span class="tag"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">6</span></span><span class="mord">)</span></span></span></span></span></span></p><p>得到零件在世界坐标系中的坐标后，装配作业模块夹持壳体完成对正。由于世界坐标系和装配作业坐标系之间存在夹角，并且装配作业模块XY滑台不垂直，需要进行误差补偿。<br>装配过程仅需获取两个零件圆心的相对位置，不要求零件的绝对位置。可直接建立相对位置转换的误差补偿模型。设两零件在世界坐标系中的距离为（ΔX，ΔY），转换到装配作业坐标系后坐标为（ΔXC，ΔYC）。<br>首先对世界坐标系进行旋转补偿夹角φ，旋转矩阵<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>M</mi><mi>R</mi></msub></mrow><annotation encoding="application/x-tex">M_R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable side="right"><mlabeledtr><mtd><mtext>(7)</mtext></mtd><mtd><mrow><msub><mi>M</mi><mi>R</mi></msub><mo>=</mo><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>φ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mi>φ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>φ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>φ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow></mtd></mlabeledtr></mtable><annotation encoding="application/x-tex">M_R=   \begin{bmatrix}  cos\varphi &amp; sin\varphi &amp; 0\\  -sin\varphi &amp; cos\varphi &amp; 0\\0 &amp; 0&amp; 1  \end{bmatrix} \tag{7}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">φ</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">φ</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">φ</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">φ</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span><span class="tag"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">7</span></span><span class="mord">)</span></span></span></span></span></span></p><p>旋转变换之后得到两个圆心在装配作业坐标系中的坐标差，由于装配作业模块XY向滑台不垂直，需要计算出XY滑台应该补偿的实际距离，转换矩阵<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>M</mi><mi>D</mi></msub></mrow><annotation encoding="application/x-tex">M_D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable side="right"><mlabeledtr><mtd><mtext>(8)</mtext></mtd><mtd><mrow><msub><mi>M</mi><mi>D</mi></msub><mo>=</mo><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>t</mi><mi>a</mi><mi>n</mi><mo>(</mo><mi>β</mi><mo>−</mo><mn>9</mn><msup><mn>0</mn><mi>o</mi></msup><mo>)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>s</mi><mi>e</mi><mi>c</mi><mo>(</mo><mi>β</mi><mo>−</mo><mn>9</mn><msup><mn>0</mn><mi>o</mi></msup><mo>)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow></mtd></mlabeledtr></mtable><annotation encoding="application/x-tex">M_D=\begin{bmatrix}1 &amp; tan(\beta-90^o) &amp; 0\\0 &amp; sec(\beta-90^o) &amp; 0 \\0 &amp; 0 &amp;1\end{bmatrix} \tag{8}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">9</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">9</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span><span class="tag"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">8</span></span><span class="mord">)</span></span></span></span></span></span></p><p>零件圆心世界坐标系中的坐标差转换到装配作业坐标系中，并计算出实际的XY滑台补偿位移量（ΔXC0，ΔYC0）误差补偿模型的矩阵表达式为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable side="right"><mlabeledtr><mtd><mtext>(9)</mtext></mtd><mtd><mrow><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">Δ</mi><msub><mi>X</mi><mrow><mi>C</mi><mi>O</mi></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">Δ</mi><msub><mi>Y</mi><mrow><mi>C</mi><mi>O</mi></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>t</mi><mi>a</mi><mi>n</mi><mo>(</mo><mi>β</mi><mo>−</mo><mn>9</mn><msup><mn>0</mn><mi>o</mi></msup><mo>)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>s</mi><mi>e</mi><mi>c</mi><mo>(</mo><mi>β</mi><mo>−</mo><mn>9</mn><msup><mn>0</mn><mi>o</mi></msup><mo>)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>φ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mi>φ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>s</mi><mi>i</mi><mi>n</mi><mi>φ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>φ</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">Δ</mi><mi>X</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">Δ</mi><mi>Y</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow></mtd></mlabeledtr></mtable><annotation encoding="application/x-tex"> \begin{bmatrix}  \Delta X_{CO} \\   \Delta Y_{CO} \\  1  \end{bmatrix} =   \begin{bmatrix}1 &amp; tan(\beta-90^o) &amp; 0\\0 &amp; sec(\beta-90^o) &amp; 0 \\0 &amp; 0 &amp;1\end{bmatrix}   \begin{bmatrix}  cos\varphi &amp; sin\varphi &amp; 0\\  -sin\varphi &amp; cos\varphi &amp; 0\\0 &amp; 0&amp; 1  \end{bmatrix}   \begin{bmatrix}  \Delta X\\   \Delta Y\\  1  \end{bmatrix} \tag{9}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">Δ</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">O</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">Δ</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">O</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">9</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">9</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">φ</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">φ</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">φ</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">φ</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">Δ</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">Δ</span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span><span class="tag"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">9</span></span><span class="mord">)</span></span></span></span></span></span></p><p>终于敲完了，latex确实很好用，矩阵书写很方便，坚持用Markdown来写博客！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;就像来自遥远宇宙的一束光，不知道它从哪里来，也不知道它到哪里去，从我们头上掠过，波澜不惊。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;误差来源&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#误差来源&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="Computer Vision" scheme="http://yoursite.com/categories/Computer-Vision/"/>
    
    
      <category term="坐标转换" scheme="http://yoursite.com/tags/%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2/"/>
    
      <category term="camera calibrate" scheme="http://yoursite.com/tags/camera-calibrate/"/>
    
  </entry>
  
  <entry>
    <title>一款类似于mac-dock栏的windows软件</title>
    <link href="http://yoursite.com/2019/01/28/%E4%B8%80%E6%AC%BE%E7%B1%BB%E4%BC%BC%E4%BA%8Emac-dock%E6%A0%8F%E7%9A%84windows%E8%BD%AF%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/01/28/一款类似于mac-dock栏的windows软件/</id>
    <published>2019-01-28T08:41:17.000Z</published>
    <updated>2019-03-05T07:48:35.853Z</updated>
    
    <content type="html"><![CDATA[<p>原文链接：一款类似于mac-dock栏的windows软件</p><h3 id="一款类似于mac-dock栏的windows软件"><a class="markdownIt-Anchor" href="#一款类似于mac-dock栏的windows软件"></a> 一款类似于mac-dock栏的windows软件</h3><p><a href="https://imgchr.com/i/kXj3PU" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/03/05/kXj3PU.md.png" alt="kXj3PU.md.png"></a><br>软件名称叫 <code>Winstep Nexus Ultimate</code></p><p>软件链接如下：</p><p>链接：<a href="https://www.lanzous.com/i1xnevc" target="_blank" rel="noopener">https://www.lanzous.com/i1xnevc</a>    密码:5vsy</p><h4 id="安装破解方法"><a class="markdownIt-Anchor" href="#安装破解方法"></a> 安装破解方法</h4><ol><li>下载安装Winstep Nexus，安装完成后不要启动</li><li>以管理员权限运行Activation.exe，将其安装到Winstep Nexus默认目录中</li><li>启动Winstep Nexus，输入任意用户名和密钥注册</li><li>重启Winstep Nexus即为激活版</li></ol><p>注：不能更新，如果更新，可重新执2-4步</p><h4 id="效果图"><a class="markdownIt-Anchor" href="#效果图"></a> 效果图</h4><p>这是我的桌面，软件的主题有很多，挑自己喜欢的风格和颜色即可。</p><p><a href="https://imgchr.com/i/kXvZFK" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/03/05/kXvZFK.md.png" alt="kXvZFK.md.png"></a></p><blockquote><p>每天写点东西，让坚持变成习惯!</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文链接：一款类似于mac-dock栏的windows软件&lt;/p&gt;
&lt;h3 id=&quot;一款类似于mac-dock栏的windows软件&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#一款类似于mac-dock栏的windows软件&quot;&gt;&lt;/a&gt; 一款
      
    
    </summary>
    
      <category term="黑科技" scheme="http://yoursite.com/categories/%E9%BB%91%E7%A7%91%E6%8A%80/"/>
    
    
      <category term="黑科技" scheme="http://yoursite.com/tags/%E9%BB%91%E7%A7%91%E6%8A%80/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="http://yoursite.com/2019/01/27/hello-world/"/>
    <id>http://yoursite.com/2019/01/27/hello-world/</id>
    <published>2019-01-26T16:00:00.000Z</published>
    <updated>2019-01-29T05:25:15.170Z</updated>
    
    <content type="html"><![CDATA[<p>终于搭建成功了个人网站，愿君乘风破浪，不枉满腔赤诚！</p><h2 id="常用操作"><a class="markdownIt-Anchor" href="#常用操作"></a> 常用操作</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>生成一篇新的博客，然后选用一款<code>markdown</code>编辑器进行编辑即可</p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><p>这条语句经常用来本地测试博客的更改情况和效果。</p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>生成文件</p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>部署到服务器</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;终于搭建成功了个人网站，愿君乘风破浪，不枉满腔赤诚！&lt;/p&gt;
&lt;h2 id=&quot;常用操作&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#常用操作&quot;&gt;&lt;/a&gt; 常用操作&lt;/h2&gt;
&lt;h3 id=&quot;create-a-new-post&quot;&gt;&lt;a class
      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
</feed>
